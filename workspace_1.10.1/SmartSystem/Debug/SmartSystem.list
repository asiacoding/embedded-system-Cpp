
SmartSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  080027c0  080027c0  000127c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f94  08002f94  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002f94  08002f94  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f94  08002f94  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000078  08003014  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08003014  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ceb6  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed8  00000000  00000000  0002cf57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0002ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  0002fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7ec  00000000  00000000  00030660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f263  00000000  00000000  0004ae4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cc30  00000000  00000000  0005a0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6cdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003834  00000000  00000000  000e6d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080027a8 	.word	0x080027a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080027a8 	.word	0x080027a8

0800014c <_ZN13ConfingSystem12MX_I2C1_InitEv>:
	void TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

	I2C_HandleTypeDef hi2c1;
	TIM_HandleTypeDef htim1;

	void MX_I2C1_Init(void)
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4a12      	ldr	r2, [pc, #72]	; (80001a0 <_ZN13ConfingSystem12MX_I2C1_InitEv+0x54>)
 8000158:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4a11      	ldr	r2, [pc, #68]	; (80001a4 <_ZN13ConfingSystem12MX_I2C1_InitEv+0x58>)
 800015e:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2200      	movs	r2, #0
 8000164:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000172:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	2200      	movs	r2, #0
 8000178:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	2200      	movs	r2, #0
 800017e:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2200      	movs	r2, #0
 8000184:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	2200      	movs	r2, #0
 800018a:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4618      	mov	r0, r3
 8000190:	f000 fe60 	bl	8000e54 <HAL_I2C_Init>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */

	}
 8000198:	bf00      	nop
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	40005400 	.word	0x40005400
 80001a4:	00061a80 	.word	0x00061a80

080001a8 <_ZN13ConfingSystem18SystemClock_ConfigEv>:

	void SystemClock_Config(void)
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b092      	sub	sp, #72	; 0x48
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
	{
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b0:	f107 0320 	add.w	r3, r7, #32
 80001b4:	2228      	movs	r2, #40	; 0x28
 80001b6:	2100      	movs	r1, #0
 80001b8:	4618      	mov	r0, r3
 80001ba:	f001 fe73 	bl	8001ea4 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001be:	f107 030c 	add.w	r3, r7, #12
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ce:	2301      	movs	r3, #1
 80001d0:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d6:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001dc:	2301      	movs	r3, #1
 80001de:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e0:	2302      	movs	r3, #2
 80001e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e8:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ee:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f0:	f107 0320 	add.w	r3, r7, #32
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 ff71 	bl	80010dc <HAL_RCC_OscConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0

	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fe:	230f      	movs	r3, #15
 8000200:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000202:	2302      	movs	r3, #2
 8000204:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020e:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000214:	f107 030c 	add.w	r3, r7, #12
 8000218:	2102      	movs	r1, #2
 800021a:	4618      	mov	r0, r3
 800021c:	f001 f9e0 	bl	80015e0 <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
	  {

	  }
	}
 8000224:	bf00      	nop
 8000226:	3748      	adds	r7, #72	; 0x48
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <_ZN13ConfingSystem12MX_GPIO_InitEv>:

	void MX_GPIO_Init(void) {
 800022c:	b580      	push	{r7, lr}
 800022e:	b08a      	sub	sp, #40	; 0x28
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000242:	4b50      	ldr	r3, [pc, #320]	; (8000384 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x158>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a4f      	ldr	r2, [pc, #316]	; (8000384 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x158>)
 8000248:	f043 0310 	orr.w	r3, r3, #16
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	4b4d      	ldr	r3, [pc, #308]	; (8000384 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x158>)
 8000250:	699b      	ldr	r3, [r3, #24]
 8000252:	f003 0310 	and.w	r3, r3, #16
 8000256:	617b      	str	r3, [r7, #20]
 8000258:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800025a:	4b4a      	ldr	r3, [pc, #296]	; (8000384 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x158>)
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	4a49      	ldr	r2, [pc, #292]	; (8000384 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x158>)
 8000260:	f043 0320 	orr.w	r3, r3, #32
 8000264:	6193      	str	r3, [r2, #24]
 8000266:	4b47      	ldr	r3, [pc, #284]	; (8000384 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x158>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	f003 0320 	and.w	r3, r3, #32
 800026e:	613b      	str	r3, [r7, #16]
 8000270:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000272:	4b44      	ldr	r3, [pc, #272]	; (8000384 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x158>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4a43      	ldr	r2, [pc, #268]	; (8000384 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x158>)
 8000278:	f043 0308 	orr.w	r3, r3, #8
 800027c:	6193      	str	r3, [r2, #24]
 800027e:	4b41      	ldr	r3, [pc, #260]	; (8000384 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x158>)
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	f003 0308 	and.w	r3, r3, #8
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800028a:	4b3e      	ldr	r3, [pc, #248]	; (8000384 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x158>)
 800028c:	699b      	ldr	r3, [r3, #24]
 800028e:	4a3d      	ldr	r2, [pc, #244]	; (8000384 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x158>)
 8000290:	f043 0304 	orr.w	r3, r3, #4
 8000294:	6193      	str	r3, [r2, #24]
 8000296:	4b3b      	ldr	r3, [pc, #236]	; (8000384 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x158>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	f003 0304 	and.w	r3, r3, #4
 800029e:	60bb      	str	r3, [r7, #8]
 80002a0:	68bb      	ldr	r3, [r7, #8]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 80002a2:	2200      	movs	r2, #0
 80002a4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80002a8:	4837      	ldr	r0, [pc, #220]	; (8000388 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x15c>)
 80002aa:	f000 fda1 	bl	8000df0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80002ae:	2200      	movs	r2, #0
 80002b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b4:	4835      	ldr	r0, [pc, #212]	; (800038c <_ZN13ConfingSystem12MX_GPIO_InitEv+0x160>)
 80002b6:	f000 fd9b 	bl	8000df0 <HAL_GPIO_WritePin>

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80002ba:	2200      	movs	r2, #0
 80002bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c0:	4833      	ldr	r0, [pc, #204]	; (8000390 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x164>)
 80002c2:	f000 fd95 	bl	8000df0 <HAL_GPIO_WritePin>

		/*Configure GPIO pins : PC13 PC14 PC15 */
		GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80002c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80002ca:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002cc:	2301      	movs	r3, #1
 80002ce:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d4:	2302      	movs	r3, #2
 80002d6:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002d8:	f107 0318 	add.w	r3, r7, #24
 80002dc:	4619      	mov	r1, r3
 80002de:	482a      	ldr	r0, [pc, #168]	; (8000388 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x15c>)
 80002e0:	f000 fc02 	bl	8000ae8 <HAL_GPIO_Init>

		/*Configure GPIO pin : PB11 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 80002e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002e8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002ea:	4b2a      	ldr	r3, [pc, #168]	; (8000394 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x168>)
 80002ec:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ee:	2300      	movs	r3, #0
 80002f0:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	4619      	mov	r1, r3
 80002f8:	4825      	ldr	r0, [pc, #148]	; (8000390 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x164>)
 80002fa:	f000 fbf5 	bl	8000ae8 <HAL_GPIO_Init>

		/*Configure GPIO pin : PA8 */
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 80002fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000302:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000304:	2301      	movs	r3, #1
 8000306:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000308:	2300      	movs	r3, #0
 800030a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030c:	2302      	movs	r3, #2
 800030e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000310:	f107 0318 	add.w	r3, r7, #24
 8000314:	4619      	mov	r1, r3
 8000316:	481d      	ldr	r0, [pc, #116]	; (800038c <_ZN13ConfingSystem12MX_GPIO_InitEv+0x160>)
 8000318:	f000 fbe6 	bl	8000ae8 <HAL_GPIO_Init>

		/*Configure GPIO pin : PA10 */
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 800031c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000320:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000322:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x16c>)
 8000324:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	4619      	mov	r1, r3
 8000330:	4816      	ldr	r0, [pc, #88]	; (800038c <_ZN13ConfingSystem12MX_GPIO_InitEv+0x160>)
 8000332:	f000 fbd9 	bl	8000ae8 <HAL_GPIO_Init>

		/*Configure GPIO pins : PB3 PB4 PB5 */
		GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8000336:	2338      	movs	r3, #56	; 0x38
 8000338:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800033a:	2300      	movs	r3, #0
 800033c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	4619      	mov	r1, r3
 8000348:	4811      	ldr	r0, [pc, #68]	; (8000390 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x164>)
 800034a:	f000 fbcd 	bl	8000ae8 <HAL_GPIO_Init>

		/*Configure GPIO pin : PB9 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 800034e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000352:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000354:	2301      	movs	r3, #1
 8000356:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035c:	2302      	movs	r3, #2
 800035e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000360:	f107 0318 	add.w	r3, r7, #24
 8000364:	4619      	mov	r1, r3
 8000366:	480a      	ldr	r0, [pc, #40]	; (8000390 <_ZN13ConfingSystem12MX_GPIO_InitEv+0x164>)
 8000368:	f000 fbbe 	bl	8000ae8 <HAL_GPIO_Init>

		/* EXTI interrupt init*/
		HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2100      	movs	r1, #0
 8000370:	2028      	movs	r0, #40	; 0x28
 8000372:	f000 fb82 	bl	8000a7a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000376:	2028      	movs	r0, #40	; 0x28
 8000378:	f000 fb9b 	bl	8000ab2 <HAL_NVIC_EnableIRQ>
	}
 800037c:	bf00      	nop
 800037e:	3728      	adds	r7, #40	; 0x28
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	40011000 	.word	0x40011000
 800038c:	40010800 	.word	0x40010800
 8000390:	40010c00 	.word	0x40010c00
 8000394:	10210000 	.word	0x10210000
 8000398:	10110000 	.word	0x10110000

0800039c <_ZN13ConfingSystem12MX_TIM1_InitEv>:

	void MX_TIM1_Init(void) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b088      	sub	sp, #32
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]

		/* USER CODE BEGIN TIM1_Init 0 */

		/* USER CODE END TIM1_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80003a4:	f107 0310 	add.w	r3, r7, #16
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
 80003ae:	609a      	str	r2, [r3, #8]
 80003b0:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]

		/* USER CODE BEGIN TIM1_Init 1 */

		/* USER CODE END TIM1_Init 1 */
		htim1.Instance = TIM1;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a1d      	ldr	r2, [pc, #116]	; (8000434 <_ZN13ConfingSystem12MX_TIM1_InitEv+0x98>)
 80003c0:	655a      	str	r2, [r3, #84]	; 0x54
		htim1.Init.Prescaler = 71;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2247      	movs	r2, #71	; 0x47
 80003c6:	659a      	str	r2, [r3, #88]	; 0x58
		htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2200      	movs	r2, #0
 80003cc:	65da      	str	r2, [r3, #92]	; 0x5c
		htim1.Init.Period = 65535;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003d4:	661a      	str	r2, [r3, #96]	; 0x60
		htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2200      	movs	r2, #0
 80003da:	665a      	str	r2, [r3, #100]	; 0x64
		htim1.Init.RepetitionCounter = 0;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2200      	movs	r2, #0
 80003e0:	669a      	str	r2, [r3, #104]	; 0x68
		htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2200      	movs	r2, #0
 80003e6:	66da      	str	r2, [r3, #108]	; 0x6c
		if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	3354      	adds	r3, #84	; 0x54
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 fa7b 	bl	80018e8 <HAL_TIM_Base_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0

		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003fa:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3354      	adds	r3, #84	; 0x54
 8000400:	f107 0210 	add.w	r2, r7, #16
 8000404:	4611      	mov	r1, r2
 8000406:	4618      	mov	r0, r3
 8000408:	f001 fb08 	bl	8001a1c <HAL_TIM_ConfigClockSource>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0

		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000410:	2300      	movs	r3, #0
 8000412:	60bb      	str	r3, [r7, #8]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
		if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3354      	adds	r3, #84	; 0x54
 800041c:	f107 0208 	add.w	r2, r7, #8
 8000420:	4611      	mov	r1, r2
 8000422:	4618      	mov	r0, r3
 8000424:	f001 fcb6 	bl	8001d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000428:	4603      	mov	r3, r0
				!= HAL_OK) {
 800042a:	2b00      	cmp	r3, #0
		}
		/* USER CODE BEGIN TIM1_Init 2 */

		/* USER CODE END TIM1_Init 2 */

	}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40012c00 	.word	0x40012c00

08000438 <_ZN13ConfingSystem7InitAppEv>:
#include <ConfingSystem.h>

//anything you want to attach before infinite loops out here

void ConfingSystem::InitApp() {
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	HAL_Init();
 8000440:	f000 f9be 	bl	80007c0 <HAL_Init>
	SystemClock_Config();
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff feaf 	bl	80001a8 <_ZN13ConfingSystem18SystemClock_ConfigEv>
	this->MX_GPIO_Init();
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f7ff feee 	bl	800022c <_ZN13ConfingSystem12MX_GPIO_InitEv>
	this->MX_TIM1_Init();
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff ffa3 	bl	800039c <_ZN13ConfingSystem12MX_TIM1_InitEv>
	this->MX_I2C1_Init();
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f7ff fe78 	bl	800014c <_ZN13ConfingSystem12MX_I2C1_InitEv>
	HAL_TIM_Base_Start (&htim1);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3354      	adds	r3, #84	; 0x54
 8000460:	4618      	mov	r0, r3
 8000462:	f001 fa91 	bl	8001988 <HAL_TIM_Base_Start>

}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <_ZN13ConfingSystem9TogglePinEP12GPIO_TypeDeft>:
 void ConfingSystem::WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, int PinState) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin,
			(PinState == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
}

 void ConfingSystem::TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800046e:	b580      	push	{r7, lr}
 8000470:	b084      	sub	sp, #16
 8000472:	af00      	add	r7, sp, #0
 8000474:	60f8      	str	r0, [r7, #12]
 8000476:	60b9      	str	r1, [r7, #8]
 8000478:	4613      	mov	r3, r2
 800047a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 800047c:	88fb      	ldrh	r3, [r7, #6]
 800047e:	4619      	mov	r1, r3
 8000480:	68b8      	ldr	r0, [r7, #8]
 8000482:	f000 fccd 	bl	8000e20 <HAL_GPIO_TogglePin>
}
 8000486:	bf00      	nop
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <_ZN13LcdOledModule7SetTextEPcP9FontDef_ttt15SSD1306_COLOR_t>:
#include "ssd1306.h"
#include "ssd1306.c"


void LcdOledModule::SetText(char* str, FontDef_t* Font, uint16_t X, uint16_t Y,
		 SSD1306_COLOR_t color) {
 800048e:	b480      	push	{r7}
 8000490:	b085      	sub	sp, #20
 8000492:	af00      	add	r7, sp, #0
 8000494:	60f8      	str	r0, [r7, #12]
 8000496:	60b9      	str	r1, [r7, #8]
 8000498:	607a      	str	r2, [r7, #4]
 800049a:	807b      	strh	r3, [r7, #2]
	//SSD1306_GotoXY (X, Y);
	//SSD1306_Puts (str, Font, color);
}
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <_ZN13LcdOledModuleC1Ev>:
	uint8_t TFD = 0;
	int IndexMune = 0;
	char strCopy[15];
	const int LowestTemperature = 28;

	LcdOledModule() {
 80004a6:	b480      	push	{r7}
 80004a8:	b083      	sub	sp, #12
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	f04f 0200 	mov.w	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f04f 0200 	mov.w	r2, #0
 80004bc:	615a      	str	r2, [r3, #20]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	f04f 0200 	mov.w	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	771a      	strb	r2, [r3, #28]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2200      	movs	r2, #0
 80004d0:	775a      	strb	r2, [r3, #29]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	221c      	movs	r2, #28
 80004dc:	635a      	str	r2, [r3, #52]	; 0x34
		//SSD1306_Init();
	}
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4618      	mov	r0, r3
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
	...

080004ec <main>:
#include "main.h"
#include "fonts.h"
#include "ssd1306.h"
#include "LcdOledModule.h"
#include "stdio.h"
int main() {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b0d2      	sub	sp, #328	; 0x148
 80004f0:	af02      	add	r7, sp, #8
	ConfingSystem ConfiObj;
	LcdOledModule LcdObj;
 80004f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ffd5 	bl	80004a6 <_ZN13LcdOledModuleC1Ev>
	ConfiObj.InitApp();
 80004fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ff99 	bl	8000438 <_ZN13ConfingSystem7InitAppEv>
	while (1) {

		int i = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

		for (; i > 4000; i++) {
 800050c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000510:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000514:	ddf7      	ble.n	8000506 <main+0x1a>

			char buffer[100];
			int age = i;
 8000516:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800051a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			// print "My age is " and age variable to buffer variable
			sprintf(buffer, "Count %d", age);
 800051e:	463b      	mov	r3, r7
 8000520:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8000524:	4910      	ldr	r1, [pc, #64]	; (8000568 <main+0x7c>)
 8000526:	4618      	mov	r0, r3
 8000528:	f001 fcc4 	bl	8001eb4 <siprintf>
			ConfiObj.TogglePin(GPIOC, GPIO_PIN_14);
 800052c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000530:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000534:	490d      	ldr	r1, [pc, #52]	; (800056c <main+0x80>)
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff99 	bl	800046e <_ZN13ConfingSystem9TogglePinEP12GPIO_TypeDeft>
			LcdObj.SetText(buffer, &Font_7x10, 0, 0, SSD1306_COLOR_BLACK);
 800053c:	4639      	mov	r1, r7
 800053e:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000542:	2300      	movs	r3, #0
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2300      	movs	r3, #0
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2300      	movs	r3, #0
 800054c:	4a08      	ldr	r2, [pc, #32]	; (8000570 <main+0x84>)
 800054e:	f7ff ff9e 	bl	800048e <_ZN13LcdOledModule7SetTextEPcP9FontDef_ttt15SSD1306_COLOR_t>
			HAL_Delay(1000);
 8000552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000556:	f000 f995 	bl	8000884 <HAL_Delay>
		for (; i > 4000; i++) {
 800055a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800055e:	3301      	adds	r3, #1
 8000560:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000564:	e7d2      	b.n	800050c <main+0x20>
 8000566:	bf00      	nop
 8000568:	080027c0 	.word	0x080027c0
 800056c:	40011000 	.word	0x40011000
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <HAL_MspInit+0x5c>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <HAL_MspInit+0x5c>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6193      	str	r3, [r2, #24]
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <HAL_MspInit+0x5c>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <HAL_MspInit+0x5c>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <HAL_MspInit+0x5c>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	61d3      	str	r3, [r2, #28]
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_MspInit+0x5c>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <HAL_MspInit+0x60>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <HAL_MspInit+0x60>)
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010000 	.word	0x40010000

080005d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a19      	ldr	r2, [pc, #100]	; (8000658 <HAL_I2C_MspInit+0x80>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d12b      	bne.n	8000650 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <HAL_I2C_MspInit+0x84>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a17      	ldr	r2, [pc, #92]	; (800065c <HAL_I2C_MspInit+0x84>)
 80005fe:	f043 0308 	orr.w	r3, r3, #8
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_I2C_MspInit+0x84>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0308 	and.w	r3, r3, #8
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000610:	23c0      	movs	r3, #192	; 0xc0
 8000612:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000614:	2312      	movs	r3, #18
 8000616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000618:	2303      	movs	r3, #3
 800061a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	480f      	ldr	r0, [pc, #60]	; (8000660 <HAL_I2C_MspInit+0x88>)
 8000624:	f000 fa60 	bl	8000ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <HAL_I2C_MspInit+0x84>)
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <HAL_I2C_MspInit+0x84>)
 800062e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000632:	61d3      	str	r3, [r2, #28]
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_I2C_MspInit+0x84>)
 8000636:	69db      	ldr	r3, [r3, #28]
 8000638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	2020      	movs	r0, #32
 8000646:	f000 fa18 	bl	8000a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800064a:	2020      	movs	r0, #32
 800064c:	f000 fa31 	bl	8000ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40005400 	.word	0x40005400
 800065c:	40021000 	.word	0x40021000
 8000660:	40010c00 	.word	0x40010c00

08000664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a09      	ldr	r2, [pc, #36]	; (8000698 <HAL_TIM_Base_MspInit+0x34>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d10b      	bne.n	800068e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <HAL_TIM_Base_MspInit+0x38>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	4a08      	ldr	r2, [pc, #32]	; (800069c <HAL_TIM_Base_MspInit+0x38>)
 800067c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000680:	6193      	str	r3, [r2, #24]
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_TIM_Base_MspInit+0x38>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	40012c00 	.word	0x40012c00
 800069c:	40021000 	.word	0x40021000

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <NMI_Handler+0x4>

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <MemManage_Handler+0x4>

080006b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <UsageFault_Handler+0x4>

080006be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e6:	f000 f8b1 	bl	800084c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}

080006ee <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_ER_IRQn 0 */
 // HAL_I2C_ER_IRQHandler(&hi2c1);
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
	...

080006fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000704:	4a14      	ldr	r2, [pc, #80]	; (8000758 <_sbrk+0x5c>)
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <_sbrk+0x60>)
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <_sbrk+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d102      	bne.n	800071e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <_sbrk+0x64>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <_sbrk+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	429a      	cmp	r2, r3
 800072a:	d207      	bcs.n	800073c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800072c:	f001 fb90 	bl	8001e50 <__errno>
 8000730:	4603      	mov	r3, r0
 8000732:	220c      	movs	r2, #12
 8000734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	e009      	b.n	8000750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <_sbrk+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <_sbrk+0x64>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	4a05      	ldr	r2, [pc, #20]	; (8000760 <_sbrk+0x64>)
 800074c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800074e:	68fb      	ldr	r3, [r7, #12]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20005000 	.word	0x20005000
 800075c:	00000400 	.word	0x00000400
 8000760:	20000094 	.word	0x20000094
 8000764:	200000b0 	.word	0x200000b0

08000768 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000776:	490d      	ldr	r1, [pc, #52]	; (80007ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800078c:	4c0a      	ldr	r4, [pc, #40]	; (80007b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800079a:	f7ff ffe5 	bl	8000768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079e:	f001 fb5d 	bl	8001e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a2:	f7ff fea3 	bl	80004ec <main>
  bx lr
 80007a6:	4770      	bx	lr
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80007b0:	08002f9c 	.word	0x08002f9c
  ldr r2, =_sbss
 80007b4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80007b8:	200000ac 	.word	0x200000ac

080007bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC1_2_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_Init+0x28>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <HAL_Init+0x28>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f947 	bl	8000a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d6:	200f      	movs	r0, #15
 80007d8:	f000 f808 	bl	80007ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007dc:	f7ff feca 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40022000 	.word	0x40022000

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_InitTick+0x54>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_InitTick+0x58>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	fbb3 f3f1 	udiv	r3, r3, r1
 8000806:	fbb2 f3f3 	udiv	r3, r2, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f95f 	bl	8000ace <HAL_SYSTICK_Config>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e00e      	b.n	8000838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d80a      	bhi.n	8000836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000820:	2200      	movs	r2, #0
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f000 f927 	bl	8000a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800082c:	4a06      	ldr	r2, [pc, #24]	; (8000848 <HAL_InitTick+0x5c>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000832:	2300      	movs	r3, #0
 8000834:	e000      	b.n	8000838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
}
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000008 	.word	0x20000008
 8000844:	20000010 	.word	0x20000010
 8000848:	2000000c 	.word	0x2000000c

0800084c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_IncTick+0x1c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <HAL_IncTick+0x20>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4413      	add	r3, r2
 800085c:	4a03      	ldr	r2, [pc, #12]	; (800086c <HAL_IncTick+0x20>)
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	20000010 	.word	0x20000010
 800086c:	20000098 	.word	0x20000098

08000870 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;
 8000874:	4b02      	ldr	r3, [pc, #8]	; (8000880 <HAL_GetTick+0x10>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	20000098 	.word	0x20000098

08000884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800088c:	f7ff fff0 	bl	8000870 <HAL_GetTick>
 8000890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800089c:	d005      	beq.n	80008aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <HAL_Delay+0x44>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4413      	add	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008aa:	bf00      	nop
 80008ac:	f7ff ffe0 	bl	8000870 <HAL_GetTick>
 80008b0:	4602      	mov	r2, r0
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d8f7      	bhi.n	80008ac <HAL_Delay+0x28>
  {
  }
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000010 	.word	0x20000010

080008cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	60d3      	str	r3, [r2, #12]
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	2b00      	cmp	r3, #0
 8000940:	db0b      	blt.n	800095a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	f003 021f 	and.w	r2, r3, #31
 8000948:	4906      	ldr	r1, [pc, #24]	; (8000964 <__NVIC_EnableIRQ+0x34>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	095b      	lsrs	r3, r3, #5
 8000950:	2001      	movs	r0, #1
 8000952:	fa00 f202 	lsl.w	r2, r0, r2
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	e000e100 	.word	0xe000e100

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db0a      	blt.n	8000992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	490c      	ldr	r1, [pc, #48]	; (80009b4 <__NVIC_SetPriority+0x4c>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	440b      	add	r3, r1
 800098c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000990:	e00a      	b.n	80009a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4908      	ldr	r1, [pc, #32]	; (80009b8 <__NVIC_SetPriority+0x50>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	3b04      	subs	r3, #4
 80009a0:	0112      	lsls	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	761a      	strb	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000e100 	.word	0xe000e100
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f1c3 0307 	rsb	r3, r3, #7
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	bf28      	it	cs
 80009da:	2304      	movcs	r3, #4
 80009dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3304      	adds	r3, #4
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d902      	bls.n	80009ec <NVIC_EncodePriority+0x30>
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3b03      	subs	r3, #3
 80009ea:	e000      	b.n	80009ee <NVIC_EncodePriority+0x32>
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43da      	mvns	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43d9      	mvns	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	4313      	orrs	r3, r2
         );
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3724      	adds	r7, #36	; 0x24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a30:	d301      	bcc.n	8000a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a32:	2301      	movs	r3, #1
 8000a34:	e00f      	b.n	8000a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <SysTick_Config+0x40>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3e:	210f      	movs	r1, #15
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f7ff ff90 	bl	8000968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <SysTick_Config+0x40>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <SysTick_Config+0x40>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	e000e010 	.word	0xe000e010

08000a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ff2d 	bl	80008cc <__NVIC_SetPriorityGrouping>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b086      	sub	sp, #24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a8c:	f7ff ff42 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	6978      	ldr	r0, [r7, #20]
 8000a98:	f7ff ff90 	bl	80009bc <NVIC_EncodePriority>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff5f 	bl	8000968 <__NVIC_SetPriority>
}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff35 	bl	8000930 <__NVIC_EnableIRQ>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ffa2 	bl	8000a20 <SysTick_Config>
 8000adc:	4603      	mov	r3, r0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b08b      	sub	sp, #44	; 0x2c
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afa:	e169      	b.n	8000dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000afc:	2201      	movs	r2, #1
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	f040 8158 	bne.w	8000dca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	4a9a      	ldr	r2, [pc, #616]	; (8000d88 <HAL_GPIO_Init+0x2a0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d05e      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b24:	4a98      	ldr	r2, [pc, #608]	; (8000d88 <HAL_GPIO_Init+0x2a0>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d875      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b2a:	4a98      	ldr	r2, [pc, #608]	; (8000d8c <HAL_GPIO_Init+0x2a4>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d058      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b30:	4a96      	ldr	r2, [pc, #600]	; (8000d8c <HAL_GPIO_Init+0x2a4>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d86f      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b36:	4a96      	ldr	r2, [pc, #600]	; (8000d90 <HAL_GPIO_Init+0x2a8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d052      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b3c:	4a94      	ldr	r2, [pc, #592]	; (8000d90 <HAL_GPIO_Init+0x2a8>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d869      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b42:	4a94      	ldr	r2, [pc, #592]	; (8000d94 <HAL_GPIO_Init+0x2ac>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d04c      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b48:	4a92      	ldr	r2, [pc, #584]	; (8000d94 <HAL_GPIO_Init+0x2ac>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d863      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b4e:	4a92      	ldr	r2, [pc, #584]	; (8000d98 <HAL_GPIO_Init+0x2b0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d046      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b54:	4a90      	ldr	r2, [pc, #576]	; (8000d98 <HAL_GPIO_Init+0x2b0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d85d      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b5a:	2b12      	cmp	r3, #18
 8000b5c:	d82a      	bhi.n	8000bb4 <HAL_GPIO_Init+0xcc>
 8000b5e:	2b12      	cmp	r3, #18
 8000b60:	d859      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b62:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <HAL_GPIO_Init+0x80>)
 8000b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b68:	08000be3 	.word	0x08000be3
 8000b6c:	08000bbd 	.word	0x08000bbd
 8000b70:	08000bcf 	.word	0x08000bcf
 8000b74:	08000c11 	.word	0x08000c11
 8000b78:	08000c17 	.word	0x08000c17
 8000b7c:	08000c17 	.word	0x08000c17
 8000b80:	08000c17 	.word	0x08000c17
 8000b84:	08000c17 	.word	0x08000c17
 8000b88:	08000c17 	.word	0x08000c17
 8000b8c:	08000c17 	.word	0x08000c17
 8000b90:	08000c17 	.word	0x08000c17
 8000b94:	08000c17 	.word	0x08000c17
 8000b98:	08000c17 	.word	0x08000c17
 8000b9c:	08000c17 	.word	0x08000c17
 8000ba0:	08000c17 	.word	0x08000c17
 8000ba4:	08000c17 	.word	0x08000c17
 8000ba8:	08000c17 	.word	0x08000c17
 8000bac:	08000bc5 	.word	0x08000bc5
 8000bb0:	08000bd9 	.word	0x08000bd9
 8000bb4:	4a79      	ldr	r2, [pc, #484]	; (8000d9c <HAL_GPIO_Init+0x2b4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d013      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bba:	e02c      	b.n	8000c16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	623b      	str	r3, [r7, #32]
          break;
 8000bc2:	e029      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	623b      	str	r3, [r7, #32]
          break;
 8000bcc:	e024      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	3308      	adds	r3, #8
 8000bd4:	623b      	str	r3, [r7, #32]
          break;
 8000bd6:	e01f      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	330c      	adds	r3, #12
 8000bde:	623b      	str	r3, [r7, #32]
          break;
 8000be0:	e01a      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d102      	bne.n	8000bf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bea:	2304      	movs	r3, #4
 8000bec:	623b      	str	r3, [r7, #32]
          break;
 8000bee:	e013      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d105      	bne.n	8000c04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69fa      	ldr	r2, [r7, #28]
 8000c00:	611a      	str	r2, [r3, #16]
          break;
 8000c02:	e009      	b.n	8000c18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c04:	2308      	movs	r3, #8
 8000c06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69fa      	ldr	r2, [r7, #28]
 8000c0c:	615a      	str	r2, [r3, #20]
          break;
 8000c0e:	e003      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
          break;
 8000c14:	e000      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          break;
 8000c16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2bff      	cmp	r3, #255	; 0xff
 8000c1c:	d801      	bhi.n	8000c22 <HAL_GPIO_Init+0x13a>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	e001      	b.n	8000c26 <HAL_GPIO_Init+0x13e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3304      	adds	r3, #4
 8000c26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	2bff      	cmp	r3, #255	; 0xff
 8000c2c:	d802      	bhi.n	8000c34 <HAL_GPIO_Init+0x14c>
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	e002      	b.n	8000c3a <HAL_GPIO_Init+0x152>
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	3b08      	subs	r3, #8
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	210f      	movs	r1, #15
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	6a39      	ldr	r1, [r7, #32]
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	431a      	orrs	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 80b1 	beq.w	8000dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c68:	4b4d      	ldr	r3, [pc, #308]	; (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a4c      	ldr	r2, [pc, #304]	; (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b4a      	ldr	r3, [pc, #296]	; (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c80:	4a48      	ldr	r2, [pc, #288]	; (8000da4 <HAL_GPIO_Init+0x2bc>)
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	089b      	lsrs	r3, r3, #2
 8000c86:	3302      	adds	r3, #2
 8000c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a40      	ldr	r2, [pc, #256]	; (8000da8 <HAL_GPIO_Init+0x2c0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d013      	beq.n	8000cd4 <HAL_GPIO_Init+0x1ec>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a3f      	ldr	r2, [pc, #252]	; (8000dac <HAL_GPIO_Init+0x2c4>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d00d      	beq.n	8000cd0 <HAL_GPIO_Init+0x1e8>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a3e      	ldr	r2, [pc, #248]	; (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d007      	beq.n	8000ccc <HAL_GPIO_Init+0x1e4>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a3d      	ldr	r2, [pc, #244]	; (8000db4 <HAL_GPIO_Init+0x2cc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d101      	bne.n	8000cc8 <HAL_GPIO_Init+0x1e0>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e006      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000cc8:	2304      	movs	r3, #4
 8000cca:	e004      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000ccc:	2302      	movs	r3, #2
 8000cce:	e002      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd8:	f002 0203 	and.w	r2, r2, #3
 8000cdc:	0092      	lsls	r2, r2, #2
 8000cde:	4093      	lsls	r3, r2
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ce6:	492f      	ldr	r1, [pc, #188]	; (8000da4 <HAL_GPIO_Init+0x2bc>)
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	3302      	adds	r3, #2
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d006      	beq.n	8000d0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d00:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	492c      	ldr	r1, [pc, #176]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	600b      	str	r3, [r1, #0]
 8000d0c:	e006      	b.n	8000d1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	4928      	ldr	r1, [pc, #160]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d18:	4013      	ands	r3, r2
 8000d1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d28:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	4922      	ldr	r1, [pc, #136]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	604b      	str	r3, [r1, #4]
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d36:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	491e      	ldr	r1, [pc, #120]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	4918      	ldr	r1, [pc, #96]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	608b      	str	r3, [r1, #8]
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4914      	ldr	r1, [pc, #80]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d021      	beq.n	8000dbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	490e      	ldr	r1, [pc, #56]	; (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	60cb      	str	r3, [r1, #12]
 8000d84:	e021      	b.n	8000dca <HAL_GPIO_Init+0x2e2>
 8000d86:	bf00      	nop
 8000d88:	10320000 	.word	0x10320000
 8000d8c:	10310000 	.word	0x10310000
 8000d90:	10220000 	.word	0x10220000
 8000d94:	10210000 	.word	0x10210000
 8000d98:	10120000 	.word	0x10120000
 8000d9c:	10110000 	.word	0x10110000
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010000 	.word	0x40010000
 8000da8:	40010800 	.word	0x40010800
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40011000 	.word	0x40011000
 8000db4:	40011400 	.word	0x40011400
 8000db8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_GPIO_Init+0x304>)
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	4909      	ldr	r1, [pc, #36]	; (8000dec <HAL_GPIO_Init+0x304>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	3301      	adds	r3, #1
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f47f ae8e 	bne.w	8000afc <HAL_GPIO_Init+0x14>
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	372c      	adds	r7, #44	; 0x2c
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40010400 	.word	0x40010400

08000df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e00:	787b      	ldrb	r3, [r7, #1]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e06:	887a      	ldrh	r2, [r7, #2]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e0c:	e003      	b.n	8000e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	041a      	lsls	r2, r3, #16
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	611a      	str	r2, [r3, #16]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e32:	887a      	ldrh	r2, [r7, #2]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4013      	ands	r3, r2
 8000e38:	041a      	lsls	r2, r3, #16
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	43d9      	mvns	r1, r3
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	400b      	ands	r3, r1
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	611a      	str	r2, [r3, #16]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
	...

08000e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e12b      	b.n	80010be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d106      	bne.n	8000e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fbac 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2224      	movs	r2, #36	; 0x24
 8000e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ea6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000eb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000eb8:	f000 fce4 	bl	8001884 <HAL_RCC_GetPCLK1Freq>
 8000ebc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	4a81      	ldr	r2, [pc, #516]	; (80010c8 <HAL_I2C_Init+0x274>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d807      	bhi.n	8000ed8 <HAL_I2C_Init+0x84>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4a80      	ldr	r2, [pc, #512]	; (80010cc <HAL_I2C_Init+0x278>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	bf94      	ite	ls
 8000ed0:	2301      	movls	r3, #1
 8000ed2:	2300      	movhi	r3, #0
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	e006      	b.n	8000ee6 <HAL_I2C_Init+0x92>
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4a7d      	ldr	r2, [pc, #500]	; (80010d0 <HAL_I2C_Init+0x27c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	bf94      	ite	ls
 8000ee0:	2301      	movls	r3, #1
 8000ee2:	2300      	movhi	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e0e7      	b.n	80010be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4a78      	ldr	r2, [pc, #480]	; (80010d4 <HAL_I2C_Init+0x280>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	0c9b      	lsrs	r3, r3, #18
 8000ef8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	4a6a      	ldr	r2, [pc, #424]	; (80010c8 <HAL_I2C_Init+0x274>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d802      	bhi.n	8000f28 <HAL_I2C_Init+0xd4>
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	3301      	adds	r3, #1
 8000f26:	e009      	b.n	8000f3c <HAL_I2C_Init+0xe8>
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f2e:	fb02 f303 	mul.w	r3, r2, r3
 8000f32:	4a69      	ldr	r2, [pc, #420]	; (80010d8 <HAL_I2C_Init+0x284>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	099b      	lsrs	r3, r3, #6
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	6812      	ldr	r2, [r2, #0]
 8000f40:	430b      	orrs	r3, r1
 8000f42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	495c      	ldr	r1, [pc, #368]	; (80010c8 <HAL_I2C_Init+0x274>)
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d819      	bhi.n	8000f90 <HAL_I2C_Init+0x13c>
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	1e59      	subs	r1, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f6a:	1c59      	adds	r1, r3, #1
 8000f6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f70:	400b      	ands	r3, r1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00a      	beq.n	8000f8c <HAL_I2C_Init+0x138>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	1e59      	subs	r1, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f84:	3301      	adds	r3, #1
 8000f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f8a:	e051      	b.n	8001030 <HAL_I2C_Init+0x1dc>
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	e04f      	b.n	8001030 <HAL_I2C_Init+0x1dc>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d111      	bne.n	8000fbc <HAL_I2C_Init+0x168>
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	1e58      	subs	r0, r3, #1
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6859      	ldr	r1, [r3, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	440b      	add	r3, r1
 8000fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000faa:	3301      	adds	r3, #1
 8000fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf0c      	ite	eq
 8000fb4:	2301      	moveq	r3, #1
 8000fb6:	2300      	movne	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	e012      	b.n	8000fe2 <HAL_I2C_Init+0x18e>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	1e58      	subs	r0, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6859      	ldr	r1, [r3, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	0099      	lsls	r1, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bf0c      	ite	eq
 8000fdc:	2301      	moveq	r3, #1
 8000fde:	2300      	movne	r3, #0
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_I2C_Init+0x196>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e022      	b.n	8001030 <HAL_I2C_Init+0x1dc>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10e      	bne.n	8001010 <HAL_I2C_Init+0x1bc>
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1e58      	subs	r0, r3, #1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6859      	ldr	r1, [r3, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	440b      	add	r3, r1
 8001000:	fbb0 f3f3 	udiv	r3, r0, r3
 8001004:	3301      	adds	r3, #1
 8001006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800100a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800100e:	e00f      	b.n	8001030 <HAL_I2C_Init+0x1dc>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	1e58      	subs	r0, r3, #1
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6859      	ldr	r1, [r3, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	0099      	lsls	r1, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	fbb0 f3f3 	udiv	r3, r0, r3
 8001026:	3301      	adds	r3, #1
 8001028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800102c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	6809      	ldr	r1, [r1, #0]
 8001034:	4313      	orrs	r3, r2
 8001036:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69da      	ldr	r2, [r3, #28]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	430a      	orrs	r2, r1
 8001052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800105e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6911      	ldr	r1, [r2, #16]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68d2      	ldr	r2, [r2, #12]
 800106a:	4311      	orrs	r1, r2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	430b      	orrs	r3, r1
 8001072:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0201 	orr.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2220      	movs	r2, #32
 80010aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	000186a0 	.word	0x000186a0
 80010cc:	001e847f 	.word	0x001e847f
 80010d0:	003d08ff 	.word	0x003d08ff
 80010d4:	431bde83 	.word	0x431bde83
 80010d8:	10624dd3 	.word	0x10624dd3

080010dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e272      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 8087 	beq.w	800120a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010fc:	4b92      	ldr	r3, [pc, #584]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b04      	cmp	r3, #4
 8001106:	d00c      	beq.n	8001122 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001108:	4b8f      	ldr	r3, [pc, #572]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 030c 	and.w	r3, r3, #12
 8001110:	2b08      	cmp	r3, #8
 8001112:	d112      	bne.n	800113a <HAL_RCC_OscConfig+0x5e>
 8001114:	4b8c      	ldr	r3, [pc, #560]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001120:	d10b      	bne.n	800113a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001122:	4b89      	ldr	r3, [pc, #548]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d06c      	beq.n	8001208 <HAL_RCC_OscConfig+0x12c>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d168      	bne.n	8001208 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e24c      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001142:	d106      	bne.n	8001152 <HAL_RCC_OscConfig+0x76>
 8001144:	4b80      	ldr	r3, [pc, #512]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a7f      	ldr	r2, [pc, #508]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800114a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e02e      	b.n	80011b0 <HAL_RCC_OscConfig+0xd4>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x98>
 800115a:	4b7b      	ldr	r3, [pc, #492]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a7a      	ldr	r2, [pc, #488]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b78      	ldr	r3, [pc, #480]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a77      	ldr	r2, [pc, #476]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800116c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e01d      	b.n	80011b0 <HAL_RCC_OscConfig+0xd4>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0xbc>
 800117e:	4b72      	ldr	r3, [pc, #456]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a71      	ldr	r2, [pc, #452]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b6f      	ldr	r3, [pc, #444]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6e      	ldr	r2, [pc, #440]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0xd4>
 8001198:	4b6b      	ldr	r3, [pc, #428]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a6a      	ldr	r2, [pc, #424]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800119e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b68      	ldr	r3, [pc, #416]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a67      	ldr	r2, [pc, #412]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fb5a 	bl	8000870 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fb56 	bl	8000870 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	; 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e200      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	4b5d      	ldr	r3, [pc, #372]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0xe4>
 80011de:	e014      	b.n	800120a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fb46 	bl	8000870 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fb42 	bl	8000870 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	; 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e1ec      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	4b53      	ldr	r3, [pc, #332]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x10c>
 8001206:	e000      	b.n	800120a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d063      	beq.n	80012de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001216:	4b4c      	ldr	r3, [pc, #304]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001222:	4b49      	ldr	r3, [pc, #292]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b08      	cmp	r3, #8
 800122c:	d11c      	bne.n	8001268 <HAL_RCC_OscConfig+0x18c>
 800122e:	4b46      	ldr	r3, [pc, #280]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d116      	bne.n	8001268 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	4b43      	ldr	r3, [pc, #268]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d005      	beq.n	8001252 <HAL_RCC_OscConfig+0x176>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e1c0      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4939      	ldr	r1, [pc, #228]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	e03a      	b.n	80012de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d020      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001270:	4b36      	ldr	r3, [pc, #216]	; (800134c <HAL_RCC_OscConfig+0x270>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fafb 	bl	8000870 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff faf7 	bl	8000870 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1a1      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4927      	ldr	r1, [pc, #156]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
 80012b0:	e015      	b.n	80012de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <HAL_RCC_OscConfig+0x270>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fada 	bl	8000870 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c0:	f7ff fad6 	bl	8000870 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e180      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d03a      	beq.n	8001360 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d019      	beq.n	8001326 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_RCC_OscConfig+0x274>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff faba 	bl	8000870 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fab6 	bl	8000870 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e160      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800131e:	2001      	movs	r0, #1
 8001320:	f000 fac4 	bl	80018ac <RCC_Delay>
 8001324:	e01c      	b.n	8001360 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_RCC_OscConfig+0x274>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132c:	f7ff faa0 	bl	8000870 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001332:	e00f      	b.n	8001354 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fa9c 	bl	8000870 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d908      	bls.n	8001354 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e146      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	42420000 	.word	0x42420000
 8001350:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	4b92      	ldr	r3, [pc, #584]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1e9      	bne.n	8001334 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80a6 	beq.w	80014ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001372:	4b8b      	ldr	r3, [pc, #556]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10d      	bne.n	800139a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b88      	ldr	r3, [pc, #544]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a87      	ldr	r2, [pc, #540]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b85      	ldr	r3, [pc, #532]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139a:	4b82      	ldr	r3, [pc, #520]	; (80015a4 <HAL_RCC_OscConfig+0x4c8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d118      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a6:	4b7f      	ldr	r3, [pc, #508]	; (80015a4 <HAL_RCC_OscConfig+0x4c8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a7e      	ldr	r2, [pc, #504]	; (80015a4 <HAL_RCC_OscConfig+0x4c8>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fa5d 	bl	8000870 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff fa59 	bl	8000870 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b64      	cmp	r3, #100	; 0x64
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e103      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	4b75      	ldr	r3, [pc, #468]	; (80015a4 <HAL_RCC_OscConfig+0x4c8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x312>
 80013e0:	4b6f      	ldr	r3, [pc, #444]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4a6e      	ldr	r2, [pc, #440]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6213      	str	r3, [r2, #32]
 80013ec:	e02d      	b.n	800144a <HAL_RCC_OscConfig+0x36e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x334>
 80013f6:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a69      	ldr	r2, [pc, #420]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6213      	str	r3, [r2, #32]
 8001402:	4b67      	ldr	r3, [pc, #412]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a66      	ldr	r2, [pc, #408]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f023 0304 	bic.w	r3, r3, #4
 800140c:	6213      	str	r3, [r2, #32]
 800140e:	e01c      	b.n	800144a <HAL_RCC_OscConfig+0x36e>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b05      	cmp	r3, #5
 8001416:	d10c      	bne.n	8001432 <HAL_RCC_OscConfig+0x356>
 8001418:	4b61      	ldr	r3, [pc, #388]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4a60      	ldr	r2, [pc, #384]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	6213      	str	r3, [r2, #32]
 8001424:	4b5e      	ldr	r3, [pc, #376]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	4a5d      	ldr	r2, [pc, #372]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6213      	str	r3, [r2, #32]
 8001430:	e00b      	b.n	800144a <HAL_RCC_OscConfig+0x36e>
 8001432:	4b5b      	ldr	r3, [pc, #364]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4a5a      	ldr	r2, [pc, #360]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	6213      	str	r3, [r2, #32]
 800143e:	4b58      	ldr	r3, [pc, #352]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4a57      	ldr	r2, [pc, #348]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	f023 0304 	bic.w	r3, r3, #4
 8001448:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d015      	beq.n	800147e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fa0d 	bl	8000870 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fa09 	bl	8000870 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e0b1      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001470:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0ee      	beq.n	800145a <HAL_RCC_OscConfig+0x37e>
 800147c:	e014      	b.n	80014a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147e:	f7ff f9f7 	bl	8000870 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001484:	e00a      	b.n	800149c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff f9f3 	bl	8000870 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	f241 3288 	movw	r2, #5000	; 0x1388
 8001494:	4293      	cmp	r3, r2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e09b      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149c:	4b40      	ldr	r3, [pc, #256]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ee      	bne.n	8001486 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d105      	bne.n	80014ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ae:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a3b      	ldr	r2, [pc, #236]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8087 	beq.w	80015d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c4:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d061      	beq.n	8001594 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d146      	bne.n	8001566 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d8:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <HAL_RCC_OscConfig+0x4cc>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff f9c7 	bl	8000870 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e6:	f7ff f9c3 	bl	8000870 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e06d      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150c:	d108      	bne.n	8001520 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	4921      	ldr	r1, [pc, #132]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a19      	ldr	r1, [r3, #32]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	430b      	orrs	r3, r1
 8001532:	491b      	ldr	r1, [pc, #108]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <HAL_RCC_OscConfig+0x4cc>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff f997 	bl	8000870 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff f993 	bl	8000870 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e03d      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x46a>
 8001564:	e035      	b.n	80015d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_RCC_OscConfig+0x4cc>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff f980 	bl	8000870 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff f97c 	bl	8000870 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e026      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x498>
 8001592:	e01e      	b.n	80015d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d107      	bne.n	80015ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e019      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40007000 	.word	0x40007000
 80015a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_RCC_OscConfig+0x500>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0d0      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d910      	bls.n	8001624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b67      	ldr	r3, [pc, #412]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 0207 	bic.w	r2, r3, #7
 800160a:	4965      	ldr	r1, [pc, #404]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001612:	4b63      	ldr	r3, [pc, #396]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0b8      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d020      	beq.n	8001672 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800163c:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a58      	ldr	r2, [pc, #352]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001646:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001654:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4a52      	ldr	r2, [pc, #328]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800165e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001660:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	494d      	ldr	r1, [pc, #308]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d040      	beq.n	8001700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d115      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e07f      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e073      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e06b      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016be:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f023 0203 	bic.w	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4936      	ldr	r1, [pc, #216]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d0:	f7ff f8ce 	bl	8000870 <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff f8ca 	bl	8000870 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e053      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 020c 	and.w	r2, r3, #12
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1eb      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d210      	bcs.n	8001730 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 0207 	bic.w	r2, r3, #7
 8001716:	4922      	ldr	r1, [pc, #136]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e032      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4916      	ldr	r1, [pc, #88]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d009      	beq.n	800176e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	490e      	ldr	r1, [pc, #56]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800176e:	f000 f821 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 8001772:	4602      	mov	r2, r0
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	490a      	ldr	r1, [pc, #40]	; (80017a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001780:	5ccb      	ldrb	r3, [r1, r3]
 8001782:	fa22 f303 	lsr.w	r3, r2, r3
 8001786:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_RCC_ClockConfig+0x1cc>)
 8001788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_RCC_ClockConfig+0x1d0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff f82c 	bl	80007ec <HAL_InitTick>

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40022000 	.word	0x40022000
 80017a4:	40021000 	.word	0x40021000
 80017a8:	08002f48 	.word	0x08002f48
 80017ac:	20000008 	.word	0x20000008
 80017b0:	2000000c 	.word	0x2000000c

080017b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b4:	b490      	push	{r4, r7}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <HAL_RCC_GetSysClockFreq+0xac>)
 80017bc:	1d3c      	adds	r4, r7, #4
 80017be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017c4:	f240 2301 	movw	r3, #513	; 0x201
 80017c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	2300      	movs	r3, #0
 80017d0:	61bb      	str	r3, [r7, #24]
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d002      	beq.n	80017f4 <HAL_RCC_GetSysClockFreq+0x40>
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_GetSysClockFreq+0x46>
 80017f2:	e02b      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017f6:	623b      	str	r3, [r7, #32]
      break;
 80017f8:	e02b      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	0c9b      	lsrs	r3, r3, #18
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	3328      	adds	r3, #40	; 0x28
 8001804:	443b      	add	r3, r7
 8001806:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800180a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d012      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	0c5b      	lsrs	r3, r3, #17
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	3328      	adds	r3, #40	; 0x28
 8001822:	443b      	add	r3, r7
 8001824:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001828:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_RCC_GetSysClockFreq+0xb4>)
 800182e:	fb03 f202 	mul.w	r2, r3, r2
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	fbb2 f3f3 	udiv	r3, r2, r3
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
 800183a:	e004      	b.n	8001846 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	4a0b      	ldr	r2, [pc, #44]	; (800186c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001840:	fb02 f303 	mul.w	r3, r2, r3
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	623b      	str	r3, [r7, #32]
      break;
 800184a:	e002      	b.n	8001852 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_RCC_GetSysClockFreq+0xb4>)
 800184e:	623b      	str	r3, [r7, #32]
      break;
 8001850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001852:	6a3b      	ldr	r3, [r7, #32]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bc90      	pop	{r4, r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	080027cc 	.word	0x080027cc
 8001864:	40021000 	.word	0x40021000
 8001868:	007a1200 	.word	0x007a1200
 800186c:	003d0900 	.word	0x003d0900

08001870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001874:	4b02      	ldr	r3, [pc, #8]	; (8001880 <HAL_RCC_GetHCLKFreq+0x10>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	20000008 	.word	0x20000008

08001884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001888:	f7ff fff2 	bl	8001870 <HAL_RCC_GetHCLKFreq>
 800188c:	4602      	mov	r2, r0
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	4903      	ldr	r1, [pc, #12]	; (80018a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800189a:	5ccb      	ldrb	r3, [r1, r3]
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000
 80018a8:	08002f58 	.word	0x08002f58

080018ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <RCC_Delay+0x34>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <RCC_Delay+0x38>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0a5b      	lsrs	r3, r3, #9
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018c8:	bf00      	nop
  }
  while (Delay --);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	60fa      	str	r2, [r7, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f9      	bne.n	80018c8 <RCC_Delay+0x1c>
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	20000008 	.word	0x20000008
 80018e4:	10624dd3 	.word	0x10624dd3

080018e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e041      	b.n	800197e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7fe fea8 	bl	8000664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3304      	adds	r3, #4
 8001924:	4619      	mov	r1, r3
 8001926:	4610      	mov	r0, r2
 8001928:	f000 f93c 	bl	8001ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b01      	cmp	r3, #1
 800199a:	d001      	beq.n	80019a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e032      	b.n	8001a06 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2202      	movs	r2, #2
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <HAL_TIM_Base_Start+0x88>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00e      	beq.n	80019d0 <HAL_TIM_Base_Start+0x48>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ba:	d009      	beq.n	80019d0 <HAL_TIM_Base_Start+0x48>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <HAL_TIM_Base_Start+0x8c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d004      	beq.n	80019d0 <HAL_TIM_Base_Start+0x48>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <HAL_TIM_Base_Start+0x90>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d111      	bne.n	80019f4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d010      	beq.n	8001a04 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0201 	orr.w	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019f2:	e007      	b.n	8001a04 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	40012c00 	.word	0x40012c00
 8001a14:	40000400 	.word	0x40000400
 8001a18:	40000800 	.word	0x40000800

08001a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_TIM_ConfigClockSource+0x18>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e0b3      	b.n	8001b9c <HAL_TIM_ConfigClockSource+0x180>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a6c:	d03e      	beq.n	8001aec <HAL_TIM_ConfigClockSource+0xd0>
 8001a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a72:	f200 8087 	bhi.w	8001b84 <HAL_TIM_ConfigClockSource+0x168>
 8001a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a7a:	f000 8085 	beq.w	8001b88 <HAL_TIM_ConfigClockSource+0x16c>
 8001a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a82:	d87f      	bhi.n	8001b84 <HAL_TIM_ConfigClockSource+0x168>
 8001a84:	2b70      	cmp	r3, #112	; 0x70
 8001a86:	d01a      	beq.n	8001abe <HAL_TIM_ConfigClockSource+0xa2>
 8001a88:	2b70      	cmp	r3, #112	; 0x70
 8001a8a:	d87b      	bhi.n	8001b84 <HAL_TIM_ConfigClockSource+0x168>
 8001a8c:	2b60      	cmp	r3, #96	; 0x60
 8001a8e:	d050      	beq.n	8001b32 <HAL_TIM_ConfigClockSource+0x116>
 8001a90:	2b60      	cmp	r3, #96	; 0x60
 8001a92:	d877      	bhi.n	8001b84 <HAL_TIM_ConfigClockSource+0x168>
 8001a94:	2b50      	cmp	r3, #80	; 0x50
 8001a96:	d03c      	beq.n	8001b12 <HAL_TIM_ConfigClockSource+0xf6>
 8001a98:	2b50      	cmp	r3, #80	; 0x50
 8001a9a:	d873      	bhi.n	8001b84 <HAL_TIM_ConfigClockSource+0x168>
 8001a9c:	2b40      	cmp	r3, #64	; 0x40
 8001a9e:	d058      	beq.n	8001b52 <HAL_TIM_ConfigClockSource+0x136>
 8001aa0:	2b40      	cmp	r3, #64	; 0x40
 8001aa2:	d86f      	bhi.n	8001b84 <HAL_TIM_ConfigClockSource+0x168>
 8001aa4:	2b30      	cmp	r3, #48	; 0x30
 8001aa6:	d064      	beq.n	8001b72 <HAL_TIM_ConfigClockSource+0x156>
 8001aa8:	2b30      	cmp	r3, #48	; 0x30
 8001aaa:	d86b      	bhi.n	8001b84 <HAL_TIM_ConfigClockSource+0x168>
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d060      	beq.n	8001b72 <HAL_TIM_ConfigClockSource+0x156>
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	d867      	bhi.n	8001b84 <HAL_TIM_ConfigClockSource+0x168>
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d05c      	beq.n	8001b72 <HAL_TIM_ConfigClockSource+0x156>
 8001ab8:	2b10      	cmp	r3, #16
 8001aba:	d05a      	beq.n	8001b72 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001abc:	e062      	b.n	8001b84 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6818      	ldr	r0, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6899      	ldr	r1, [r3, #8]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f000 f942 	bl	8001d56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001ae0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	609a      	str	r2, [r3, #8]
      break;
 8001aea:	e04e      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6899      	ldr	r1, [r3, #8]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f000 f92b 	bl	8001d56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b0e:	609a      	str	r2, [r3, #8]
      break;
 8001b10:	e03b      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6859      	ldr	r1, [r3, #4]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f000 f8a2 	bl	8001c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2150      	movs	r1, #80	; 0x50
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f8f9 	bl	8001d22 <TIM_ITRx_SetConfig>
      break;
 8001b30:	e02b      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6859      	ldr	r1, [r3, #4]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f000 f8c0 	bl	8001cc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2160      	movs	r1, #96	; 0x60
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f8e9 	bl	8001d22 <TIM_ITRx_SetConfig>
      break;
 8001b50:	e01b      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6859      	ldr	r1, [r3, #4]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f000 f882 	bl	8001c68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2140      	movs	r1, #64	; 0x40
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f8d9 	bl	8001d22 <TIM_ITRx_SetConfig>
      break;
 8001b70:	e00b      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	f000 f8d0 	bl	8001d22 <TIM_ITRx_SetConfig>
        break;
 8001b82:	e002      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001b84:	bf00      	nop
 8001b86:	e000      	b.n	8001b8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001b88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a29      	ldr	r2, [pc, #164]	; (8001c5c <TIM_Base_SetConfig+0xb8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d00b      	beq.n	8001bd4 <TIM_Base_SetConfig+0x30>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc2:	d007      	beq.n	8001bd4 <TIM_Base_SetConfig+0x30>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a26      	ldr	r2, [pc, #152]	; (8001c60 <TIM_Base_SetConfig+0xbc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d003      	beq.n	8001bd4 <TIM_Base_SetConfig+0x30>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a25      	ldr	r2, [pc, #148]	; (8001c64 <TIM_Base_SetConfig+0xc0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d108      	bne.n	8001be6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <TIM_Base_SetConfig+0xb8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00b      	beq.n	8001c06 <TIM_Base_SetConfig+0x62>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d007      	beq.n	8001c06 <TIM_Base_SetConfig+0x62>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <TIM_Base_SetConfig+0xbc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d003      	beq.n	8001c06 <TIM_Base_SetConfig+0x62>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <TIM_Base_SetConfig+0xc0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d108      	bne.n	8001c18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <TIM_Base_SetConfig+0xb8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d103      	bne.n	8001c4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	615a      	str	r2, [r3, #20]
}
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40000400 	.word	0x40000400
 8001c64:	40000800 	.word	0x40000800

08001c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	f023 0201 	bic.w	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f023 030a 	bic.w	r3, r3, #10
 8001ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	621a      	str	r2, [r3, #32]
}
 8001cba:	bf00      	nop
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f023 0210 	bic.w	r2, r3, #16
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001cee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	031b      	lsls	r3, r3, #12
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	621a      	str	r2, [r3, #32]
}
 8001d18:	bf00      	nop
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	f043 0307 	orr.w	r3, r3, #7
 8001d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	609a      	str	r2, [r3, #8]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b087      	sub	sp, #28
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	021a      	lsls	r2, r3, #8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	609a      	str	r2, [r3, #8]
}
 8001d8a:	bf00      	nop
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e046      	b.n	8001e3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d00e      	beq.n	8001e0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df8:	d009      	beq.n	8001e0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a12      	ldr	r2, [pc, #72]	; (8001e48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d004      	beq.n	8001e0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d10c      	bne.n	8001e28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	40012c00 	.word	0x40012c00
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40000800 	.word	0x40000800

08001e50 <__errno>:
 8001e50:	4b01      	ldr	r3, [pc, #4]	; (8001e58 <__errno+0x8>)
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000014 	.word	0x20000014

08001e5c <__libc_init_array>:
 8001e5c:	b570      	push	{r4, r5, r6, lr}
 8001e5e:	2600      	movs	r6, #0
 8001e60:	4d0c      	ldr	r5, [pc, #48]	; (8001e94 <__libc_init_array+0x38>)
 8001e62:	4c0d      	ldr	r4, [pc, #52]	; (8001e98 <__libc_init_array+0x3c>)
 8001e64:	1b64      	subs	r4, r4, r5
 8001e66:	10a4      	asrs	r4, r4, #2
 8001e68:	42a6      	cmp	r6, r4
 8001e6a:	d109      	bne.n	8001e80 <__libc_init_array+0x24>
 8001e6c:	f000 fc9c 	bl	80027a8 <_init>
 8001e70:	2600      	movs	r6, #0
 8001e72:	4d0a      	ldr	r5, [pc, #40]	; (8001e9c <__libc_init_array+0x40>)
 8001e74:	4c0a      	ldr	r4, [pc, #40]	; (8001ea0 <__libc_init_array+0x44>)
 8001e76:	1b64      	subs	r4, r4, r5
 8001e78:	10a4      	asrs	r4, r4, #2
 8001e7a:	42a6      	cmp	r6, r4
 8001e7c:	d105      	bne.n	8001e8a <__libc_init_array+0x2e>
 8001e7e:	bd70      	pop	{r4, r5, r6, pc}
 8001e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e84:	4798      	blx	r3
 8001e86:	3601      	adds	r6, #1
 8001e88:	e7ee      	b.n	8001e68 <__libc_init_array+0xc>
 8001e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e8e:	4798      	blx	r3
 8001e90:	3601      	adds	r6, #1
 8001e92:	e7f2      	b.n	8001e7a <__libc_init_array+0x1e>
 8001e94:	08002f94 	.word	0x08002f94
 8001e98:	08002f94 	.word	0x08002f94
 8001e9c:	08002f94 	.word	0x08002f94
 8001ea0:	08002f98 	.word	0x08002f98

08001ea4 <memset>:
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4402      	add	r2, r0
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d100      	bne.n	8001eae <memset+0xa>
 8001eac:	4770      	bx	lr
 8001eae:	f803 1b01 	strb.w	r1, [r3], #1
 8001eb2:	e7f9      	b.n	8001ea8 <memset+0x4>

08001eb4 <siprintf>:
 8001eb4:	b40e      	push	{r1, r2, r3}
 8001eb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001eba:	b500      	push	{lr}
 8001ebc:	b09c      	sub	sp, #112	; 0x70
 8001ebe:	ab1d      	add	r3, sp, #116	; 0x74
 8001ec0:	9002      	str	r0, [sp, #8]
 8001ec2:	9006      	str	r0, [sp, #24]
 8001ec4:	9107      	str	r1, [sp, #28]
 8001ec6:	9104      	str	r1, [sp, #16]
 8001ec8:	4808      	ldr	r0, [pc, #32]	; (8001eec <siprintf+0x38>)
 8001eca:	4909      	ldr	r1, [pc, #36]	; (8001ef0 <siprintf+0x3c>)
 8001ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ed0:	9105      	str	r1, [sp, #20]
 8001ed2:	6800      	ldr	r0, [r0, #0]
 8001ed4:	a902      	add	r1, sp, #8
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	f000 f868 	bl	8001fac <_svfiprintf_r>
 8001edc:	2200      	movs	r2, #0
 8001ede:	9b02      	ldr	r3, [sp, #8]
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	b01c      	add	sp, #112	; 0x70
 8001ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ee8:	b003      	add	sp, #12
 8001eea:	4770      	bx	lr
 8001eec:	20000014 	.word	0x20000014
 8001ef0:	ffff0208 	.word	0xffff0208

08001ef4 <__ssputs_r>:
 8001ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ef8:	688e      	ldr	r6, [r1, #8]
 8001efa:	4682      	mov	sl, r0
 8001efc:	429e      	cmp	r6, r3
 8001efe:	460c      	mov	r4, r1
 8001f00:	4690      	mov	r8, r2
 8001f02:	461f      	mov	r7, r3
 8001f04:	d838      	bhi.n	8001f78 <__ssputs_r+0x84>
 8001f06:	898a      	ldrh	r2, [r1, #12]
 8001f08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f0c:	d032      	beq.n	8001f74 <__ssputs_r+0x80>
 8001f0e:	6825      	ldr	r5, [r4, #0]
 8001f10:	6909      	ldr	r1, [r1, #16]
 8001f12:	3301      	adds	r3, #1
 8001f14:	eba5 0901 	sub.w	r9, r5, r1
 8001f18:	6965      	ldr	r5, [r4, #20]
 8001f1a:	444b      	add	r3, r9
 8001f1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f24:	106d      	asrs	r5, r5, #1
 8001f26:	429d      	cmp	r5, r3
 8001f28:	bf38      	it	cc
 8001f2a:	461d      	movcc	r5, r3
 8001f2c:	0553      	lsls	r3, r2, #21
 8001f2e:	d531      	bpl.n	8001f94 <__ssputs_r+0xa0>
 8001f30:	4629      	mov	r1, r5
 8001f32:	f000 fb6f 	bl	8002614 <_malloc_r>
 8001f36:	4606      	mov	r6, r0
 8001f38:	b950      	cbnz	r0, 8001f50 <__ssputs_r+0x5c>
 8001f3a:	230c      	movs	r3, #12
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f8ca 3000 	str.w	r3, [sl]
 8001f44:	89a3      	ldrh	r3, [r4, #12]
 8001f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f4a:	81a3      	strh	r3, [r4, #12]
 8001f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f50:	464a      	mov	r2, r9
 8001f52:	6921      	ldr	r1, [r4, #16]
 8001f54:	f000 face 	bl	80024f4 <memcpy>
 8001f58:	89a3      	ldrh	r3, [r4, #12]
 8001f5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f62:	81a3      	strh	r3, [r4, #12]
 8001f64:	6126      	str	r6, [r4, #16]
 8001f66:	444e      	add	r6, r9
 8001f68:	6026      	str	r6, [r4, #0]
 8001f6a:	463e      	mov	r6, r7
 8001f6c:	6165      	str	r5, [r4, #20]
 8001f6e:	eba5 0509 	sub.w	r5, r5, r9
 8001f72:	60a5      	str	r5, [r4, #8]
 8001f74:	42be      	cmp	r6, r7
 8001f76:	d900      	bls.n	8001f7a <__ssputs_r+0x86>
 8001f78:	463e      	mov	r6, r7
 8001f7a:	4632      	mov	r2, r6
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	6820      	ldr	r0, [r4, #0]
 8001f80:	f000 fac6 	bl	8002510 <memmove>
 8001f84:	68a3      	ldr	r3, [r4, #8]
 8001f86:	2000      	movs	r0, #0
 8001f88:	1b9b      	subs	r3, r3, r6
 8001f8a:	60a3      	str	r3, [r4, #8]
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	4433      	add	r3, r6
 8001f90:	6023      	str	r3, [r4, #0]
 8001f92:	e7db      	b.n	8001f4c <__ssputs_r+0x58>
 8001f94:	462a      	mov	r2, r5
 8001f96:	f000 fbb1 	bl	80026fc <_realloc_r>
 8001f9a:	4606      	mov	r6, r0
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	d1e1      	bne.n	8001f64 <__ssputs_r+0x70>
 8001fa0:	4650      	mov	r0, sl
 8001fa2:	6921      	ldr	r1, [r4, #16]
 8001fa4:	f000 face 	bl	8002544 <_free_r>
 8001fa8:	e7c7      	b.n	8001f3a <__ssputs_r+0x46>
	...

08001fac <_svfiprintf_r>:
 8001fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb0:	4698      	mov	r8, r3
 8001fb2:	898b      	ldrh	r3, [r1, #12]
 8001fb4:	4607      	mov	r7, r0
 8001fb6:	061b      	lsls	r3, r3, #24
 8001fb8:	460d      	mov	r5, r1
 8001fba:	4614      	mov	r4, r2
 8001fbc:	b09d      	sub	sp, #116	; 0x74
 8001fbe:	d50e      	bpl.n	8001fde <_svfiprintf_r+0x32>
 8001fc0:	690b      	ldr	r3, [r1, #16]
 8001fc2:	b963      	cbnz	r3, 8001fde <_svfiprintf_r+0x32>
 8001fc4:	2140      	movs	r1, #64	; 0x40
 8001fc6:	f000 fb25 	bl	8002614 <_malloc_r>
 8001fca:	6028      	str	r0, [r5, #0]
 8001fcc:	6128      	str	r0, [r5, #16]
 8001fce:	b920      	cbnz	r0, 8001fda <_svfiprintf_r+0x2e>
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	e0d1      	b.n	800217e <_svfiprintf_r+0x1d2>
 8001fda:	2340      	movs	r3, #64	; 0x40
 8001fdc:	616b      	str	r3, [r5, #20]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001fe8:	2330      	movs	r3, #48	; 0x30
 8001fea:	f04f 0901 	mov.w	r9, #1
 8001fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ff2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002198 <_svfiprintf_r+0x1ec>
 8001ff6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	469a      	mov	sl, r3
 8001ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002002:	b10a      	cbz	r2, 8002008 <_svfiprintf_r+0x5c>
 8002004:	2a25      	cmp	r2, #37	; 0x25
 8002006:	d1f9      	bne.n	8001ffc <_svfiprintf_r+0x50>
 8002008:	ebba 0b04 	subs.w	fp, sl, r4
 800200c:	d00b      	beq.n	8002026 <_svfiprintf_r+0x7a>
 800200e:	465b      	mov	r3, fp
 8002010:	4622      	mov	r2, r4
 8002012:	4629      	mov	r1, r5
 8002014:	4638      	mov	r0, r7
 8002016:	f7ff ff6d 	bl	8001ef4 <__ssputs_r>
 800201a:	3001      	adds	r0, #1
 800201c:	f000 80aa 	beq.w	8002174 <_svfiprintf_r+0x1c8>
 8002020:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002022:	445a      	add	r2, fp
 8002024:	9209      	str	r2, [sp, #36]	; 0x24
 8002026:	f89a 3000 	ldrb.w	r3, [sl]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80a2 	beq.w	8002174 <_svfiprintf_r+0x1c8>
 8002030:	2300      	movs	r3, #0
 8002032:	f04f 32ff 	mov.w	r2, #4294967295
 8002036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800203a:	f10a 0a01 	add.w	sl, sl, #1
 800203e:	9304      	str	r3, [sp, #16]
 8002040:	9307      	str	r3, [sp, #28]
 8002042:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002046:	931a      	str	r3, [sp, #104]	; 0x68
 8002048:	4654      	mov	r4, sl
 800204a:	2205      	movs	r2, #5
 800204c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002050:	4851      	ldr	r0, [pc, #324]	; (8002198 <_svfiprintf_r+0x1ec>)
 8002052:	f000 fa41 	bl	80024d8 <memchr>
 8002056:	9a04      	ldr	r2, [sp, #16]
 8002058:	b9d8      	cbnz	r0, 8002092 <_svfiprintf_r+0xe6>
 800205a:	06d0      	lsls	r0, r2, #27
 800205c:	bf44      	itt	mi
 800205e:	2320      	movmi	r3, #32
 8002060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002064:	0711      	lsls	r1, r2, #28
 8002066:	bf44      	itt	mi
 8002068:	232b      	movmi	r3, #43	; 0x2b
 800206a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800206e:	f89a 3000 	ldrb.w	r3, [sl]
 8002072:	2b2a      	cmp	r3, #42	; 0x2a
 8002074:	d015      	beq.n	80020a2 <_svfiprintf_r+0xf6>
 8002076:	4654      	mov	r4, sl
 8002078:	2000      	movs	r0, #0
 800207a:	f04f 0c0a 	mov.w	ip, #10
 800207e:	9a07      	ldr	r2, [sp, #28]
 8002080:	4621      	mov	r1, r4
 8002082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002086:	3b30      	subs	r3, #48	; 0x30
 8002088:	2b09      	cmp	r3, #9
 800208a:	d94e      	bls.n	800212a <_svfiprintf_r+0x17e>
 800208c:	b1b0      	cbz	r0, 80020bc <_svfiprintf_r+0x110>
 800208e:	9207      	str	r2, [sp, #28]
 8002090:	e014      	b.n	80020bc <_svfiprintf_r+0x110>
 8002092:	eba0 0308 	sub.w	r3, r0, r8
 8002096:	fa09 f303 	lsl.w	r3, r9, r3
 800209a:	4313      	orrs	r3, r2
 800209c:	46a2      	mov	sl, r4
 800209e:	9304      	str	r3, [sp, #16]
 80020a0:	e7d2      	b.n	8002048 <_svfiprintf_r+0x9c>
 80020a2:	9b03      	ldr	r3, [sp, #12]
 80020a4:	1d19      	adds	r1, r3, #4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	9103      	str	r1, [sp, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	bfbb      	ittet	lt
 80020ae:	425b      	neglt	r3, r3
 80020b0:	f042 0202 	orrlt.w	r2, r2, #2
 80020b4:	9307      	strge	r3, [sp, #28]
 80020b6:	9307      	strlt	r3, [sp, #28]
 80020b8:	bfb8      	it	lt
 80020ba:	9204      	strlt	r2, [sp, #16]
 80020bc:	7823      	ldrb	r3, [r4, #0]
 80020be:	2b2e      	cmp	r3, #46	; 0x2e
 80020c0:	d10c      	bne.n	80020dc <_svfiprintf_r+0x130>
 80020c2:	7863      	ldrb	r3, [r4, #1]
 80020c4:	2b2a      	cmp	r3, #42	; 0x2a
 80020c6:	d135      	bne.n	8002134 <_svfiprintf_r+0x188>
 80020c8:	9b03      	ldr	r3, [sp, #12]
 80020ca:	3402      	adds	r4, #2
 80020cc:	1d1a      	adds	r2, r3, #4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	9203      	str	r2, [sp, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bfb8      	it	lt
 80020d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80020da:	9305      	str	r3, [sp, #20]
 80020dc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800219c <_svfiprintf_r+0x1f0>
 80020e0:	2203      	movs	r2, #3
 80020e2:	4650      	mov	r0, sl
 80020e4:	7821      	ldrb	r1, [r4, #0]
 80020e6:	f000 f9f7 	bl	80024d8 <memchr>
 80020ea:	b140      	cbz	r0, 80020fe <_svfiprintf_r+0x152>
 80020ec:	2340      	movs	r3, #64	; 0x40
 80020ee:	eba0 000a 	sub.w	r0, r0, sl
 80020f2:	fa03 f000 	lsl.w	r0, r3, r0
 80020f6:	9b04      	ldr	r3, [sp, #16]
 80020f8:	3401      	adds	r4, #1
 80020fa:	4303      	orrs	r3, r0
 80020fc:	9304      	str	r3, [sp, #16]
 80020fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002102:	2206      	movs	r2, #6
 8002104:	4826      	ldr	r0, [pc, #152]	; (80021a0 <_svfiprintf_r+0x1f4>)
 8002106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800210a:	f000 f9e5 	bl	80024d8 <memchr>
 800210e:	2800      	cmp	r0, #0
 8002110:	d038      	beq.n	8002184 <_svfiprintf_r+0x1d8>
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <_svfiprintf_r+0x1f8>)
 8002114:	bb1b      	cbnz	r3, 800215e <_svfiprintf_r+0x1b2>
 8002116:	9b03      	ldr	r3, [sp, #12]
 8002118:	3307      	adds	r3, #7
 800211a:	f023 0307 	bic.w	r3, r3, #7
 800211e:	3308      	adds	r3, #8
 8002120:	9303      	str	r3, [sp, #12]
 8002122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002124:	4433      	add	r3, r6
 8002126:	9309      	str	r3, [sp, #36]	; 0x24
 8002128:	e767      	b.n	8001ffa <_svfiprintf_r+0x4e>
 800212a:	460c      	mov	r4, r1
 800212c:	2001      	movs	r0, #1
 800212e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002132:	e7a5      	b.n	8002080 <_svfiprintf_r+0xd4>
 8002134:	2300      	movs	r3, #0
 8002136:	f04f 0c0a 	mov.w	ip, #10
 800213a:	4619      	mov	r1, r3
 800213c:	3401      	adds	r4, #1
 800213e:	9305      	str	r3, [sp, #20]
 8002140:	4620      	mov	r0, r4
 8002142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002146:	3a30      	subs	r2, #48	; 0x30
 8002148:	2a09      	cmp	r2, #9
 800214a:	d903      	bls.n	8002154 <_svfiprintf_r+0x1a8>
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0c5      	beq.n	80020dc <_svfiprintf_r+0x130>
 8002150:	9105      	str	r1, [sp, #20]
 8002152:	e7c3      	b.n	80020dc <_svfiprintf_r+0x130>
 8002154:	4604      	mov	r4, r0
 8002156:	2301      	movs	r3, #1
 8002158:	fb0c 2101 	mla	r1, ip, r1, r2
 800215c:	e7f0      	b.n	8002140 <_svfiprintf_r+0x194>
 800215e:	ab03      	add	r3, sp, #12
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	462a      	mov	r2, r5
 8002164:	4638      	mov	r0, r7
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <_svfiprintf_r+0x1fc>)
 8002168:	a904      	add	r1, sp, #16
 800216a:	f3af 8000 	nop.w
 800216e:	1c42      	adds	r2, r0, #1
 8002170:	4606      	mov	r6, r0
 8002172:	d1d6      	bne.n	8002122 <_svfiprintf_r+0x176>
 8002174:	89ab      	ldrh	r3, [r5, #12]
 8002176:	065b      	lsls	r3, r3, #25
 8002178:	f53f af2c 	bmi.w	8001fd4 <_svfiprintf_r+0x28>
 800217c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800217e:	b01d      	add	sp, #116	; 0x74
 8002180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002184:	ab03      	add	r3, sp, #12
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	462a      	mov	r2, r5
 800218a:	4638      	mov	r0, r7
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <_svfiprintf_r+0x1fc>)
 800218e:	a904      	add	r1, sp, #16
 8002190:	f000 f87c 	bl	800228c <_printf_i>
 8002194:	e7eb      	b.n	800216e <_svfiprintf_r+0x1c2>
 8002196:	bf00      	nop
 8002198:	08002f60 	.word	0x08002f60
 800219c:	08002f66 	.word	0x08002f66
 80021a0:	08002f6a 	.word	0x08002f6a
 80021a4:	00000000 	.word	0x00000000
 80021a8:	08001ef5 	.word	0x08001ef5

080021ac <_printf_common>:
 80021ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021b0:	4616      	mov	r6, r2
 80021b2:	4699      	mov	r9, r3
 80021b4:	688a      	ldr	r2, [r1, #8]
 80021b6:	690b      	ldr	r3, [r1, #16]
 80021b8:	4607      	mov	r7, r0
 80021ba:	4293      	cmp	r3, r2
 80021bc:	bfb8      	it	lt
 80021be:	4613      	movlt	r3, r2
 80021c0:	6033      	str	r3, [r6, #0]
 80021c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021c6:	460c      	mov	r4, r1
 80021c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021cc:	b10a      	cbz	r2, 80021d2 <_printf_common+0x26>
 80021ce:	3301      	adds	r3, #1
 80021d0:	6033      	str	r3, [r6, #0]
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	0699      	lsls	r1, r3, #26
 80021d6:	bf42      	ittt	mi
 80021d8:	6833      	ldrmi	r3, [r6, #0]
 80021da:	3302      	addmi	r3, #2
 80021dc:	6033      	strmi	r3, [r6, #0]
 80021de:	6825      	ldr	r5, [r4, #0]
 80021e0:	f015 0506 	ands.w	r5, r5, #6
 80021e4:	d106      	bne.n	80021f4 <_printf_common+0x48>
 80021e6:	f104 0a19 	add.w	sl, r4, #25
 80021ea:	68e3      	ldr	r3, [r4, #12]
 80021ec:	6832      	ldr	r2, [r6, #0]
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	42ab      	cmp	r3, r5
 80021f2:	dc28      	bgt.n	8002246 <_printf_common+0x9a>
 80021f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80021f8:	1e13      	subs	r3, r2, #0
 80021fa:	6822      	ldr	r2, [r4, #0]
 80021fc:	bf18      	it	ne
 80021fe:	2301      	movne	r3, #1
 8002200:	0692      	lsls	r2, r2, #26
 8002202:	d42d      	bmi.n	8002260 <_printf_common+0xb4>
 8002204:	4649      	mov	r1, r9
 8002206:	4638      	mov	r0, r7
 8002208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800220c:	47c0      	blx	r8
 800220e:	3001      	adds	r0, #1
 8002210:	d020      	beq.n	8002254 <_printf_common+0xa8>
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	68e5      	ldr	r5, [r4, #12]
 8002216:	f003 0306 	and.w	r3, r3, #6
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf18      	it	ne
 800221e:	2500      	movne	r5, #0
 8002220:	6832      	ldr	r2, [r6, #0]
 8002222:	f04f 0600 	mov.w	r6, #0
 8002226:	68a3      	ldr	r3, [r4, #8]
 8002228:	bf08      	it	eq
 800222a:	1aad      	subeq	r5, r5, r2
 800222c:	6922      	ldr	r2, [r4, #16]
 800222e:	bf08      	it	eq
 8002230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002234:	4293      	cmp	r3, r2
 8002236:	bfc4      	itt	gt
 8002238:	1a9b      	subgt	r3, r3, r2
 800223a:	18ed      	addgt	r5, r5, r3
 800223c:	341a      	adds	r4, #26
 800223e:	42b5      	cmp	r5, r6
 8002240:	d11a      	bne.n	8002278 <_printf_common+0xcc>
 8002242:	2000      	movs	r0, #0
 8002244:	e008      	b.n	8002258 <_printf_common+0xac>
 8002246:	2301      	movs	r3, #1
 8002248:	4652      	mov	r2, sl
 800224a:	4649      	mov	r1, r9
 800224c:	4638      	mov	r0, r7
 800224e:	47c0      	blx	r8
 8002250:	3001      	adds	r0, #1
 8002252:	d103      	bne.n	800225c <_printf_common+0xb0>
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800225c:	3501      	adds	r5, #1
 800225e:	e7c4      	b.n	80021ea <_printf_common+0x3e>
 8002260:	2030      	movs	r0, #48	; 0x30
 8002262:	18e1      	adds	r1, r4, r3
 8002264:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800226e:	4422      	add	r2, r4
 8002270:	3302      	adds	r3, #2
 8002272:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002276:	e7c5      	b.n	8002204 <_printf_common+0x58>
 8002278:	2301      	movs	r3, #1
 800227a:	4622      	mov	r2, r4
 800227c:	4649      	mov	r1, r9
 800227e:	4638      	mov	r0, r7
 8002280:	47c0      	blx	r8
 8002282:	3001      	adds	r0, #1
 8002284:	d0e6      	beq.n	8002254 <_printf_common+0xa8>
 8002286:	3601      	adds	r6, #1
 8002288:	e7d9      	b.n	800223e <_printf_common+0x92>
	...

0800228c <_printf_i>:
 800228c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002290:	7e0f      	ldrb	r7, [r1, #24]
 8002292:	4691      	mov	r9, r2
 8002294:	2f78      	cmp	r7, #120	; 0x78
 8002296:	4680      	mov	r8, r0
 8002298:	460c      	mov	r4, r1
 800229a:	469a      	mov	sl, r3
 800229c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800229e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80022a2:	d807      	bhi.n	80022b4 <_printf_i+0x28>
 80022a4:	2f62      	cmp	r7, #98	; 0x62
 80022a6:	d80a      	bhi.n	80022be <_printf_i+0x32>
 80022a8:	2f00      	cmp	r7, #0
 80022aa:	f000 80d9 	beq.w	8002460 <_printf_i+0x1d4>
 80022ae:	2f58      	cmp	r7, #88	; 0x58
 80022b0:	f000 80a4 	beq.w	80023fc <_printf_i+0x170>
 80022b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80022bc:	e03a      	b.n	8002334 <_printf_i+0xa8>
 80022be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80022c2:	2b15      	cmp	r3, #21
 80022c4:	d8f6      	bhi.n	80022b4 <_printf_i+0x28>
 80022c6:	a101      	add	r1, pc, #4	; (adr r1, 80022cc <_printf_i+0x40>)
 80022c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022cc:	08002325 	.word	0x08002325
 80022d0:	08002339 	.word	0x08002339
 80022d4:	080022b5 	.word	0x080022b5
 80022d8:	080022b5 	.word	0x080022b5
 80022dc:	080022b5 	.word	0x080022b5
 80022e0:	080022b5 	.word	0x080022b5
 80022e4:	08002339 	.word	0x08002339
 80022e8:	080022b5 	.word	0x080022b5
 80022ec:	080022b5 	.word	0x080022b5
 80022f0:	080022b5 	.word	0x080022b5
 80022f4:	080022b5 	.word	0x080022b5
 80022f8:	08002447 	.word	0x08002447
 80022fc:	08002369 	.word	0x08002369
 8002300:	08002429 	.word	0x08002429
 8002304:	080022b5 	.word	0x080022b5
 8002308:	080022b5 	.word	0x080022b5
 800230c:	08002469 	.word	0x08002469
 8002310:	080022b5 	.word	0x080022b5
 8002314:	08002369 	.word	0x08002369
 8002318:	080022b5 	.word	0x080022b5
 800231c:	080022b5 	.word	0x080022b5
 8002320:	08002431 	.word	0x08002431
 8002324:	682b      	ldr	r3, [r5, #0]
 8002326:	1d1a      	adds	r2, r3, #4
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	602a      	str	r2, [r5, #0]
 800232c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002334:	2301      	movs	r3, #1
 8002336:	e0a4      	b.n	8002482 <_printf_i+0x1f6>
 8002338:	6820      	ldr	r0, [r4, #0]
 800233a:	6829      	ldr	r1, [r5, #0]
 800233c:	0606      	lsls	r6, r0, #24
 800233e:	f101 0304 	add.w	r3, r1, #4
 8002342:	d50a      	bpl.n	800235a <_printf_i+0xce>
 8002344:	680e      	ldr	r6, [r1, #0]
 8002346:	602b      	str	r3, [r5, #0]
 8002348:	2e00      	cmp	r6, #0
 800234a:	da03      	bge.n	8002354 <_printf_i+0xc8>
 800234c:	232d      	movs	r3, #45	; 0x2d
 800234e:	4276      	negs	r6, r6
 8002350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002354:	230a      	movs	r3, #10
 8002356:	485e      	ldr	r0, [pc, #376]	; (80024d0 <_printf_i+0x244>)
 8002358:	e019      	b.n	800238e <_printf_i+0x102>
 800235a:	680e      	ldr	r6, [r1, #0]
 800235c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002360:	602b      	str	r3, [r5, #0]
 8002362:	bf18      	it	ne
 8002364:	b236      	sxthne	r6, r6
 8002366:	e7ef      	b.n	8002348 <_printf_i+0xbc>
 8002368:	682b      	ldr	r3, [r5, #0]
 800236a:	6820      	ldr	r0, [r4, #0]
 800236c:	1d19      	adds	r1, r3, #4
 800236e:	6029      	str	r1, [r5, #0]
 8002370:	0601      	lsls	r1, r0, #24
 8002372:	d501      	bpl.n	8002378 <_printf_i+0xec>
 8002374:	681e      	ldr	r6, [r3, #0]
 8002376:	e002      	b.n	800237e <_printf_i+0xf2>
 8002378:	0646      	lsls	r6, r0, #25
 800237a:	d5fb      	bpl.n	8002374 <_printf_i+0xe8>
 800237c:	881e      	ldrh	r6, [r3, #0]
 800237e:	2f6f      	cmp	r7, #111	; 0x6f
 8002380:	bf0c      	ite	eq
 8002382:	2308      	moveq	r3, #8
 8002384:	230a      	movne	r3, #10
 8002386:	4852      	ldr	r0, [pc, #328]	; (80024d0 <_printf_i+0x244>)
 8002388:	2100      	movs	r1, #0
 800238a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800238e:	6865      	ldr	r5, [r4, #4]
 8002390:	2d00      	cmp	r5, #0
 8002392:	bfa8      	it	ge
 8002394:	6821      	ldrge	r1, [r4, #0]
 8002396:	60a5      	str	r5, [r4, #8]
 8002398:	bfa4      	itt	ge
 800239a:	f021 0104 	bicge.w	r1, r1, #4
 800239e:	6021      	strge	r1, [r4, #0]
 80023a0:	b90e      	cbnz	r6, 80023a6 <_printf_i+0x11a>
 80023a2:	2d00      	cmp	r5, #0
 80023a4:	d04d      	beq.n	8002442 <_printf_i+0x1b6>
 80023a6:	4615      	mov	r5, r2
 80023a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80023ac:	fb03 6711 	mls	r7, r3, r1, r6
 80023b0:	5dc7      	ldrb	r7, [r0, r7]
 80023b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80023b6:	4637      	mov	r7, r6
 80023b8:	42bb      	cmp	r3, r7
 80023ba:	460e      	mov	r6, r1
 80023bc:	d9f4      	bls.n	80023a8 <_printf_i+0x11c>
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d10b      	bne.n	80023da <_printf_i+0x14e>
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	07de      	lsls	r6, r3, #31
 80023c6:	d508      	bpl.n	80023da <_printf_i+0x14e>
 80023c8:	6923      	ldr	r3, [r4, #16]
 80023ca:	6861      	ldr	r1, [r4, #4]
 80023cc:	4299      	cmp	r1, r3
 80023ce:	bfde      	ittt	le
 80023d0:	2330      	movle	r3, #48	; 0x30
 80023d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80023d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80023da:	1b52      	subs	r2, r2, r5
 80023dc:	6122      	str	r2, [r4, #16]
 80023de:	464b      	mov	r3, r9
 80023e0:	4621      	mov	r1, r4
 80023e2:	4640      	mov	r0, r8
 80023e4:	f8cd a000 	str.w	sl, [sp]
 80023e8:	aa03      	add	r2, sp, #12
 80023ea:	f7ff fedf 	bl	80021ac <_printf_common>
 80023ee:	3001      	adds	r0, #1
 80023f0:	d14c      	bne.n	800248c <_printf_i+0x200>
 80023f2:	f04f 30ff 	mov.w	r0, #4294967295
 80023f6:	b004      	add	sp, #16
 80023f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023fc:	4834      	ldr	r0, [pc, #208]	; (80024d0 <_printf_i+0x244>)
 80023fe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002402:	6829      	ldr	r1, [r5, #0]
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	f851 6b04 	ldr.w	r6, [r1], #4
 800240a:	6029      	str	r1, [r5, #0]
 800240c:	061d      	lsls	r5, r3, #24
 800240e:	d514      	bpl.n	800243a <_printf_i+0x1ae>
 8002410:	07df      	lsls	r7, r3, #31
 8002412:	bf44      	itt	mi
 8002414:	f043 0320 	orrmi.w	r3, r3, #32
 8002418:	6023      	strmi	r3, [r4, #0]
 800241a:	b91e      	cbnz	r6, 8002424 <_printf_i+0x198>
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	f023 0320 	bic.w	r3, r3, #32
 8002422:	6023      	str	r3, [r4, #0]
 8002424:	2310      	movs	r3, #16
 8002426:	e7af      	b.n	8002388 <_printf_i+0xfc>
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	f043 0320 	orr.w	r3, r3, #32
 800242e:	6023      	str	r3, [r4, #0]
 8002430:	2378      	movs	r3, #120	; 0x78
 8002432:	4828      	ldr	r0, [pc, #160]	; (80024d4 <_printf_i+0x248>)
 8002434:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002438:	e7e3      	b.n	8002402 <_printf_i+0x176>
 800243a:	0659      	lsls	r1, r3, #25
 800243c:	bf48      	it	mi
 800243e:	b2b6      	uxthmi	r6, r6
 8002440:	e7e6      	b.n	8002410 <_printf_i+0x184>
 8002442:	4615      	mov	r5, r2
 8002444:	e7bb      	b.n	80023be <_printf_i+0x132>
 8002446:	682b      	ldr	r3, [r5, #0]
 8002448:	6826      	ldr	r6, [r4, #0]
 800244a:	1d18      	adds	r0, r3, #4
 800244c:	6961      	ldr	r1, [r4, #20]
 800244e:	6028      	str	r0, [r5, #0]
 8002450:	0635      	lsls	r5, r6, #24
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	d501      	bpl.n	800245a <_printf_i+0x1ce>
 8002456:	6019      	str	r1, [r3, #0]
 8002458:	e002      	b.n	8002460 <_printf_i+0x1d4>
 800245a:	0670      	lsls	r0, r6, #25
 800245c:	d5fb      	bpl.n	8002456 <_printf_i+0x1ca>
 800245e:	8019      	strh	r1, [r3, #0]
 8002460:	2300      	movs	r3, #0
 8002462:	4615      	mov	r5, r2
 8002464:	6123      	str	r3, [r4, #16]
 8002466:	e7ba      	b.n	80023de <_printf_i+0x152>
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	2100      	movs	r1, #0
 800246c:	1d1a      	adds	r2, r3, #4
 800246e:	602a      	str	r2, [r5, #0]
 8002470:	681d      	ldr	r5, [r3, #0]
 8002472:	6862      	ldr	r2, [r4, #4]
 8002474:	4628      	mov	r0, r5
 8002476:	f000 f82f 	bl	80024d8 <memchr>
 800247a:	b108      	cbz	r0, 8002480 <_printf_i+0x1f4>
 800247c:	1b40      	subs	r0, r0, r5
 800247e:	6060      	str	r0, [r4, #4]
 8002480:	6863      	ldr	r3, [r4, #4]
 8002482:	6123      	str	r3, [r4, #16]
 8002484:	2300      	movs	r3, #0
 8002486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800248a:	e7a8      	b.n	80023de <_printf_i+0x152>
 800248c:	462a      	mov	r2, r5
 800248e:	4649      	mov	r1, r9
 8002490:	4640      	mov	r0, r8
 8002492:	6923      	ldr	r3, [r4, #16]
 8002494:	47d0      	blx	sl
 8002496:	3001      	adds	r0, #1
 8002498:	d0ab      	beq.n	80023f2 <_printf_i+0x166>
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	079b      	lsls	r3, r3, #30
 800249e:	d413      	bmi.n	80024c8 <_printf_i+0x23c>
 80024a0:	68e0      	ldr	r0, [r4, #12]
 80024a2:	9b03      	ldr	r3, [sp, #12]
 80024a4:	4298      	cmp	r0, r3
 80024a6:	bfb8      	it	lt
 80024a8:	4618      	movlt	r0, r3
 80024aa:	e7a4      	b.n	80023f6 <_printf_i+0x16a>
 80024ac:	2301      	movs	r3, #1
 80024ae:	4632      	mov	r2, r6
 80024b0:	4649      	mov	r1, r9
 80024b2:	4640      	mov	r0, r8
 80024b4:	47d0      	blx	sl
 80024b6:	3001      	adds	r0, #1
 80024b8:	d09b      	beq.n	80023f2 <_printf_i+0x166>
 80024ba:	3501      	adds	r5, #1
 80024bc:	68e3      	ldr	r3, [r4, #12]
 80024be:	9903      	ldr	r1, [sp, #12]
 80024c0:	1a5b      	subs	r3, r3, r1
 80024c2:	42ab      	cmp	r3, r5
 80024c4:	dcf2      	bgt.n	80024ac <_printf_i+0x220>
 80024c6:	e7eb      	b.n	80024a0 <_printf_i+0x214>
 80024c8:	2500      	movs	r5, #0
 80024ca:	f104 0619 	add.w	r6, r4, #25
 80024ce:	e7f5      	b.n	80024bc <_printf_i+0x230>
 80024d0:	08002f71 	.word	0x08002f71
 80024d4:	08002f82 	.word	0x08002f82

080024d8 <memchr>:
 80024d8:	4603      	mov	r3, r0
 80024da:	b510      	push	{r4, lr}
 80024dc:	b2c9      	uxtb	r1, r1
 80024de:	4402      	add	r2, r0
 80024e0:	4293      	cmp	r3, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	d101      	bne.n	80024ea <memchr+0x12>
 80024e6:	2000      	movs	r0, #0
 80024e8:	e003      	b.n	80024f2 <memchr+0x1a>
 80024ea:	7804      	ldrb	r4, [r0, #0]
 80024ec:	3301      	adds	r3, #1
 80024ee:	428c      	cmp	r4, r1
 80024f0:	d1f6      	bne.n	80024e0 <memchr+0x8>
 80024f2:	bd10      	pop	{r4, pc}

080024f4 <memcpy>:
 80024f4:	440a      	add	r2, r1
 80024f6:	4291      	cmp	r1, r2
 80024f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80024fc:	d100      	bne.n	8002500 <memcpy+0xc>
 80024fe:	4770      	bx	lr
 8002500:	b510      	push	{r4, lr}
 8002502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002506:	4291      	cmp	r1, r2
 8002508:	f803 4f01 	strb.w	r4, [r3, #1]!
 800250c:	d1f9      	bne.n	8002502 <memcpy+0xe>
 800250e:	bd10      	pop	{r4, pc}

08002510 <memmove>:
 8002510:	4288      	cmp	r0, r1
 8002512:	b510      	push	{r4, lr}
 8002514:	eb01 0402 	add.w	r4, r1, r2
 8002518:	d902      	bls.n	8002520 <memmove+0x10>
 800251a:	4284      	cmp	r4, r0
 800251c:	4623      	mov	r3, r4
 800251e:	d807      	bhi.n	8002530 <memmove+0x20>
 8002520:	1e43      	subs	r3, r0, #1
 8002522:	42a1      	cmp	r1, r4
 8002524:	d008      	beq.n	8002538 <memmove+0x28>
 8002526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800252a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800252e:	e7f8      	b.n	8002522 <memmove+0x12>
 8002530:	4601      	mov	r1, r0
 8002532:	4402      	add	r2, r0
 8002534:	428a      	cmp	r2, r1
 8002536:	d100      	bne.n	800253a <memmove+0x2a>
 8002538:	bd10      	pop	{r4, pc}
 800253a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800253e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002542:	e7f7      	b.n	8002534 <memmove+0x24>

08002544 <_free_r>:
 8002544:	b538      	push	{r3, r4, r5, lr}
 8002546:	4605      	mov	r5, r0
 8002548:	2900      	cmp	r1, #0
 800254a:	d040      	beq.n	80025ce <_free_r+0x8a>
 800254c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002550:	1f0c      	subs	r4, r1, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	bfb8      	it	lt
 8002556:	18e4      	addlt	r4, r4, r3
 8002558:	f000 f910 	bl	800277c <__malloc_lock>
 800255c:	4a1c      	ldr	r2, [pc, #112]	; (80025d0 <_free_r+0x8c>)
 800255e:	6813      	ldr	r3, [r2, #0]
 8002560:	b933      	cbnz	r3, 8002570 <_free_r+0x2c>
 8002562:	6063      	str	r3, [r4, #4]
 8002564:	6014      	str	r4, [r2, #0]
 8002566:	4628      	mov	r0, r5
 8002568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800256c:	f000 b90c 	b.w	8002788 <__malloc_unlock>
 8002570:	42a3      	cmp	r3, r4
 8002572:	d908      	bls.n	8002586 <_free_r+0x42>
 8002574:	6820      	ldr	r0, [r4, #0]
 8002576:	1821      	adds	r1, r4, r0
 8002578:	428b      	cmp	r3, r1
 800257a:	bf01      	itttt	eq
 800257c:	6819      	ldreq	r1, [r3, #0]
 800257e:	685b      	ldreq	r3, [r3, #4]
 8002580:	1809      	addeq	r1, r1, r0
 8002582:	6021      	streq	r1, [r4, #0]
 8002584:	e7ed      	b.n	8002562 <_free_r+0x1e>
 8002586:	461a      	mov	r2, r3
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	b10b      	cbz	r3, 8002590 <_free_r+0x4c>
 800258c:	42a3      	cmp	r3, r4
 800258e:	d9fa      	bls.n	8002586 <_free_r+0x42>
 8002590:	6811      	ldr	r1, [r2, #0]
 8002592:	1850      	adds	r0, r2, r1
 8002594:	42a0      	cmp	r0, r4
 8002596:	d10b      	bne.n	80025b0 <_free_r+0x6c>
 8002598:	6820      	ldr	r0, [r4, #0]
 800259a:	4401      	add	r1, r0
 800259c:	1850      	adds	r0, r2, r1
 800259e:	4283      	cmp	r3, r0
 80025a0:	6011      	str	r1, [r2, #0]
 80025a2:	d1e0      	bne.n	8002566 <_free_r+0x22>
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4401      	add	r1, r0
 80025aa:	6011      	str	r1, [r2, #0]
 80025ac:	6053      	str	r3, [r2, #4]
 80025ae:	e7da      	b.n	8002566 <_free_r+0x22>
 80025b0:	d902      	bls.n	80025b8 <_free_r+0x74>
 80025b2:	230c      	movs	r3, #12
 80025b4:	602b      	str	r3, [r5, #0]
 80025b6:	e7d6      	b.n	8002566 <_free_r+0x22>
 80025b8:	6820      	ldr	r0, [r4, #0]
 80025ba:	1821      	adds	r1, r4, r0
 80025bc:	428b      	cmp	r3, r1
 80025be:	bf01      	itttt	eq
 80025c0:	6819      	ldreq	r1, [r3, #0]
 80025c2:	685b      	ldreq	r3, [r3, #4]
 80025c4:	1809      	addeq	r1, r1, r0
 80025c6:	6021      	streq	r1, [r4, #0]
 80025c8:	6063      	str	r3, [r4, #4]
 80025ca:	6054      	str	r4, [r2, #4]
 80025cc:	e7cb      	b.n	8002566 <_free_r+0x22>
 80025ce:	bd38      	pop	{r3, r4, r5, pc}
 80025d0:	2000009c 	.word	0x2000009c

080025d4 <sbrk_aligned>:
 80025d4:	b570      	push	{r4, r5, r6, lr}
 80025d6:	4e0e      	ldr	r6, [pc, #56]	; (8002610 <sbrk_aligned+0x3c>)
 80025d8:	460c      	mov	r4, r1
 80025da:	6831      	ldr	r1, [r6, #0]
 80025dc:	4605      	mov	r5, r0
 80025de:	b911      	cbnz	r1, 80025e6 <sbrk_aligned+0x12>
 80025e0:	f000 f8bc 	bl	800275c <_sbrk_r>
 80025e4:	6030      	str	r0, [r6, #0]
 80025e6:	4621      	mov	r1, r4
 80025e8:	4628      	mov	r0, r5
 80025ea:	f000 f8b7 	bl	800275c <_sbrk_r>
 80025ee:	1c43      	adds	r3, r0, #1
 80025f0:	d00a      	beq.n	8002608 <sbrk_aligned+0x34>
 80025f2:	1cc4      	adds	r4, r0, #3
 80025f4:	f024 0403 	bic.w	r4, r4, #3
 80025f8:	42a0      	cmp	r0, r4
 80025fa:	d007      	beq.n	800260c <sbrk_aligned+0x38>
 80025fc:	1a21      	subs	r1, r4, r0
 80025fe:	4628      	mov	r0, r5
 8002600:	f000 f8ac 	bl	800275c <_sbrk_r>
 8002604:	3001      	adds	r0, #1
 8002606:	d101      	bne.n	800260c <sbrk_aligned+0x38>
 8002608:	f04f 34ff 	mov.w	r4, #4294967295
 800260c:	4620      	mov	r0, r4
 800260e:	bd70      	pop	{r4, r5, r6, pc}
 8002610:	200000a0 	.word	0x200000a0

08002614 <_malloc_r>:
 8002614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002618:	1ccd      	adds	r5, r1, #3
 800261a:	f025 0503 	bic.w	r5, r5, #3
 800261e:	3508      	adds	r5, #8
 8002620:	2d0c      	cmp	r5, #12
 8002622:	bf38      	it	cc
 8002624:	250c      	movcc	r5, #12
 8002626:	2d00      	cmp	r5, #0
 8002628:	4607      	mov	r7, r0
 800262a:	db01      	blt.n	8002630 <_malloc_r+0x1c>
 800262c:	42a9      	cmp	r1, r5
 800262e:	d905      	bls.n	800263c <_malloc_r+0x28>
 8002630:	230c      	movs	r3, #12
 8002632:	2600      	movs	r6, #0
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	4630      	mov	r0, r6
 8002638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800263c:	4e2e      	ldr	r6, [pc, #184]	; (80026f8 <_malloc_r+0xe4>)
 800263e:	f000 f89d 	bl	800277c <__malloc_lock>
 8002642:	6833      	ldr	r3, [r6, #0]
 8002644:	461c      	mov	r4, r3
 8002646:	bb34      	cbnz	r4, 8002696 <_malloc_r+0x82>
 8002648:	4629      	mov	r1, r5
 800264a:	4638      	mov	r0, r7
 800264c:	f7ff ffc2 	bl	80025d4 <sbrk_aligned>
 8002650:	1c43      	adds	r3, r0, #1
 8002652:	4604      	mov	r4, r0
 8002654:	d14d      	bne.n	80026f2 <_malloc_r+0xde>
 8002656:	6834      	ldr	r4, [r6, #0]
 8002658:	4626      	mov	r6, r4
 800265a:	2e00      	cmp	r6, #0
 800265c:	d140      	bne.n	80026e0 <_malloc_r+0xcc>
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	4631      	mov	r1, r6
 8002662:	4638      	mov	r0, r7
 8002664:	eb04 0803 	add.w	r8, r4, r3
 8002668:	f000 f878 	bl	800275c <_sbrk_r>
 800266c:	4580      	cmp	r8, r0
 800266e:	d13a      	bne.n	80026e6 <_malloc_r+0xd2>
 8002670:	6821      	ldr	r1, [r4, #0]
 8002672:	3503      	adds	r5, #3
 8002674:	1a6d      	subs	r5, r5, r1
 8002676:	f025 0503 	bic.w	r5, r5, #3
 800267a:	3508      	adds	r5, #8
 800267c:	2d0c      	cmp	r5, #12
 800267e:	bf38      	it	cc
 8002680:	250c      	movcc	r5, #12
 8002682:	4638      	mov	r0, r7
 8002684:	4629      	mov	r1, r5
 8002686:	f7ff ffa5 	bl	80025d4 <sbrk_aligned>
 800268a:	3001      	adds	r0, #1
 800268c:	d02b      	beq.n	80026e6 <_malloc_r+0xd2>
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	442b      	add	r3, r5
 8002692:	6023      	str	r3, [r4, #0]
 8002694:	e00e      	b.n	80026b4 <_malloc_r+0xa0>
 8002696:	6822      	ldr	r2, [r4, #0]
 8002698:	1b52      	subs	r2, r2, r5
 800269a:	d41e      	bmi.n	80026da <_malloc_r+0xc6>
 800269c:	2a0b      	cmp	r2, #11
 800269e:	d916      	bls.n	80026ce <_malloc_r+0xba>
 80026a0:	1961      	adds	r1, r4, r5
 80026a2:	42a3      	cmp	r3, r4
 80026a4:	6025      	str	r5, [r4, #0]
 80026a6:	bf18      	it	ne
 80026a8:	6059      	strne	r1, [r3, #4]
 80026aa:	6863      	ldr	r3, [r4, #4]
 80026ac:	bf08      	it	eq
 80026ae:	6031      	streq	r1, [r6, #0]
 80026b0:	5162      	str	r2, [r4, r5]
 80026b2:	604b      	str	r3, [r1, #4]
 80026b4:	4638      	mov	r0, r7
 80026b6:	f104 060b 	add.w	r6, r4, #11
 80026ba:	f000 f865 	bl	8002788 <__malloc_unlock>
 80026be:	f026 0607 	bic.w	r6, r6, #7
 80026c2:	1d23      	adds	r3, r4, #4
 80026c4:	1af2      	subs	r2, r6, r3
 80026c6:	d0b6      	beq.n	8002636 <_malloc_r+0x22>
 80026c8:	1b9b      	subs	r3, r3, r6
 80026ca:	50a3      	str	r3, [r4, r2]
 80026cc:	e7b3      	b.n	8002636 <_malloc_r+0x22>
 80026ce:	6862      	ldr	r2, [r4, #4]
 80026d0:	42a3      	cmp	r3, r4
 80026d2:	bf0c      	ite	eq
 80026d4:	6032      	streq	r2, [r6, #0]
 80026d6:	605a      	strne	r2, [r3, #4]
 80026d8:	e7ec      	b.n	80026b4 <_malloc_r+0xa0>
 80026da:	4623      	mov	r3, r4
 80026dc:	6864      	ldr	r4, [r4, #4]
 80026de:	e7b2      	b.n	8002646 <_malloc_r+0x32>
 80026e0:	4634      	mov	r4, r6
 80026e2:	6876      	ldr	r6, [r6, #4]
 80026e4:	e7b9      	b.n	800265a <_malloc_r+0x46>
 80026e6:	230c      	movs	r3, #12
 80026e8:	4638      	mov	r0, r7
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	f000 f84c 	bl	8002788 <__malloc_unlock>
 80026f0:	e7a1      	b.n	8002636 <_malloc_r+0x22>
 80026f2:	6025      	str	r5, [r4, #0]
 80026f4:	e7de      	b.n	80026b4 <_malloc_r+0xa0>
 80026f6:	bf00      	nop
 80026f8:	2000009c 	.word	0x2000009c

080026fc <_realloc_r>:
 80026fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002700:	4680      	mov	r8, r0
 8002702:	4614      	mov	r4, r2
 8002704:	460e      	mov	r6, r1
 8002706:	b921      	cbnz	r1, 8002712 <_realloc_r+0x16>
 8002708:	4611      	mov	r1, r2
 800270a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800270e:	f7ff bf81 	b.w	8002614 <_malloc_r>
 8002712:	b92a      	cbnz	r2, 8002720 <_realloc_r+0x24>
 8002714:	f7ff ff16 	bl	8002544 <_free_r>
 8002718:	4625      	mov	r5, r4
 800271a:	4628      	mov	r0, r5
 800271c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002720:	f000 f838 	bl	8002794 <_malloc_usable_size_r>
 8002724:	4284      	cmp	r4, r0
 8002726:	4607      	mov	r7, r0
 8002728:	d802      	bhi.n	8002730 <_realloc_r+0x34>
 800272a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800272e:	d812      	bhi.n	8002756 <_realloc_r+0x5a>
 8002730:	4621      	mov	r1, r4
 8002732:	4640      	mov	r0, r8
 8002734:	f7ff ff6e 	bl	8002614 <_malloc_r>
 8002738:	4605      	mov	r5, r0
 800273a:	2800      	cmp	r0, #0
 800273c:	d0ed      	beq.n	800271a <_realloc_r+0x1e>
 800273e:	42bc      	cmp	r4, r7
 8002740:	4622      	mov	r2, r4
 8002742:	4631      	mov	r1, r6
 8002744:	bf28      	it	cs
 8002746:	463a      	movcs	r2, r7
 8002748:	f7ff fed4 	bl	80024f4 <memcpy>
 800274c:	4631      	mov	r1, r6
 800274e:	4640      	mov	r0, r8
 8002750:	f7ff fef8 	bl	8002544 <_free_r>
 8002754:	e7e1      	b.n	800271a <_realloc_r+0x1e>
 8002756:	4635      	mov	r5, r6
 8002758:	e7df      	b.n	800271a <_realloc_r+0x1e>
	...

0800275c <_sbrk_r>:
 800275c:	b538      	push	{r3, r4, r5, lr}
 800275e:	2300      	movs	r3, #0
 8002760:	4d05      	ldr	r5, [pc, #20]	; (8002778 <_sbrk_r+0x1c>)
 8002762:	4604      	mov	r4, r0
 8002764:	4608      	mov	r0, r1
 8002766:	602b      	str	r3, [r5, #0]
 8002768:	f7fd ffc8 	bl	80006fc <_sbrk>
 800276c:	1c43      	adds	r3, r0, #1
 800276e:	d102      	bne.n	8002776 <_sbrk_r+0x1a>
 8002770:	682b      	ldr	r3, [r5, #0]
 8002772:	b103      	cbz	r3, 8002776 <_sbrk_r+0x1a>
 8002774:	6023      	str	r3, [r4, #0]
 8002776:	bd38      	pop	{r3, r4, r5, pc}
 8002778:	200000a4 	.word	0x200000a4

0800277c <__malloc_lock>:
 800277c:	4801      	ldr	r0, [pc, #4]	; (8002784 <__malloc_lock+0x8>)
 800277e:	f000 b811 	b.w	80027a4 <__retarget_lock_acquire_recursive>
 8002782:	bf00      	nop
 8002784:	200000a8 	.word	0x200000a8

08002788 <__malloc_unlock>:
 8002788:	4801      	ldr	r0, [pc, #4]	; (8002790 <__malloc_unlock+0x8>)
 800278a:	f000 b80c 	b.w	80027a6 <__retarget_lock_release_recursive>
 800278e:	bf00      	nop
 8002790:	200000a8 	.word	0x200000a8

08002794 <_malloc_usable_size_r>:
 8002794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002798:	1f18      	subs	r0, r3, #4
 800279a:	2b00      	cmp	r3, #0
 800279c:	bfbc      	itt	lt
 800279e:	580b      	ldrlt	r3, [r1, r0]
 80027a0:	18c0      	addlt	r0, r0, r3
 80027a2:	4770      	bx	lr

080027a4 <__retarget_lock_acquire_recursive>:
 80027a4:	4770      	bx	lr

080027a6 <__retarget_lock_release_recursive>:
 80027a6:	4770      	bx	lr

080027a8 <_init>:
 80027a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027aa:	bf00      	nop
 80027ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ae:	bc08      	pop	{r3}
 80027b0:	469e      	mov	lr, r3
 80027b2:	4770      	bx	lr

080027b4 <_fini>:
 80027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b6:	bf00      	nop
 80027b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ba:	bc08      	pop	{r3}
 80027bc:	469e      	mov	lr, r3
 80027be:	4770      	bx	lr
