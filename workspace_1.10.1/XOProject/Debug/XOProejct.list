
XOProejct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003180  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0800328c  0800328c  0001328c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a3c  08003a3c  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08003a3c  08003a3c  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a3c  08003a3c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08003a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  20000048  08003a8c  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08003a8c  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c249  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d88  00000000  00000000  0002c2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0002e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  0002edc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021b4  00000000  00000000  0002fa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe8f  00000000  00000000  00031c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab5f  00000000  00000000  00041abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc61a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003878  00000000  00000000  000cc66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08003274 	.word	0x08003274

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08003274 	.word	0x08003274

0800014c <GetLenInt>:
#include "stm32f1xx_hal.h"



int GetLenInt(int *arr)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	int Length = 0;
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]

	while (arr[Length] != 0) {
 8000158:	e002      	b.n	8000160 <GetLenInt+0x14>
		Length += 1;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	3301      	adds	r3, #1
 800015e:	60fb      	str	r3, [r7, #12]
	while (arr[Length] != 0) {
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	009b      	lsls	r3, r3, #2
 8000164:	687a      	ldr	r2, [r7, #4]
 8000166:	4413      	add	r3, r2
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d1f5      	bne.n	800015a <GetLenInt+0xe>
	};
	return Length;
 800016e:	68fb      	ldr	r3, [r7, #12]
}
 8000170:	4618      	mov	r0, r3
 8000172:	3714      	adds	r7, #20
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr

0800017a <PrintLCDByFont>:
// 2 = O
// Check Index Then Win or Loss (mapping XO)
int winner[10] = { };

void PrintLCDByFont(uint16_t X, uint16_t Y, char *str, FontDef_t *Font,
		int IndexColor) {
 800017a:	b580      	push	{r7, lr}
 800017c:	b084      	sub	sp, #16
 800017e:	af00      	add	r7, sp, #0
 8000180:	60ba      	str	r2, [r7, #8]
 8000182:	607b      	str	r3, [r7, #4]
 8000184:	4603      	mov	r3, r0
 8000186:	81fb      	strh	r3, [r7, #14]
 8000188:	460b      	mov	r3, r1
 800018a:	81bb      	strh	r3, [r7, #12]

	SSD1306_GotoXY(X, Y);
 800018c:	89ba      	ldrh	r2, [r7, #12]
 800018e:	89fb      	ldrh	r3, [r7, #14]
 8000190:	4611      	mov	r1, r2
 8000192:	4618      	mov	r0, r3
 8000194:	f000 fcde 	bl	8000b54 <SSD1306_GotoXY>
	SSD1306_Puts(str, Font,
 8000198:	69bb      	ldr	r3, [r7, #24]
 800019a:	2b00      	cmp	r3, #0
 800019c:	bf14      	ite	ne
 800019e:	2301      	movne	r3, #1
 80001a0:	2300      	moveq	r3, #0
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	6879      	ldr	r1, [r7, #4]
 80001a8:	68b8      	ldr	r0, [r7, #8]
 80001aa:	f000 fd69 	bl	8000c80 <SSD1306_Puts>
			IndexColor == 0 ? SSD1306_COLOR_BLACK : SSD1306_COLOR_WHITE);
}
 80001ae:	bf00      	nop
 80001b0:	3710      	adds	r7, #16
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
	...

080001b8 <PrintLCD>:
void PrintLCD(uint16_t X, uint16_t Y, char *str, int IndexColor) {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b084      	sub	sp, #16
 80001bc:	af00      	add	r7, sp, #0
 80001be:	60ba      	str	r2, [r7, #8]
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	4603      	mov	r3, r0
 80001c4:	81fb      	strh	r3, [r7, #14]
 80001c6:	460b      	mov	r3, r1
 80001c8:	81bb      	strh	r3, [r7, #12]
	SSD1306_GotoXY(X, Y);
 80001ca:	89ba      	ldrh	r2, [r7, #12]
 80001cc:	89fb      	ldrh	r3, [r7, #14]
 80001ce:	4611      	mov	r1, r2
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 fcbf 	bl	8000b54 <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_7x10,
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	bf14      	ite	ne
 80001dc:	2301      	movne	r3, #1
 80001de:	2300      	moveq	r3, #0
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	461a      	mov	r2, r3
 80001e4:	4903      	ldr	r1, [pc, #12]	; (80001f4 <PrintLCD+0x3c>)
 80001e6:	68b8      	ldr	r0, [r7, #8]
 80001e8:	f000 fd4a 	bl	8000c80 <SSD1306_Puts>
			IndexColor == 0 ? SSD1306_COLOR_BLACK : SSD1306_COLOR_WHITE);
}
 80001ec:	bf00      	nop
 80001ee:	3710      	adds	r7, #16
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	2000002c 	.word	0x2000002c

080001f8 <GetList>:
		PrintLCDByFont(20, 0, str, &Font_11x18, 1);
	}
}

//Main Method
void GetList(int *Index, int *IndexMenu) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
	DisplyGird(*Index);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4618      	mov	r0, r3
 8000208:	f000 f82e 	bl	8000268 <DisplyGird>
	SSD1306_UpdateScreen();
 800020c:	f000 fbfe 	bl	8000a0c <SSD1306_UpdateScreen>
}
 8000210:	bf00      	nop
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}

08000218 <Play>:

int Play(int index, int Player) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	// 1 = X
	// 2 = O
	MapPlayerChar[index == 0 ? 0 : index - 1] = (Player == 1 ? "X" :
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d006      	beq.n	8000236 <Play+0x1e>
													Player == 2 ? "O" : " ");
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	2b02      	cmp	r3, #2
 800022c:	d101      	bne.n	8000232 <Play+0x1a>
 800022e:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <Play+0x40>)
 8000230:	e002      	b.n	8000238 <Play+0x20>
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <Play+0x44>)
 8000234:	e000      	b.n	8000238 <Play+0x20>
	MapPlayerChar[index == 0 ? 0 : index - 1] = (Player == 1 ? "X" :
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <Play+0x48>)
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	2a00      	cmp	r2, #0
 800023c:	d002      	beq.n	8000244 <Play+0x2c>
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	3a01      	subs	r2, #1
 8000242:	e000      	b.n	8000246 <Play+0x2e>
 8000244:	2200      	movs	r2, #0
 8000246:	4907      	ldr	r1, [pc, #28]	; (8000264 <Play+0x4c>)
 8000248:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	//1
	//Set to Maping Player
	//winner[index == 0 ? 0 : index - 1] = Player;
	//winner[index == 0 ? 0 : index - 1] = ( Player == 1 ? "X" : Player == 2  ? "O" : " ") ;
	return 0;
 800024c:	2300      	movs	r3, #0
}
 800024e:	4618      	mov	r0, r3
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	08003290 	.word	0x08003290
 800025c:	0800328c 	.word	0x0800328c
 8000260:	08003294 	.word	0x08003294
 8000264:	20000000 	.word	0x20000000

08000268 <DisplyGird>:
	GamesStatus.WinPlayer = (WIN1 == 1) ? 1 : (WIN2 == 1) ? 2 : 0;

	return GamesStatus;
}

void DisplyGird(int IndexPlay) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b08c      	sub	sp, #48	; 0x30
 800026c:	af02      	add	r7, sp, #8
 800026e:	6078      	str	r0, [r7, #4]

	//X Y W H
	//uint16_t x, uint16_t y, uint16_t w, uint16_t h

	int XSize = 5;
 8000270:	2305      	movs	r3, #5
 8000272:	627b      	str	r3, [r7, #36]	; 0x24
	int YSize = 3;
 8000274:	2303      	movs	r3, #3
 8000276:	623b      	str	r3, [r7, #32]

	SSD1306_DrawRectangle(0, //X
 8000278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800027a:	b29b      	uxth	r3, r3
 800027c:	3324      	adds	r3, #36	; 0x24
 800027e:	b29a      	uxth	r2, r3
 8000280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000282:	b29b      	uxth	r3, r3
 8000284:	3324      	adds	r3, #36	; 0x24
 8000286:	b29b      	uxth	r3, r3
 8000288:	2101      	movs	r1, #1
 800028a:	9100      	str	r1, [sp, #0]
 800028c:	2100      	movs	r1, #0
 800028e:	2000      	movs	r0, #0
 8000290:	f000 fe16 	bl	8000ec0 <SSD1306_DrawRectangle>
			0, // Y
			24 + 12 + XSize, // W
			24 + 12 + XSize, // H
			1); //

	int X1 = 0 + XSize;  // X and Y in Rectangle
 8000294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000296:	61fb      	str	r3, [r7, #28]
	int X2 = 12 + XSize; //
 8000298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800029a:	330c      	adds	r3, #12
 800029c:	61bb      	str	r3, [r7, #24]
	int X3 = 24 + XSize; // W
 800029e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002a0:	3318      	adds	r3, #24
 80002a2:	617b      	str	r3, [r7, #20]
	int Y1 = 0 + YSize; //
 80002a4:	6a3b      	ldr	r3, [r7, #32]
 80002a6:	613b      	str	r3, [r7, #16]
	int Y2 = 12 + YSize; //
 80002a8:	6a3b      	ldr	r3, [r7, #32]
 80002aa:	330c      	adds	r3, #12
 80002ac:	60fb      	str	r3, [r7, #12]
	int Y3 = 24 + YSize; // H
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	3318      	adds	r3, #24
 80002b2:	60bb      	str	r3, [r7, #8]

	//------------------------------------
	PrintLCD(X1, Y1, MapPlayerChar[0], (IndexPlay == 1) ? 0 : 1);
 80002b4:	69fb      	ldr	r3, [r7, #28]
 80002b6:	b298      	uxth	r0, r3
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	b299      	uxth	r1, r3
 80002bc:	4b45      	ldr	r3, [pc, #276]	; (80003d4 <DisplyGird+0x16c>)
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	bf14      	ite	ne
 80002c6:	2301      	movne	r3, #1
 80002c8:	2300      	moveq	r3, #0
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	f7ff ff74 	bl	80001b8 <PrintLCD>
	PrintLCD(X2, Y1, MapPlayerChar[1], (IndexPlay == 2) ? 0 : 1);
 80002d0:	69bb      	ldr	r3, [r7, #24]
 80002d2:	b298      	uxth	r0, r3
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	b299      	uxth	r1, r3
 80002d8:	4b3e      	ldr	r3, [pc, #248]	; (80003d4 <DisplyGird+0x16c>)
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b02      	cmp	r3, #2
 80002e0:	bf14      	ite	ne
 80002e2:	2301      	movne	r3, #1
 80002e4:	2300      	moveq	r3, #0
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	f7ff ff66 	bl	80001b8 <PrintLCD>
	PrintLCD(X3, Y1, MapPlayerChar[2], (IndexPlay == 3) ? 0 : 1);
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	b298      	uxth	r0, r3
 80002f0:	693b      	ldr	r3, [r7, #16]
 80002f2:	b299      	uxth	r1, r3
 80002f4:	4b37      	ldr	r3, [pc, #220]	; (80003d4 <DisplyGird+0x16c>)
 80002f6:	689a      	ldr	r2, [r3, #8]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	bf14      	ite	ne
 80002fe:	2301      	movne	r3, #1
 8000300:	2300      	moveq	r3, #0
 8000302:	b2db      	uxtb	r3, r3
 8000304:	f7ff ff58 	bl	80001b8 <PrintLCD>
	//-------------------------------------
	PrintLCD(X1, Y2, MapPlayerChar[3], (IndexPlay == 4) ? 0 : 1);
 8000308:	69fb      	ldr	r3, [r7, #28]
 800030a:	b298      	uxth	r0, r3
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	b299      	uxth	r1, r3
 8000310:	4b30      	ldr	r3, [pc, #192]	; (80003d4 <DisplyGird+0x16c>)
 8000312:	68da      	ldr	r2, [r3, #12]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2b04      	cmp	r3, #4
 8000318:	bf14      	ite	ne
 800031a:	2301      	movne	r3, #1
 800031c:	2300      	moveq	r3, #0
 800031e:	b2db      	uxtb	r3, r3
 8000320:	f7ff ff4a 	bl	80001b8 <PrintLCD>
	PrintLCD(X2, Y2, MapPlayerChar[4], (IndexPlay == 5) ? 0 : 1);
 8000324:	69bb      	ldr	r3, [r7, #24]
 8000326:	b298      	uxth	r0, r3
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	b299      	uxth	r1, r3
 800032c:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <DisplyGird+0x16c>)
 800032e:	691a      	ldr	r2, [r3, #16]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2b05      	cmp	r3, #5
 8000334:	bf14      	ite	ne
 8000336:	2301      	movne	r3, #1
 8000338:	2300      	moveq	r3, #0
 800033a:	b2db      	uxtb	r3, r3
 800033c:	f7ff ff3c 	bl	80001b8 <PrintLCD>
	PrintLCD(X3, Y2, MapPlayerChar[5], (IndexPlay == 6) ? 0 : 1);
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	b298      	uxth	r0, r3
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	b299      	uxth	r1, r3
 8000348:	4b22      	ldr	r3, [pc, #136]	; (80003d4 <DisplyGird+0x16c>)
 800034a:	695a      	ldr	r2, [r3, #20]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2b06      	cmp	r3, #6
 8000350:	bf14      	ite	ne
 8000352:	2301      	movne	r3, #1
 8000354:	2300      	moveq	r3, #0
 8000356:	b2db      	uxtb	r3, r3
 8000358:	f7ff ff2e 	bl	80001b8 <PrintLCD>
	//-------------------------------------
	PrintLCD(X1, Y3, MapPlayerChar[6], (IndexPlay == 7) ? 0 : 1);
 800035c:	69fb      	ldr	r3, [r7, #28]
 800035e:	b298      	uxth	r0, r3
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	b299      	uxth	r1, r3
 8000364:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <DisplyGird+0x16c>)
 8000366:	699a      	ldr	r2, [r3, #24]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b07      	cmp	r3, #7
 800036c:	bf14      	ite	ne
 800036e:	2301      	movne	r3, #1
 8000370:	2300      	moveq	r3, #0
 8000372:	b2db      	uxtb	r3, r3
 8000374:	f7ff ff20 	bl	80001b8 <PrintLCD>
	PrintLCD(X2, Y3, MapPlayerChar[7], (IndexPlay == 8) ? 0 : 1);
 8000378:	69bb      	ldr	r3, [r7, #24]
 800037a:	b298      	uxth	r0, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	b299      	uxth	r1, r3
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <DisplyGird+0x16c>)
 8000382:	69da      	ldr	r2, [r3, #28]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2b08      	cmp	r3, #8
 8000388:	bf14      	ite	ne
 800038a:	2301      	movne	r3, #1
 800038c:	2300      	moveq	r3, #0
 800038e:	b2db      	uxtb	r3, r3
 8000390:	f7ff ff12 	bl	80001b8 <PrintLCD>
	PrintLCD(X3, Y3, MapPlayerChar[8], (IndexPlay == 9) ? 0 : 1);
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	b298      	uxth	r0, r3
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	b299      	uxth	r1, r3
 800039c:	4b0d      	ldr	r3, [pc, #52]	; (80003d4 <DisplyGird+0x16c>)
 800039e:	6a1a      	ldr	r2, [r3, #32]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2b09      	cmp	r3, #9
 80003a4:	bf14      	ite	ne
 80003a6:	2301      	movne	r3, #1
 80003a8:	2300      	moveq	r3, #0
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	f7ff ff04 	bl	80001b8 <PrintLCD>
	//-------------------------------------

	PrintLCDByFont(24 + 12 + 5 + 5, 0, "Status Gamse",&Font_8x8 ,(IndexPlay == 0) ? 0 : 1);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	bf14      	ite	ne
 80003b6:	2301      	movne	r3, #1
 80003b8:	2300      	moveq	r3, #0
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <DisplyGird+0x170>)
 80003c0:	4a06      	ldr	r2, [pc, #24]	; (80003dc <DisplyGird+0x174>)
 80003c2:	2100      	movs	r1, #0
 80003c4:	202e      	movs	r0, #46	; 0x2e
 80003c6:	f7ff fed8 	bl	800017a <PrintLCDByFont>
	 - EndY = 24
	 - W = 24
	 - H = 48
	 */

}
 80003ca:	bf00      	nop
 80003cc:	3728      	adds	r7, #40	; 0x28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000000 	.word	0x20000000
 80003d8:	20000024 	.word	0x20000024
 80003dc:	08003298 	.word	0x08003298

080003e0 <main>:
//8 -> Rining Game
//9 -> Rining Game
//10 -> pusad game
int IndexSoild = 1;

int main(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
	HAL_Init();
 80003e6:	f000 ff7d 	bl	80012e4 <HAL_Init>
	SystemClock_Config();
 80003ea:	f000 f8c9 	bl	8000580 <SystemClock_Config>
	MX_GPIO_Init();
 80003ee:	f000 f98b 	bl	8000708 <MX_GPIO_Init>
	MX_I2C1_Init();
 80003f2:	f000 f90b 	bl	800060c <MX_I2C1_Init>
	MX_TIM1_Init();
 80003f6:	f000 f937 	bl	8000668 <MX_TIM1_Init>
	HAL_TIM_Base_Start(&htim1);
 80003fa:	4815      	ldr	r0, [pc, #84]	; (8000450 <main+0x70>)
 80003fc:	f002 fcaa 	bl	8002d54 <HAL_TIM_Base_Start>
	SSD1306_Init();
 8000400:	f000 fa40 	bl	8000884 <SSD1306_Init>

	while (1) {
		//----------------------------------------------------------------------------------

		volatile unsigned int btnEnter = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000404:	2110      	movs	r1, #16
 8000406:	4813      	ldr	r0, [pc, #76]	; (8000454 <main+0x74>)
 8000408:	f001 fa84 	bl	8001914 <HAL_GPIO_ReadPin>
 800040c:	4603      	mov	r3, r0
 800040e:	607b      	str	r3, [r7, #4]
		volatile unsigned int btnMoveDown = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000410:	2120      	movs	r1, #32
 8000412:	4810      	ldr	r0, [pc, #64]	; (8000454 <main+0x74>)
 8000414:	f001 fa7e 	bl	8001914 <HAL_GPIO_ReadPin>
 8000418:	4603      	mov	r3, r0
 800041a:	603b      	str	r3, [r7, #0]

		if (btnMoveDown == GPIO_PIN_RESET) {
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d108      	bne.n	8000434 <main+0x54>
			if (IndexSoild != 0) {
 8000422:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <main+0x78>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d004      	beq.n	8000434 <main+0x54>
				IndexSoild = NextPoint();
 800042a:	f000 f819 	bl	8000460 <NextPoint>
 800042e:	4603      	mov	r3, r0
 8000430:	4a09      	ldr	r2, [pc, #36]	; (8000458 <main+0x78>)
 8000432:	6013      	str	r3, [r2, #0]
			}
		}

		if (btnEnter == GPIO_PIN_RESET) {
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d101      	bne.n	800043e <main+0x5e>
			addStapOX();
 800043a:	f000 f86b 	bl	8000514 <addStapOX>
		}

		//----------------------------------------------------------------------------------

		GetList(&IndexSoild, &player);
 800043e:	4907      	ldr	r1, [pc, #28]	; (800045c <main+0x7c>)
 8000440:	4805      	ldr	r0, [pc, #20]	; (8000458 <main+0x78>)
 8000442:	f7ff fed9 	bl	80001f8 <GetList>

		//----------------------------------------------------------------------------------

		HAL_Delay(100);
 8000446:	2064      	movs	r0, #100	; 0x64
 8000448:	f000 ffae 	bl	80013a8 <HAL_Delay>
	while (1) {
 800044c:	e7da      	b.n	8000404 <main+0x24>
 800044e:	bf00      	nop
 8000450:	200000b8 	.word	0x200000b8
 8000454:	40010c00 	.word	0x40010c00
 8000458:	20000038 	.word	0x20000038
 800045c:	20000034 	.word	0x20000034

08000460 <NextPoint>:
	}
}

int NextPoint() {
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0

	int ToNext = 1;
 8000466:	2301      	movs	r3, #1
 8000468:	61fb      	str	r3, [r7, #28]
	int NextStap = IndexSoild + 1; //Next Point
 800046a:	4b28      	ldr	r3, [pc, #160]	; (800050c <NextPoint+0xac>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	3301      	adds	r3, #1
 8000470:	60fb      	str	r3, [r7, #12]
	NextStap = (NextStap > 9) ? 1 : NextStap;
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	2b09      	cmp	r3, #9
 8000476:	dc01      	bgt.n	800047c <NextPoint+0x1c>
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	e000      	b.n	800047e <NextPoint+0x1e>
 800047c:	2301      	movs	r3, #1
 800047e:	60fb      	str	r3, [r7, #12]

	int NotHere = 0; // Check point Soild Player
 8000480:	2300      	movs	r3, #0
 8000482:	61bb      	str	r3, [r7, #24]

	foreach(int *v, MapSoilds) //CheckPoint
 8000484:	2301      	movs	r3, #1
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
 800048c:	230a      	movs	r3, #10
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	e023      	b.n	80004da <NextPoint+0x7a>
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	4a1e      	ldr	r2, [pc, #120]	; (8000510 <NextPoint+0xb0>)
 8000498:	4413      	add	r3, r2
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	e010      	b.n	80004c0 <NextPoint+0x60>
	{
		if (NotHere != 1) {
 800049e:	69bb      	ldr	r3, [r7, #24]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d006      	beq.n	80004b2 <NextPoint+0x52>
			if (NextStap == *v) {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	68fa      	ldr	r2, [r7, #12]
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d101      	bne.n	80004b2 <NextPoint+0x52>
				//NotHere
				NotHere = 1;
 80004ae:	2301      	movs	r3, #1
 80004b0:	61bb      	str	r3, [r7, #24]
	foreach(int *v, MapSoilds) //CheckPoint
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	bf0c      	ite	eq
 80004b8:	2301      	moveq	r3, #1
 80004ba:	2300      	movne	r3, #0
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d1eb      	bne.n	800049e <NextPoint+0x3e>
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	bf0c      	ite	eq
 80004cc:	2301      	moveq	r3, #1
 80004ce:	2300      	movne	r3, #0
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	617b      	str	r3, [r7, #20]
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	3301      	adds	r3, #1
 80004d8:	613b      	str	r3, [r7, #16]
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d003      	beq.n	80004e8 <NextPoint+0x88>
 80004e0:	693a      	ldr	r2, [r7, #16]
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d1d4      	bne.n	8000492 <NextPoint+0x32>
			}
		}
	}

	if (NotHere == 0) {
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d102      	bne.n	80004f4 <NextPoint+0x94>
		ToNext = NextStap;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	61fb      	str	r3, [r7, #28]
 80004f2:	e005      	b.n	8000500 <NextPoint+0xa0>
	} else {
		IndexSoild = NextStap;
 80004f4:	4a05      	ldr	r2, [pc, #20]	; (800050c <NextPoint+0xac>)
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	6013      	str	r3, [r2, #0]
		ToNext = NextPoint();
 80004fa:	f7ff ffb1 	bl	8000460 <NextPoint>
 80004fe:	61f8      	str	r0, [r7, #28]
	}

	return ToNext;
 8000500:	69fb      	ldr	r3, [r7, #28]
}
 8000502:	4618      	mov	r0, r3
 8000504:	3720      	adds	r7, #32
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000038 	.word	0x20000038
 8000510:	20000100 	.word	0x20000100

08000514 <addStapOX>:

void addStapOX() {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
	int Length = GetLenInt(MapSoilds);
 800051a:	4816      	ldr	r0, [pc, #88]	; (8000574 <addStapOX+0x60>)
 800051c:	f7ff fe16 	bl	800014c <GetLenInt>
 8000520:	6078      	str	r0, [r7, #4]
	if (MapSoilds[Length == 0 ? 0 : Length - 1] != IndexSoild) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d002      	beq.n	800052e <addStapOX+0x1a>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3b01      	subs	r3, #1
 800052c:	e000      	b.n	8000530 <addStapOX+0x1c>
 800052e:	2300      	movs	r3, #0
 8000530:	4a10      	ldr	r2, [pc, #64]	; (8000574 <addStapOX+0x60>)
 8000532:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <addStapOX+0x64>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	429a      	cmp	r2, r3
 800053c:	d016      	beq.n	800056c <addStapOX+0x58>
		MapSoilds[Length] = IndexSoild;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <addStapOX+0x64>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	490c      	ldr	r1, [pc, #48]	; (8000574 <addStapOX+0x60>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Play(IndexSoild, player);
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <addStapOX+0x64>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a0b      	ldr	r2, [pc, #44]	; (800057c <addStapOX+0x68>)
 8000550:	6812      	ldr	r2, [r2, #0]
 8000552:	4611      	mov	r1, r2
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff fe5f 	bl	8000218 <Play>
		player = (player == 1) ? 2 : 1; // Index Player
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <addStapOX+0x68>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d101      	bne.n	8000566 <addStapOX+0x52>
 8000562:	2302      	movs	r3, #2
 8000564:	e000      	b.n	8000568 <addStapOX+0x54>
 8000566:	2301      	movs	r3, #1
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <addStapOX+0x68>)
 800056a:	6013      	str	r3, [r2, #0]
	}
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000100 	.word	0x20000100
 8000578:	20000038 	.word	0x20000038
 800057c:	20000034 	.word	0x20000034

08000580 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */

void SystemClock_Config(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b090      	sub	sp, #64	; 0x40
 8000584:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	2228      	movs	r2, #40	; 0x28
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fe68 	bl	8003264 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005aa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005c4:	f107 0318 	add.w	r3, r7, #24
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 ff6d 	bl	80024a8 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x58>
		Error_Handler();
 80005d4:	f000 f950 	bl	8000878 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2102      	movs	r1, #2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 f9da 	bl	80029ac <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x82>
		Error_Handler();
 80005fe:	f000 f93b 	bl	8000878 <Error_Handler>
	}
}
 8000602:	bf00      	nop
 8000604:	3740      	adds	r7, #64	; 0x40
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_I2C1_Init+0x50>)
 8000612:	4a13      	ldr	r2, [pc, #76]	; (8000660 <MX_I2C1_Init+0x54>)
 8000614:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_I2C1_Init+0x50>)
 8000618:	4a12      	ldr	r2, [pc, #72]	; (8000664 <MX_I2C1_Init+0x58>)
 800061a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_I2C1_Init+0x50>)
 800062a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800062e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_I2C1_Init+0x50>)
 800064a:	f001 f9b5 	bl	80019b8 <HAL_I2C_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000654:	f000 f910 	bl	8000878 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000064 	.word	0x20000064
 8000660:	40005400 	.word	0x40005400
 8000664:	00061a80 	.word	0x00061a80

08000668 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800067c:	463b      	mov	r3, r7
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_TIM1_Init+0x98>)
 8000686:	4a1f      	ldr	r2, [pc, #124]	; (8000704 <MX_TIM1_Init+0x9c>)
 8000688:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_TIM1_Init+0x98>)
 800068c:	2247      	movs	r2, #71	; 0x47
 800068e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_TIM1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_TIM1_Init+0x98>)
 8000698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800069c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_TIM1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80006a4:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_TIM1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_TIM1_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80006b0:	4813      	ldr	r0, [pc, #76]	; (8000700 <MX_TIM1_Init+0x98>)
 80006b2:	f002 faff 	bl	8002cb4 <HAL_TIM_Base_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0x58>
		Error_Handler();
 80006bc:	f000 f8dc 	bl	8000878 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <MX_TIM1_Init+0x98>)
 80006ce:	f002 fb8b 	bl	8002de8 <HAL_TIM_ConfigClockSource>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0x74>
		Error_Handler();
 80006d8:	f000 f8ce 	bl	8000878 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_TIM1_Init+0x98>)
 80006ea:	f002 fd39 	bl	8003160 <HAL_TIMEx_MasterConfigSynchronization>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80006f4:	f000 f8c0 	bl	8000878 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000b8 	.word	0x200000b8
 8000704:	40012c00 	.word	0x40012c00

08000708 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800071c:	4b50      	ldr	r3, [pc, #320]	; (8000860 <MX_GPIO_Init+0x158>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	4a4f      	ldr	r2, [pc, #316]	; (8000860 <MX_GPIO_Init+0x158>)
 8000722:	f043 0310 	orr.w	r3, r3, #16
 8000726:	6193      	str	r3, [r2, #24]
 8000728:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <MX_GPIO_Init+0x158>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f003 0310 	and.w	r3, r3, #16
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000734:	4b4a      	ldr	r3, [pc, #296]	; (8000860 <MX_GPIO_Init+0x158>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a49      	ldr	r2, [pc, #292]	; (8000860 <MX_GPIO_Init+0x158>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b47      	ldr	r3, [pc, #284]	; (8000860 <MX_GPIO_Init+0x158>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0320 	and.w	r3, r3, #32
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800074c:	4b44      	ldr	r3, [pc, #272]	; (8000860 <MX_GPIO_Init+0x158>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a43      	ldr	r2, [pc, #268]	; (8000860 <MX_GPIO_Init+0x158>)
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b41      	ldr	r3, [pc, #260]	; (8000860 <MX_GPIO_Init+0x158>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0308 	and.w	r3, r3, #8
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b3e      	ldr	r3, [pc, #248]	; (8000860 <MX_GPIO_Init+0x158>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a3d      	ldr	r2, [pc, #244]	; (8000860 <MX_GPIO_Init+0x158>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b3b      	ldr	r3, [pc, #236]	; (8000860 <MX_GPIO_Init+0x158>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000782:	4838      	ldr	r0, [pc, #224]	; (8000864 <MX_GPIO_Init+0x15c>)
 8000784:	f001 f8dd 	bl	8001942 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8,
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800078e:	4836      	ldr	r0, [pc, #216]	; (8000868 <MX_GPIO_Init+0x160>)
 8000790:	f001 f8d7 	bl	8001942 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079a:	4834      	ldr	r0, [pc, #208]	; (800086c <MX_GPIO_Init+0x164>)
 800079c:	f001 f8d1 	bl	8001942 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC14 PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80007a0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2302      	movs	r3, #2
 80007b0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	482a      	ldr	r0, [pc, #168]	; (8000864 <MX_GPIO_Init+0x15c>)
 80007ba:	f000 ff27 	bl	800160c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c4:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <MX_GPIO_Init+0x168>)
 80007c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	4826      	ldr	r0, [pc, #152]	; (800086c <MX_GPIO_Init+0x164>)
 80007d4:	f000 ff1a 	bl	800160c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 PA3 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8;
 80007d8:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80007dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	4619      	mov	r1, r3
 80007f0:	481d      	ldr	r0, [pc, #116]	; (8000868 <MX_GPIO_Init+0x160>)
 80007f2:	f000 ff0b 	bl	800160c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_GPIO_Init+0x16c>)
 80007fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	4619      	mov	r1, r3
 800080a:	4817      	ldr	r0, [pc, #92]	; (8000868 <MX_GPIO_Init+0x160>)
 800080c:	f000 fefe 	bl	800160c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB3 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8000810:	2338      	movs	r3, #56	; 0x38
 8000812:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	4812      	ldr	r0, [pc, #72]	; (800086c <MX_GPIO_Init+0x164>)
 8000824:	f000 fef2 	bl	800160c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800082c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2302      	movs	r3, #2
 8000838:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	480a      	ldr	r0, [pc, #40]	; (800086c <MX_GPIO_Init+0x164>)
 8000842:	f000 fee3 	bl	800160c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2028      	movs	r0, #40	; 0x28
 800084c:	f000 fea7 	bl	800159e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000850:	2028      	movs	r0, #40	; 0x28
 8000852:	f000 fec0 	bl	80015d6 <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3720      	adds	r7, #32
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000
 8000864:	40011000 	.word	0x40011000
 8000868:	40010800 	.word	0x40010800
 800086c:	40010c00 	.word	0x40010c00
 8000870:	10210000 	.word	0x10210000
 8000874:	10110000 	.word	0x10110000

08000878 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800088a:	f000 fb83 	bl	8000f94 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800088e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000892:	2201      	movs	r2, #1
 8000894:	2178      	movs	r1, #120	; 0x78
 8000896:	485b      	ldr	r0, [pc, #364]	; (8000a04 <SSD1306_Init+0x180>)
 8000898:	f001 fad0 	bl	8001e3c <HAL_I2C_IsDeviceReady>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e0a9      	b.n	80009fa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80008a6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80008aa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008ac:	e002      	b.n	80008b4 <SSD1306_Init+0x30>
		p--;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f9      	bne.n	80008ae <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80008ba:	22ae      	movs	r2, #174	; 0xae
 80008bc:	2100      	movs	r1, #0
 80008be:	2078      	movs	r0, #120	; 0x78
 80008c0:	f000 fbe2 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80008c4:	2220      	movs	r2, #32
 80008c6:	2100      	movs	r1, #0
 80008c8:	2078      	movs	r0, #120	; 0x78
 80008ca:	f000 fbdd 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008ce:	2210      	movs	r2, #16
 80008d0:	2100      	movs	r1, #0
 80008d2:	2078      	movs	r0, #120	; 0x78
 80008d4:	f000 fbd8 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008d8:	22b0      	movs	r2, #176	; 0xb0
 80008da:	2100      	movs	r1, #0
 80008dc:	2078      	movs	r0, #120	; 0x78
 80008de:	f000 fbd3 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80008e2:	22c8      	movs	r2, #200	; 0xc8
 80008e4:	2100      	movs	r1, #0
 80008e6:	2078      	movs	r0, #120	; 0x78
 80008e8:	f000 fbce 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	2078      	movs	r0, #120	; 0x78
 80008f2:	f000 fbc9 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80008f6:	2210      	movs	r2, #16
 80008f8:	2100      	movs	r1, #0
 80008fa:	2078      	movs	r0, #120	; 0x78
 80008fc:	f000 fbc4 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000900:	2240      	movs	r2, #64	; 0x40
 8000902:	2100      	movs	r1, #0
 8000904:	2078      	movs	r0, #120	; 0x78
 8000906:	f000 fbbf 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800090a:	2281      	movs	r2, #129	; 0x81
 800090c:	2100      	movs	r1, #0
 800090e:	2078      	movs	r0, #120	; 0x78
 8000910:	f000 fbba 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000914:	22ff      	movs	r2, #255	; 0xff
 8000916:	2100      	movs	r1, #0
 8000918:	2078      	movs	r0, #120	; 0x78
 800091a:	f000 fbb5 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800091e:	22a1      	movs	r2, #161	; 0xa1
 8000920:	2100      	movs	r1, #0
 8000922:	2078      	movs	r0, #120	; 0x78
 8000924:	f000 fbb0 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000928:	22a6      	movs	r2, #166	; 0xa6
 800092a:	2100      	movs	r1, #0
 800092c:	2078      	movs	r0, #120	; 0x78
 800092e:	f000 fbab 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000932:	22a8      	movs	r2, #168	; 0xa8
 8000934:	2100      	movs	r1, #0
 8000936:	2078      	movs	r0, #120	; 0x78
 8000938:	f000 fba6 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800093c:	223f      	movs	r2, #63	; 0x3f
 800093e:	2100      	movs	r1, #0
 8000940:	2078      	movs	r0, #120	; 0x78
 8000942:	f000 fba1 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000946:	22a4      	movs	r2, #164	; 0xa4
 8000948:	2100      	movs	r1, #0
 800094a:	2078      	movs	r0, #120	; 0x78
 800094c:	f000 fb9c 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000950:	22d3      	movs	r2, #211	; 0xd3
 8000952:	2100      	movs	r1, #0
 8000954:	2078      	movs	r0, #120	; 0x78
 8000956:	f000 fb97 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	2078      	movs	r0, #120	; 0x78
 8000960:	f000 fb92 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000964:	22d5      	movs	r2, #213	; 0xd5
 8000966:	2100      	movs	r1, #0
 8000968:	2078      	movs	r0, #120	; 0x78
 800096a:	f000 fb8d 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800096e:	22f0      	movs	r2, #240	; 0xf0
 8000970:	2100      	movs	r1, #0
 8000972:	2078      	movs	r0, #120	; 0x78
 8000974:	f000 fb88 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000978:	22d9      	movs	r2, #217	; 0xd9
 800097a:	2100      	movs	r1, #0
 800097c:	2078      	movs	r0, #120	; 0x78
 800097e:	f000 fb83 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000982:	2222      	movs	r2, #34	; 0x22
 8000984:	2100      	movs	r1, #0
 8000986:	2078      	movs	r0, #120	; 0x78
 8000988:	f000 fb7e 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800098c:	22da      	movs	r2, #218	; 0xda
 800098e:	2100      	movs	r1, #0
 8000990:	2078      	movs	r0, #120	; 0x78
 8000992:	f000 fb79 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000996:	2212      	movs	r2, #18
 8000998:	2100      	movs	r1, #0
 800099a:	2078      	movs	r0, #120	; 0x78
 800099c:	f000 fb74 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80009a0:	22db      	movs	r2, #219	; 0xdb
 80009a2:	2100      	movs	r1, #0
 80009a4:	2078      	movs	r0, #120	; 0x78
 80009a6:	f000 fb6f 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80009aa:	2220      	movs	r2, #32
 80009ac:	2100      	movs	r1, #0
 80009ae:	2078      	movs	r0, #120	; 0x78
 80009b0:	f000 fb6a 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80009b4:	228d      	movs	r2, #141	; 0x8d
 80009b6:	2100      	movs	r1, #0
 80009b8:	2078      	movs	r0, #120	; 0x78
 80009ba:	f000 fb65 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80009be:	2214      	movs	r2, #20
 80009c0:	2100      	movs	r1, #0
 80009c2:	2078      	movs	r0, #120	; 0x78
 80009c4:	f000 fb60 	bl	8001088 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80009c8:	22af      	movs	r2, #175	; 0xaf
 80009ca:	2100      	movs	r1, #0
 80009cc:	2078      	movs	r0, #120	; 0x78
 80009ce:	f000 fb5b 	bl	8001088 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80009d2:	222e      	movs	r2, #46	; 0x2e
 80009d4:	2100      	movs	r1, #0
 80009d6:	2078      	movs	r0, #120	; 0x78
 80009d8:	f000 fb56 	bl	8001088 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 f843 	bl	8000a68 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80009e2:	f000 f813 	bl	8000a0c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <SSD1306_Init+0x184>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SSD1306_Init+0x184>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <SSD1306_Init+0x184>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80009f8:	2301      	movs	r3, #1
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000064 	.word	0x20000064
 8000a08:	20000528 	.word	0x20000528

08000a0c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000a12:	2300      	movs	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	e01d      	b.n	8000a54 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	3b50      	subs	r3, #80	; 0x50
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	2078      	movs	r0, #120	; 0x78
 8000a24:	f000 fb30 	bl	8001088 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2078      	movs	r0, #120	; 0x78
 8000a2e:	f000 fb2b 	bl	8001088 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a32:	2210      	movs	r2, #16
 8000a34:	2100      	movs	r1, #0
 8000a36:	2078      	movs	r0, #120	; 0x78
 8000a38:	f000 fb26 	bl	8001088 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	01db      	lsls	r3, r3, #7
 8000a40:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <SSD1306_UpdateScreen+0x58>)
 8000a42:	441a      	add	r2, r3
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	2140      	movs	r1, #64	; 0x40
 8000a48:	2078      	movs	r0, #120	; 0x78
 8000a4a:	f000 fab7 	bl	8000fbc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	3301      	adds	r3, #1
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	d9de      	bls.n	8000a18 <SSD1306_UpdateScreen+0xc>
	}
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000128 	.word	0x20000128

08000a68 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d101      	bne.n	8000a7c <SSD1306_Fill+0x14>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e000      	b.n	8000a7e <SSD1306_Fill+0x16>
 8000a7c:	23ff      	movs	r3, #255	; 0xff
 8000a7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a82:	4619      	mov	r1, r3
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <SSD1306_Fill+0x2c>)
 8000a86:	f002 fbed 	bl	8003264 <memset>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000128 	.word	0x20000128

08000a98 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	80bb      	strh	r3, [r7, #4]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	70fb      	strb	r3, [r7, #3]
	if (
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	2b7f      	cmp	r3, #127	; 0x7f
 8000aae:	d848      	bhi.n	8000b42 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000ab0:	88bb      	ldrh	r3, [r7, #4]
 8000ab2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ab4:	d845      	bhi.n	8000b42 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000ab6:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <SSD1306_DrawPixel+0xb4>)
 8000ab8:	791b      	ldrb	r3, [r3, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	bf0c      	ite	eq
 8000ac4:	2301      	moveq	r3, #1
 8000ac6:	2300      	movne	r3, #0
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d11a      	bne.n	8000b08 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	88bb      	ldrh	r3, [r7, #4]
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	b298      	uxth	r0, r3
 8000ada:	4603      	mov	r3, r0
 8000adc:	01db      	lsls	r3, r3, #7
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <SSD1306_DrawPixel+0xb8>)
 8000ae2:	5cd3      	ldrb	r3, [r2, r3]
 8000ae4:	b25a      	sxtb	r2, r3
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	f003 0307 	and.w	r3, r3, #7
 8000aec:	2101      	movs	r1, #1
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b259      	sxtb	r1, r3
 8000af8:	88fa      	ldrh	r2, [r7, #6]
 8000afa:	4603      	mov	r3, r0
 8000afc:	01db      	lsls	r3, r3, #7
 8000afe:	4413      	add	r3, r2
 8000b00:	b2c9      	uxtb	r1, r1
 8000b02:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <SSD1306_DrawPixel+0xb8>)
 8000b04:	54d1      	strb	r1, [r2, r3]
 8000b06:	e01d      	b.n	8000b44 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b08:	88fa      	ldrh	r2, [r7, #6]
 8000b0a:	88bb      	ldrh	r3, [r7, #4]
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	b298      	uxth	r0, r3
 8000b10:	4603      	mov	r3, r0
 8000b12:	01db      	lsls	r3, r3, #7
 8000b14:	4413      	add	r3, r2
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <SSD1306_DrawPixel+0xb8>)
 8000b18:	5cd3      	ldrb	r3, [r2, r3]
 8000b1a:	b25a      	sxtb	r2, r3
 8000b1c:	88bb      	ldrh	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	2101      	movs	r1, #1
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	b25b      	sxtb	r3, r3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	b259      	sxtb	r1, r3
 8000b32:	88fa      	ldrh	r2, [r7, #6]
 8000b34:	4603      	mov	r3, r0
 8000b36:	01db      	lsls	r3, r3, #7
 8000b38:	4413      	add	r3, r2
 8000b3a:	b2c9      	uxtb	r1, r1
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <SSD1306_DrawPixel+0xb8>)
 8000b3e:	54d1      	strb	r1, [r2, r3]
 8000b40:	e000      	b.n	8000b44 <SSD1306_DrawPixel+0xac>
		return;
 8000b42:	bf00      	nop
	}
}
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000528 	.word	0x20000528
 8000b50:	20000128 	.word	0x20000128

08000b54 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	80fb      	strh	r3, [r7, #6]
 8000b60:	4613      	mov	r3, r2
 8000b62:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000b64:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <SSD1306_GotoXY+0x28>)
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <SSD1306_GotoXY+0x28>)
 8000b6c:	88bb      	ldrh	r3, [r7, #4]
 8000b6e:	8053      	strh	r3, [r2, #2]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000528 	.word	0x20000528

08000b80 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b90:	4b3a      	ldr	r3, [pc, #232]	; (8000c7c <SSD1306_Putc+0xfc>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
	if (
 8000b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b9e:	dc07      	bgt.n	8000bb0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000ba0:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <SSD1306_Putc+0xfc>)
 8000ba2:	885b      	ldrh	r3, [r3, #2]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	785b      	ldrb	r3, [r3, #1]
 8000baa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000bac:	2b3f      	cmp	r3, #63	; 0x3f
 8000bae:	dd01      	ble.n	8000bb4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e05e      	b.n	8000c72 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	e04b      	b.n	8000c52 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	3b20      	subs	r3, #32
 8000bc2:	6839      	ldr	r1, [r7, #0]
 8000bc4:	7849      	ldrb	r1, [r1, #1]
 8000bc6:	fb01 f303 	mul.w	r3, r1, r3
 8000bca:	4619      	mov	r1, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	440b      	add	r3, r1
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	e030      	b.n	8000c40 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d010      	beq.n	8000c10 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000bee:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <SSD1306_Putc+0xfc>)
 8000bf0:	881a      	ldrh	r2, [r3, #0]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b298      	uxth	r0, r3
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <SSD1306_Putc+0xfc>)
 8000bfc:	885a      	ldrh	r2, [r3, #2]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	4413      	add	r3, r2
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	79ba      	ldrb	r2, [r7, #6]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f7ff ff45 	bl	8000a98 <SSD1306_DrawPixel>
 8000c0e:	e014      	b.n	8000c3a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c10:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <SSD1306_Putc+0xfc>)
 8000c12:	881a      	ldrh	r2, [r3, #0]
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4413      	add	r3, r2
 8000c1a:	b298      	uxth	r0, r3
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <SSD1306_Putc+0xfc>)
 8000c1e:	885a      	ldrh	r2, [r3, #2]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4413      	add	r3, r2
 8000c26:	b299      	uxth	r1, r3
 8000c28:	79bb      	ldrb	r3, [r7, #6]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bf0c      	ite	eq
 8000c2e:	2301      	moveq	r3, #1
 8000c30:	2300      	movne	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	461a      	mov	r2, r3
 8000c36:	f7ff ff2f 	bl	8000a98 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d3c8      	bcc.n	8000bde <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	785b      	ldrb	r3, [r3, #1]
 8000c56:	461a      	mov	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d3ad      	bcc.n	8000bba <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <SSD1306_Putc+0xfc>)
 8000c60:	881a      	ldrh	r2, [r3, #0]
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	4413      	add	r3, r2
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <SSD1306_Putc+0xfc>)
 8000c6e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000528 	.word	0x20000528

08000c80 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000c8e:	e012      	b.n	8000cb6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	79fa      	ldrb	r2, [r7, #7]
 8000c96:	68b9      	ldr	r1, [r7, #8]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff71 	bl	8000b80 <SSD1306_Putc>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d002      	beq.n	8000cb0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	e008      	b.n	8000cc2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1e8      	bne.n	8000c90 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	781b      	ldrb	r3, [r3, #0]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000cca:	b590      	push	{r4, r7, lr}
 8000ccc:	b087      	sub	sp, #28
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4623      	mov	r3, r4
 8000cda:	80fb      	strh	r3, [r7, #6]
 8000cdc:	4603      	mov	r3, r0
 8000cde:	80bb      	strh	r3, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	2b7f      	cmp	r3, #127	; 0x7f
 8000cec:	d901      	bls.n	8000cf2 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000cee:	237f      	movs	r3, #127	; 0x7f
 8000cf0:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf6:	d901      	bls.n	8000cfc <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000cf8:	237f      	movs	r3, #127	; 0x7f
 8000cfa:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000cfc:	88bb      	ldrh	r3, [r7, #4]
 8000cfe:	2b3f      	cmp	r3, #63	; 0x3f
 8000d00:	d901      	bls.n	8000d06 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000d02:	233f      	movs	r3, #63	; 0x3f
 8000d04:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000d06:	883b      	ldrh	r3, [r7, #0]
 8000d08:	2b3f      	cmp	r3, #63	; 0x3f
 8000d0a:	d901      	bls.n	8000d10 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000d0c:	233f      	movs	r3, #63	; 0x3f
 8000d0e:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000d10:	88fa      	ldrh	r2, [r7, #6]
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d205      	bcs.n	8000d24 <SSD1306_DrawLine+0x5a>
 8000d18:	887a      	ldrh	r2, [r7, #2]
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	e004      	b.n	8000d2e <SSD1306_DrawLine+0x64>
 8000d24:	88fa      	ldrh	r2, [r7, #6]
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000d30:	88ba      	ldrh	r2, [r7, #4]
 8000d32:	883b      	ldrh	r3, [r7, #0]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d205      	bcs.n	8000d44 <SSD1306_DrawLine+0x7a>
 8000d38:	883a      	ldrh	r2, [r7, #0]
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	e004      	b.n	8000d4e <SSD1306_DrawLine+0x84>
 8000d44:	88ba      	ldrh	r2, [r7, #4]
 8000d46:	883b      	ldrh	r3, [r7, #0]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	b21b      	sxth	r3, r3
 8000d4e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8000d50:	88fa      	ldrh	r2, [r7, #6]
 8000d52:	887b      	ldrh	r3, [r7, #2]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d201      	bcs.n	8000d5c <SSD1306_DrawLine+0x92>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e001      	b.n	8000d60 <SSD1306_DrawLine+0x96>
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d60:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8000d62:	88ba      	ldrh	r2, [r7, #4]
 8000d64:	883b      	ldrh	r3, [r7, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d201      	bcs.n	8000d6e <SSD1306_DrawLine+0xa4>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e001      	b.n	8000d72 <SSD1306_DrawLine+0xa8>
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d72:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000d74:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000d78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dd06      	ble.n	8000d8e <SSD1306_DrawLine+0xc4>
 8000d80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d84:	0fda      	lsrs	r2, r3, #31
 8000d86:	4413      	add	r3, r2
 8000d88:	105b      	asrs	r3, r3, #1
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	e006      	b.n	8000d9c <SSD1306_DrawLine+0xd2>
 8000d8e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d92:	0fda      	lsrs	r2, r3, #31
 8000d94:	4413      	add	r3, r2
 8000d96:	105b      	asrs	r3, r3, #1
 8000d98:	425b      	negs	r3, r3
 8000d9a:	b21b      	sxth	r3, r3
 8000d9c:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000d9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d129      	bne.n	8000dfa <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000da6:	883a      	ldrh	r2, [r7, #0]
 8000da8:	88bb      	ldrh	r3, [r7, #4]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d205      	bcs.n	8000dba <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000dae:	883b      	ldrh	r3, [r7, #0]
 8000db0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000db2:	88bb      	ldrh	r3, [r7, #4]
 8000db4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000db6:	893b      	ldrh	r3, [r7, #8]
 8000db8:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000dba:	887a      	ldrh	r2, [r7, #2]
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d205      	bcs.n	8000dce <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000dc2:	887b      	ldrh	r3, [r7, #2]
 8000dc4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000dca:	893b      	ldrh	r3, [r7, #8]
 8000dcc:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000dce:	88bb      	ldrh	r3, [r7, #4]
 8000dd0:	82bb      	strh	r3, [r7, #20]
 8000dd2:	e00c      	b.n	8000dee <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000dd4:	8ab9      	ldrh	r1, [r7, #20]
 8000dd6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fe5b 	bl	8000a98 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000de2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	3301      	adds	r3, #1
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	82bb      	strh	r3, [r7, #20]
 8000dee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000df2:	883b      	ldrh	r3, [r7, #0]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dded      	ble.n	8000dd4 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8000df8:	e05f      	b.n	8000eba <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8000dfa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d129      	bne.n	8000e56 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000e02:	883a      	ldrh	r2, [r7, #0]
 8000e04:	88bb      	ldrh	r3, [r7, #4]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d205      	bcs.n	8000e16 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000e0a:	883b      	ldrh	r3, [r7, #0]
 8000e0c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000e0e:	88bb      	ldrh	r3, [r7, #4]
 8000e10:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000e12:	893b      	ldrh	r3, [r7, #8]
 8000e14:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000e16:	887a      	ldrh	r2, [r7, #2]
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d205      	bcs.n	8000e2a <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000e26:	893b      	ldrh	r3, [r7, #8]
 8000e28:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	82bb      	strh	r3, [r7, #20]
 8000e2e:	e00c      	b.n	8000e4a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000e30:	8abb      	ldrh	r3, [r7, #20]
 8000e32:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e36:	88b9      	ldrh	r1, [r7, #4]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fe2d 	bl	8000a98 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000e3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3301      	adds	r3, #1
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	82bb      	strh	r3, [r7, #20]
 8000e4a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dded      	ble.n	8000e30 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8000e54:	e031      	b.n	8000eba <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000e56:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e5a:	88b9      	ldrh	r1, [r7, #4]
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fe1a 	bl	8000a98 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000e64:	88fa      	ldrh	r2, [r7, #6]
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d103      	bne.n	8000e74 <SSD1306_DrawLine+0x1aa>
 8000e6c:	88ba      	ldrh	r2, [r7, #4]
 8000e6e:	883b      	ldrh	r3, [r7, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d021      	beq.n	8000eb8 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8000e74:	8afb      	ldrh	r3, [r7, #22]
 8000e76:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000e78:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e80:	425b      	negs	r3, r3
 8000e82:	429a      	cmp	r2, r3
 8000e84:	dd08      	ble.n	8000e98 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000e86:	8afa      	ldrh	r2, [r7, #22]
 8000e88:	8a3b      	ldrh	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000e90:	89fa      	ldrh	r2, [r7, #14]
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	4413      	add	r3, r2
 8000e96:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8000e98:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e9c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dad8      	bge.n	8000e56 <SSD1306_DrawLine+0x18c>
			err += dx;
 8000ea4:	8afa      	ldrh	r2, [r7, #22]
 8000ea6:	8a7b      	ldrh	r3, [r7, #18]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000eae:	89ba      	ldrh	r2, [r7, #12]
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000eb6:	e7ce      	b.n	8000e56 <SSD1306_DrawLine+0x18c>
			break;
 8000eb8:	bf00      	nop
		} 
	}
}
 8000eba:	371c      	adds	r7, #28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd90      	pop	{r4, r7, pc}

08000ec0 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4608      	mov	r0, r1
 8000eca:	4611      	mov	r1, r2
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4623      	mov	r3, r4
 8000ed0:	80fb      	strh	r3, [r7, #6]
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80bb      	strh	r3, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	807b      	strh	r3, [r7, #2]
 8000eda:	4613      	mov	r3, r2
 8000edc:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ee2:	d853      	bhi.n	8000f8c <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8000ee4:	88bb      	ldrh	r3, [r7, #4]
 8000ee6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ee8:	d850      	bhi.n	8000f8c <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000eea:	88fa      	ldrh	r2, [r7, #6]
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	4413      	add	r3, r2
 8000ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef2:	dd03      	ble.n	8000efc <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000efa:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000efc:	88ba      	ldrh	r2, [r7, #4]
 8000efe:	883b      	ldrh	r3, [r7, #0]
 8000f00:	4413      	add	r3, r2
 8000f02:	2b3f      	cmp	r3, #63	; 0x3f
 8000f04:	dd03      	ble.n	8000f0e <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000f06:	88bb      	ldrh	r3, [r7, #4]
 8000f08:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000f0c:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000f0e:	88fa      	ldrh	r2, [r7, #6]
 8000f10:	887b      	ldrh	r3, [r7, #2]
 8000f12:	4413      	add	r3, r2
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	88bc      	ldrh	r4, [r7, #4]
 8000f18:	88b9      	ldrh	r1, [r7, #4]
 8000f1a:	88f8      	ldrh	r0, [r7, #6]
 8000f1c:	7e3b      	ldrb	r3, [r7, #24]
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	4623      	mov	r3, r4
 8000f22:	f7ff fed2 	bl	8000cca <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000f26:	88ba      	ldrh	r2, [r7, #4]
 8000f28:	883b      	ldrh	r3, [r7, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b299      	uxth	r1, r3
 8000f2e:	88fa      	ldrh	r2, [r7, #6]
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	4413      	add	r3, r2
 8000f34:	b29c      	uxth	r4, r3
 8000f36:	88ba      	ldrh	r2, [r7, #4]
 8000f38:	883b      	ldrh	r3, [r7, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	88f8      	ldrh	r0, [r7, #6]
 8000f40:	7e3b      	ldrb	r3, [r7, #24]
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	4613      	mov	r3, r2
 8000f46:	4622      	mov	r2, r4
 8000f48:	f7ff febf 	bl	8000cca <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000f4c:	88ba      	ldrh	r2, [r7, #4]
 8000f4e:	883b      	ldrh	r3, [r7, #0]
 8000f50:	4413      	add	r3, r2
 8000f52:	b29c      	uxth	r4, r3
 8000f54:	88fa      	ldrh	r2, [r7, #6]
 8000f56:	88b9      	ldrh	r1, [r7, #4]
 8000f58:	88f8      	ldrh	r0, [r7, #6]
 8000f5a:	7e3b      	ldrb	r3, [r7, #24]
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	4623      	mov	r3, r4
 8000f60:	f7ff feb3 	bl	8000cca <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000f64:	88fa      	ldrh	r2, [r7, #6]
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	4413      	add	r3, r2
 8000f6a:	b298      	uxth	r0, r3
 8000f6c:	88fa      	ldrh	r2, [r7, #6]
 8000f6e:	887b      	ldrh	r3, [r7, #2]
 8000f70:	4413      	add	r3, r2
 8000f72:	b29c      	uxth	r4, r3
 8000f74:	88ba      	ldrh	r2, [r7, #4]
 8000f76:	883b      	ldrh	r3, [r7, #0]
 8000f78:	4413      	add	r3, r2
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	88b9      	ldrh	r1, [r7, #4]
 8000f7e:	7e3b      	ldrb	r3, [r7, #24]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	4613      	mov	r3, r2
 8000f84:	4622      	mov	r2, r4
 8000f86:	f7ff fea0 	bl	8000cca <SSD1306_DrawLine>
 8000f8a:	e000      	b.n	8000f8e <SSD1306_DrawRectangle+0xce>
		return;
 8000f8c:	bf00      	nop
}
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd90      	pop	{r4, r7, pc}

08000f94 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <ssd1306_I2C_Init+0x24>)
 8000f9c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f9e:	e002      	b.n	8000fa6 <ssd1306_I2C_Init+0x12>
		p--;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f9      	bne.n	8000fa0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	0003d090 	.word	0x0003d090

08000fbc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b0c7      	sub	sp, #284	; 0x11c
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000fca:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000fce:	600a      	str	r2, [r1, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fd6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000fda:	4622      	mov	r2, r4
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fe2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000fee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000ff6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ffe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001002:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001006:	7812      	ldrb	r2, [r2, #0]
 8001008:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800100a:	2300      	movs	r3, #0
 800100c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001010:	e015      	b.n	800103e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001012:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001016:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800101a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	441a      	add	r2, r3
 8001022:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001026:	3301      	adds	r3, #1
 8001028:	7811      	ldrb	r1, [r2, #0]
 800102a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800102e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001032:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001034:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001038:	3301      	adds	r3, #1
 800103a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800103e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001042:	b29b      	uxth	r3, r3
 8001044:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001048:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800104c:	8812      	ldrh	r2, [r2, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d8df      	bhi.n	8001012 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001052:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001056:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b299      	uxth	r1, r3
 800105e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001062:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	b29b      	uxth	r3, r3
 800106c:	f107 020c 	add.w	r2, r7, #12
 8001070:	200a      	movs	r0, #10
 8001072:	9000      	str	r0, [sp, #0]
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <ssd1306_I2C_WriteMulti+0xc8>)
 8001076:	f000 fde3 	bl	8001c40 <HAL_I2C_Master_Transmit>
}
 800107a:	bf00      	nop
 800107c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001080:	46bd      	mov	sp, r7
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	20000064 	.word	0x20000064

08001088 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af02      	add	r7, sp, #8
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
 8001092:	460b      	mov	r3, r1
 8001094:	71bb      	strb	r3, [r7, #6]
 8001096:	4613      	mov	r3, r2
 8001098:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800109e:	797b      	ldrb	r3, [r7, #5]
 80010a0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	b299      	uxth	r1, r3
 80010a6:	f107 020c 	add.w	r2, r7, #12
 80010aa:	230a      	movs	r3, #10
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2302      	movs	r3, #2
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <ssd1306_I2C_Write+0x38>)
 80010b2:	f000 fdc5 	bl	8001c40 <HAL_I2C_Master_Transmit>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000064 	.word	0x20000064

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_MspInit+0x5c>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	4a14      	ldr	r2, [pc, #80]	; (8001120 <HAL_MspInit+0x5c>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6193      	str	r3, [r2, #24]
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_MspInit+0x5c>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_MspInit+0x5c>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_MspInit+0x5c>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	61d3      	str	r3, [r2, #28]
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_MspInit+0x5c>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_MspInit+0x60>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_MspInit+0x60>)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	40021000 	.word	0x40021000
 8001124:	40010000 	.word	0x40010000

08001128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a15      	ldr	r2, [pc, #84]	; (8001198 <HAL_I2C_MspInit+0x70>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d123      	bne.n	8001190 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_I2C_MspInit+0x74>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a13      	ldr	r2, [pc, #76]	; (800119c <HAL_I2C_MspInit+0x74>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_I2C_MspInit+0x74>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001160:	23c0      	movs	r3, #192	; 0xc0
 8001162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001164:	2312      	movs	r3, #18
 8001166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4619      	mov	r1, r3
 8001172:	480b      	ldr	r0, [pc, #44]	; (80011a0 <HAL_I2C_MspInit+0x78>)
 8001174:	f000 fa4a 	bl	800160c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_I2C_MspInit+0x74>)
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_I2C_MspInit+0x74>)
 800117e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001182:	61d3      	str	r3, [r2, #28]
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_I2C_MspInit+0x74>)
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40005400 	.word	0x40005400
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010c00 	.word	0x40010c00

080011a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a16      	ldr	r2, [pc, #88]	; (8001218 <HAL_TIM_Base_MspInit+0x74>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d124      	bne.n	800120e <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <HAL_TIM_Base_MspInit+0x78>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a14      	ldr	r2, [pc, #80]	; (800121c <HAL_TIM_Base_MspInit+0x78>)
 80011ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_TIM_Base_MspInit+0x78>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_TIM_Base_MspInit+0x78>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_TIM_Base_MspInit+0x78>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_TIM_Base_MspInit+0x78>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	; (8001220 <HAL_TIM_Base_MspInit+0x7c>)
 800120a:	f000 f9ff 	bl	800160c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3720      	adds	r7, #32
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40012c00 	.word	0x40012c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40010800 	.word	0x40010800

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <NMI_Handler+0x4>

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <MemManage_Handler+0x4>

08001236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler+0x4>

08001242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126a:	f000 f881 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}

08001272 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001276:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800127a:	f000 fb7b 	bl	8001974 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800127e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001282:	f000 fb77 	bl	8001974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}

0800128a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
	...

08001298 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	; (80012d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	; (80012dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012be:	f7ff ffe4 	bl	800128a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c2:	f001 ffab 	bl	800321c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c6:	f7ff f88b 	bl	80003e0 <main>
  bx lr
 80012ca:	4770      	bx	lr
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80012d4:	08003a44 	.word	0x08003a44
  ldr r2, =_sbss
 80012d8:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80012dc:	20000534 	.word	0x20000534

080012e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC1_2_IRQHandler>
	...

080012e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_Init+0x28>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_Init+0x28>)
 80012ee:	f043 0310 	orr.w	r3, r3, #16
 80012f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f947 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fa:	200f      	movs	r0, #15
 80012fc:	f000 f808 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f7ff fee0 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40022000 	.word	0x40022000

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f95f 	bl	80015f2 <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 f927 	bl	800159e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2000003c 	.word	0x2000003c
 8001368:	20000044 	.word	0x20000044
 800136c:	20000040 	.word	0x20000040

08001370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_IncTick+0x1c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_IncTick+0x20>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a03      	ldr	r2, [pc, #12]	; (8001390 <HAL_IncTick+0x20>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20000044 	.word	0x20000044
 8001390:	20000530 	.word	0x20000530

08001394 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <HAL_GetTick+0x10>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	20000530 	.word	0x20000530

080013a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff fff0 	bl	8001394 <HAL_GetTick>
 80013b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d005      	beq.n	80013ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_Delay+0x44>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4413      	add	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ce:	bf00      	nop
 80013d0:	f7ff ffe0 	bl	8001394 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d8f7      	bhi.n	80013d0 <HAL_Delay+0x28>
  {
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000044 	.word	0x20000044

080013f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800141c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	60d3      	str	r3, [r2, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <__NVIC_GetPriorityGrouping+0x18>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 0307 	and.w	r3, r3, #7
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	db0b      	blt.n	800147e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	f003 021f 	and.w	r2, r3, #31
 800146c:	4906      	ldr	r1, [pc, #24]	; (8001488 <__NVIC_EnableIRQ+0x34>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	2001      	movs	r0, #1
 8001476:	fa00 f202 	lsl.w	r2, r0, r2
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	; (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	; 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f7ff ff90 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff2d 	bl	80013f0 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff42 	bl	8001438 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff90 	bl	80014e0 <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5f 	bl	800148c <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff35 	bl	8001454 <__NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffa2 	bl	8001544 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800160c:	b480      	push	{r7}
 800160e:	b08b      	sub	sp, #44	; 0x2c
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161e:	e169      	b.n	80018f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001620:	2201      	movs	r2, #1
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	429a      	cmp	r2, r3
 800163a:	f040 8158 	bne.w	80018ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4a9a      	ldr	r2, [pc, #616]	; (80018ac <HAL_GPIO_Init+0x2a0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d05e      	beq.n	8001706 <HAL_GPIO_Init+0xfa>
 8001648:	4a98      	ldr	r2, [pc, #608]	; (80018ac <HAL_GPIO_Init+0x2a0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d875      	bhi.n	800173a <HAL_GPIO_Init+0x12e>
 800164e:	4a98      	ldr	r2, [pc, #608]	; (80018b0 <HAL_GPIO_Init+0x2a4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d058      	beq.n	8001706 <HAL_GPIO_Init+0xfa>
 8001654:	4a96      	ldr	r2, [pc, #600]	; (80018b0 <HAL_GPIO_Init+0x2a4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d86f      	bhi.n	800173a <HAL_GPIO_Init+0x12e>
 800165a:	4a96      	ldr	r2, [pc, #600]	; (80018b4 <HAL_GPIO_Init+0x2a8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d052      	beq.n	8001706 <HAL_GPIO_Init+0xfa>
 8001660:	4a94      	ldr	r2, [pc, #592]	; (80018b4 <HAL_GPIO_Init+0x2a8>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d869      	bhi.n	800173a <HAL_GPIO_Init+0x12e>
 8001666:	4a94      	ldr	r2, [pc, #592]	; (80018b8 <HAL_GPIO_Init+0x2ac>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d04c      	beq.n	8001706 <HAL_GPIO_Init+0xfa>
 800166c:	4a92      	ldr	r2, [pc, #584]	; (80018b8 <HAL_GPIO_Init+0x2ac>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d863      	bhi.n	800173a <HAL_GPIO_Init+0x12e>
 8001672:	4a92      	ldr	r2, [pc, #584]	; (80018bc <HAL_GPIO_Init+0x2b0>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d046      	beq.n	8001706 <HAL_GPIO_Init+0xfa>
 8001678:	4a90      	ldr	r2, [pc, #576]	; (80018bc <HAL_GPIO_Init+0x2b0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d85d      	bhi.n	800173a <HAL_GPIO_Init+0x12e>
 800167e:	2b12      	cmp	r3, #18
 8001680:	d82a      	bhi.n	80016d8 <HAL_GPIO_Init+0xcc>
 8001682:	2b12      	cmp	r3, #18
 8001684:	d859      	bhi.n	800173a <HAL_GPIO_Init+0x12e>
 8001686:	a201      	add	r2, pc, #4	; (adr r2, 800168c <HAL_GPIO_Init+0x80>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	08001707 	.word	0x08001707
 8001690:	080016e1 	.word	0x080016e1
 8001694:	080016f3 	.word	0x080016f3
 8001698:	08001735 	.word	0x08001735
 800169c:	0800173b 	.word	0x0800173b
 80016a0:	0800173b 	.word	0x0800173b
 80016a4:	0800173b 	.word	0x0800173b
 80016a8:	0800173b 	.word	0x0800173b
 80016ac:	0800173b 	.word	0x0800173b
 80016b0:	0800173b 	.word	0x0800173b
 80016b4:	0800173b 	.word	0x0800173b
 80016b8:	0800173b 	.word	0x0800173b
 80016bc:	0800173b 	.word	0x0800173b
 80016c0:	0800173b 	.word	0x0800173b
 80016c4:	0800173b 	.word	0x0800173b
 80016c8:	0800173b 	.word	0x0800173b
 80016cc:	0800173b 	.word	0x0800173b
 80016d0:	080016e9 	.word	0x080016e9
 80016d4:	080016fd 	.word	0x080016fd
 80016d8:	4a79      	ldr	r2, [pc, #484]	; (80018c0 <HAL_GPIO_Init+0x2b4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016de:	e02c      	b.n	800173a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	623b      	str	r3, [r7, #32]
          break;
 80016e6:	e029      	b.n	800173c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	3304      	adds	r3, #4
 80016ee:	623b      	str	r3, [r7, #32]
          break;
 80016f0:	e024      	b.n	800173c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	3308      	adds	r3, #8
 80016f8:	623b      	str	r3, [r7, #32]
          break;
 80016fa:	e01f      	b.n	800173c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	330c      	adds	r3, #12
 8001702:	623b      	str	r3, [r7, #32]
          break;
 8001704:	e01a      	b.n	800173c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800170e:	2304      	movs	r3, #4
 8001710:	623b      	str	r3, [r7, #32]
          break;
 8001712:	e013      	b.n	800173c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d105      	bne.n	8001728 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800171c:	2308      	movs	r3, #8
 800171e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	611a      	str	r2, [r3, #16]
          break;
 8001726:	e009      	b.n	800173c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001728:	2308      	movs	r3, #8
 800172a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	615a      	str	r2, [r3, #20]
          break;
 8001732:	e003      	b.n	800173c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
          break;
 8001738:	e000      	b.n	800173c <HAL_GPIO_Init+0x130>
          break;
 800173a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2bff      	cmp	r3, #255	; 0xff
 8001740:	d801      	bhi.n	8001746 <HAL_GPIO_Init+0x13a>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	e001      	b.n	800174a <HAL_GPIO_Init+0x13e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3304      	adds	r3, #4
 800174a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2bff      	cmp	r3, #255	; 0xff
 8001750:	d802      	bhi.n	8001758 <HAL_GPIO_Init+0x14c>
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	e002      	b.n	800175e <HAL_GPIO_Init+0x152>
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	3b08      	subs	r3, #8
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	210f      	movs	r1, #15
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	401a      	ands	r2, r3
 8001770:	6a39      	ldr	r1, [r7, #32]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	431a      	orrs	r2, r3
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80b1 	beq.w	80018ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800178c:	4b4d      	ldr	r3, [pc, #308]	; (80018c4 <HAL_GPIO_Init+0x2b8>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a4c      	ldr	r2, [pc, #304]	; (80018c4 <HAL_GPIO_Init+0x2b8>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <HAL_GPIO_Init+0x2b8>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017a4:	4a48      	ldr	r2, [pc, #288]	; (80018c8 <HAL_GPIO_Init+0x2bc>)
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	3302      	adds	r3, #2
 80017ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	220f      	movs	r2, #15
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4013      	ands	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a40      	ldr	r2, [pc, #256]	; (80018cc <HAL_GPIO_Init+0x2c0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d013      	beq.n	80017f8 <HAL_GPIO_Init+0x1ec>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a3f      	ldr	r2, [pc, #252]	; (80018d0 <HAL_GPIO_Init+0x2c4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00d      	beq.n	80017f4 <HAL_GPIO_Init+0x1e8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a3e      	ldr	r2, [pc, #248]	; (80018d4 <HAL_GPIO_Init+0x2c8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d007      	beq.n	80017f0 <HAL_GPIO_Init+0x1e4>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a3d      	ldr	r2, [pc, #244]	; (80018d8 <HAL_GPIO_Init+0x2cc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_GPIO_Init+0x1e0>
 80017e8:	2303      	movs	r3, #3
 80017ea:	e006      	b.n	80017fa <HAL_GPIO_Init+0x1ee>
 80017ec:	2304      	movs	r3, #4
 80017ee:	e004      	b.n	80017fa <HAL_GPIO_Init+0x1ee>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e002      	b.n	80017fa <HAL_GPIO_Init+0x1ee>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_GPIO_Init+0x1ee>
 80017f8:	2300      	movs	r3, #0
 80017fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fc:	f002 0203 	and.w	r2, r2, #3
 8001800:	0092      	lsls	r2, r2, #2
 8001802:	4093      	lsls	r3, r2
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800180a:	492f      	ldr	r1, [pc, #188]	; (80018c8 <HAL_GPIO_Init+0x2bc>)
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	3302      	adds	r3, #2
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001824:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	492c      	ldr	r1, [pc, #176]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001832:	4b2a      	ldr	r3, [pc, #168]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	43db      	mvns	r3, r3
 800183a:	4928      	ldr	r1, [pc, #160]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 800183c:	4013      	ands	r3, r2
 800183e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800184c:	4b23      	ldr	r3, [pc, #140]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	4922      	ldr	r1, [pc, #136]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	43db      	mvns	r3, r3
 8001862:	491e      	ldr	r1, [pc, #120]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 8001864:	4013      	ands	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	4918      	ldr	r1, [pc, #96]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	608b      	str	r3, [r1, #8]
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	43db      	mvns	r3, r3
 800188a:	4914      	ldr	r1, [pc, #80]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 800188c:	4013      	ands	r3, r2
 800188e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d021      	beq.n	80018e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	490e      	ldr	r1, [pc, #56]	; (80018dc <HAL_GPIO_Init+0x2d0>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60cb      	str	r3, [r1, #12]
 80018a8:	e021      	b.n	80018ee <HAL_GPIO_Init+0x2e2>
 80018aa:	bf00      	nop
 80018ac:	10320000 	.word	0x10320000
 80018b0:	10310000 	.word	0x10310000
 80018b4:	10220000 	.word	0x10220000
 80018b8:	10210000 	.word	0x10210000
 80018bc:	10120000 	.word	0x10120000
 80018c0:	10110000 	.word	0x10110000
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010000 	.word	0x40010000
 80018cc:	40010800 	.word	0x40010800
 80018d0:	40010c00 	.word	0x40010c00
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40011400 	.word	0x40011400
 80018dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_GPIO_Init+0x304>)
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	4909      	ldr	r1, [pc, #36]	; (8001910 <HAL_GPIO_Init+0x304>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	3301      	adds	r3, #1
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	fa22 f303 	lsr.w	r3, r2, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f47f ae8e 	bne.w	8001620 <HAL_GPIO_Init+0x14>
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	372c      	adds	r7, #44	; 0x2c
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	40010400 	.word	0x40010400

08001914 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	887b      	ldrh	r3, [r7, #2]
 8001926:	4013      	ands	r3, r2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	e001      	b.n	8001936 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	807b      	strh	r3, [r7, #2]
 800194e:	4613      	mov	r3, r2
 8001950:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001952:	787b      	ldrb	r3, [r7, #1]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001958:	887a      	ldrh	r2, [r7, #2]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800195e:	e003      	b.n	8001968 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	041a      	lsls	r2, r3, #16
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	611a      	str	r2, [r3, #16]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
	...

08001974 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	4013      	ands	r3, r2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f806 	bl	80019a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40010400 	.word	0x40010400

080019a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e12b      	b.n	8001c22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fba2 	bl	8001128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2224      	movs	r2, #36	; 0x24
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a1c:	f001 f918 	bl	8002c50 <HAL_RCC_GetPCLK1Freq>
 8001a20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4a81      	ldr	r2, [pc, #516]	; (8001c2c <HAL_I2C_Init+0x274>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d807      	bhi.n	8001a3c <HAL_I2C_Init+0x84>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4a80      	ldr	r2, [pc, #512]	; (8001c30 <HAL_I2C_Init+0x278>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	bf94      	ite	ls
 8001a34:	2301      	movls	r3, #1
 8001a36:	2300      	movhi	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	e006      	b.n	8001a4a <HAL_I2C_Init+0x92>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4a7d      	ldr	r2, [pc, #500]	; (8001c34 <HAL_I2C_Init+0x27c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	bf94      	ite	ls
 8001a44:	2301      	movls	r3, #1
 8001a46:	2300      	movhi	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0e7      	b.n	8001c22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4a78      	ldr	r2, [pc, #480]	; (8001c38 <HAL_I2C_Init+0x280>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	0c9b      	lsrs	r3, r3, #18
 8001a5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a6a      	ldr	r2, [pc, #424]	; (8001c2c <HAL_I2C_Init+0x274>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d802      	bhi.n	8001a8c <HAL_I2C_Init+0xd4>
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	e009      	b.n	8001aa0 <HAL_I2C_Init+0xe8>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	4a69      	ldr	r2, [pc, #420]	; (8001c3c <HAL_I2C_Init+0x284>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	099b      	lsrs	r3, r3, #6
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ab2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	495c      	ldr	r1, [pc, #368]	; (8001c2c <HAL_I2C_Init+0x274>)
 8001abc:	428b      	cmp	r3, r1
 8001abe:	d819      	bhi.n	8001af4 <HAL_I2C_Init+0x13c>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1e59      	subs	r1, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ace:	1c59      	adds	r1, r3, #1
 8001ad0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00a      	beq.n	8001af0 <HAL_I2C_Init+0x138>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1e59      	subs	r1, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aee:	e051      	b.n	8001b94 <HAL_I2C_Init+0x1dc>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e04f      	b.n	8001b94 <HAL_I2C_Init+0x1dc>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d111      	bne.n	8001b20 <HAL_I2C_Init+0x168>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1e58      	subs	r0, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6859      	ldr	r1, [r3, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	440b      	add	r3, r1
 8001b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	e012      	b.n	8001b46 <HAL_I2C_Init+0x18e>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1e58      	subs	r0, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6859      	ldr	r1, [r3, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	0099      	lsls	r1, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_Init+0x196>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e022      	b.n	8001b94 <HAL_I2C_Init+0x1dc>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10e      	bne.n	8001b74 <HAL_I2C_Init+0x1bc>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1e58      	subs	r0, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6859      	ldr	r1, [r3, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	440b      	add	r3, r1
 8001b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b72:	e00f      	b.n	8001b94 <HAL_I2C_Init+0x1dc>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1e58      	subs	r0, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	0099      	lsls	r1, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	6809      	ldr	r1, [r1, #0]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6911      	ldr	r1, [r2, #16]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68d2      	ldr	r2, [r2, #12]
 8001bce:	4311      	orrs	r1, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	000186a0 	.word	0x000186a0
 8001c30:	001e847f 	.word	0x001e847f
 8001c34:	003d08ff 	.word	0x003d08ff
 8001c38:	431bde83 	.word	0x431bde83
 8001c3c:	10624dd3 	.word	0x10624dd3

08001c40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	817b      	strh	r3, [r7, #10]
 8001c50:	4613      	mov	r3, r2
 8001c52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff fb9e 	bl	8001394 <HAL_GetTick>
 8001c58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	f040 80e0 	bne.w	8001e28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2319      	movs	r3, #25
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4970      	ldr	r1, [pc, #448]	; (8001e34 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 fa92 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e0d3      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_I2C_Master_Transmit+0x50>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e0cc      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d007      	beq.n	8001cb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2221      	movs	r2, #33	; 0x21
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2210      	movs	r2, #16
 8001cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	893a      	ldrh	r2, [r7, #8]
 8001ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4a50      	ldr	r2, [pc, #320]	; (8001e38 <HAL_I2C_Master_Transmit+0x1f8>)
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cf8:	8979      	ldrh	r1, [r7, #10]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	6a3a      	ldr	r2, [r7, #32]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f9ca 	bl	8002098 <I2C_MasterRequestWrite>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e08d      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d24:	e066      	b.n	8001df4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	6a39      	ldr	r1, [r7, #32]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fb0c 	bl	8002348 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00d      	beq.n	8001d52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d107      	bne.n	8001d4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e06b      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_I2C_Master_Transmit+0x188>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d017      	beq.n	8001dc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	6a39      	ldr	r1, [r7, #32]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 fafc 	bl	80023ca <I2C_WaitOnBTFFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00d      	beq.n	8001df4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d107      	bne.n	8001df0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e01a      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d194      	bne.n	8001d26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e000      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	00100002 	.word	0x00100002
 8001e38:	ffff0000 	.word	0xffff0000

08001e3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff faa2 	bl	8001394 <HAL_GetTick>
 8001e50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001e52:	2301      	movs	r3, #1
 8001e54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	f040 8111 	bne.w	8002086 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2319      	movs	r3, #25
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4988      	ldr	r1, [pc, #544]	; (8002090 <HAL_I2C_IsDeviceReady+0x254>)
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f994 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e104      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_I2C_IsDeviceReady+0x50>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e0fd      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d007      	beq.n	8001eb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2224      	movs	r2, #36	; 0x24
 8001ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4a70      	ldr	r2, [pc, #448]	; (8002094 <HAL_I2C_IsDeviceReady+0x258>)
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f952 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0c:	d103      	bne.n	8001f16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e0b6      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f1a:	897b      	ldrh	r3, [r7, #10]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff fa33 	bl	8001394 <HAL_GetTick>
 8001f2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f54:	bf0c      	ite	eq
 8001f56:	2301      	moveq	r3, #1
 8001f58:	2300      	movne	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f5e:	e025      	b.n	8001fac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f60:	f7ff fa18 	bl	8001394 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d302      	bcc.n	8001f76 <HAL_I2C_IsDeviceReady+0x13a>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d103      	bne.n	8001f7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	22a0      	movs	r2, #160	; 0xa0
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2ba0      	cmp	r3, #160	; 0xa0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_I2C_IsDeviceReady+0x188>
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d102      	bne.n	8001fc4 <HAL_I2C_IsDeviceReady+0x188>
 8001fbe:	7dbb      	ldrb	r3, [r7, #22]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0cd      	beq.n	8001f60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d129      	bne.n	800202e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2319      	movs	r3, #25
 8002006:	2201      	movs	r2, #1
 8002008:	4921      	ldr	r1, [pc, #132]	; (8002090 <HAL_I2C_IsDeviceReady+0x254>)
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f8c6 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e036      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e02c      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002046:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2319      	movs	r3, #25
 800204e:	2201      	movs	r2, #1
 8002050:	490f      	ldr	r1, [pc, #60]	; (8002090 <HAL_I2C_IsDeviceReady+0x254>)
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f8a2 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e012      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	3301      	adds	r3, #1
 8002066:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	f4ff af32 	bcc.w	8001ed6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002086:	2302      	movs	r3, #2
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	3720      	adds	r7, #32
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	00100002 	.word	0x00100002
 8002094:	ffff0000 	.word	0xffff0000

08002098 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	460b      	mov	r3, r1
 80020a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d006      	beq.n	80020c2 <I2C_MasterRequestWrite+0x2a>
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d003      	beq.n	80020c2 <I2C_MasterRequestWrite+0x2a>
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020c0:	d108      	bne.n	80020d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e00b      	b.n	80020ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	2b12      	cmp	r3, #18
 80020da:	d107      	bne.n	80020ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 f84f 	bl	800219c <I2C_WaitOnFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00d      	beq.n	8002120 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002112:	d103      	bne.n	800211c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e035      	b.n	800218c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002128:	d108      	bne.n	800213c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	e01b      	b.n	8002174 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800213c:	897b      	ldrh	r3, [r7, #10]
 800213e:	11db      	asrs	r3, r3, #7
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f003 0306 	and.w	r3, r3, #6
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f063 030f 	orn	r3, r3, #15
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	490e      	ldr	r1, [pc, #56]	; (8002194 <I2C_MasterRequestWrite+0xfc>)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f875 	bl	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e010      	b.n	800218c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800216a:	897b      	ldrh	r3, [r7, #10]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4907      	ldr	r1, [pc, #28]	; (8002198 <I2C_MasterRequestWrite+0x100>)
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f865 	bl	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	00010008 	.word	0x00010008
 8002198:	00010002 	.word	0x00010002

0800219c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ac:	e025      	b.n	80021fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d021      	beq.n	80021fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b6:	f7ff f8ed 	bl	8001394 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d302      	bcc.n	80021cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d116      	bne.n	80021fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f043 0220 	orr.w	r2, r3, #32
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e023      	b.n	8002242 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d10d      	bne.n	8002220 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	4013      	ands	r3, r2
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	bf0c      	ite	eq
 8002216:	2301      	moveq	r3, #1
 8002218:	2300      	movne	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	e00c      	b.n	800223a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4013      	ands	r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf0c      	ite	eq
 8002232:	2301      	moveq	r3, #1
 8002234:	2300      	movne	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	429a      	cmp	r2, r3
 800223e:	d0b6      	beq.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002258:	e051      	b.n	80022fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002268:	d123      	bne.n	80022b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002278:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002282:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f043 0204 	orr.w	r2, r3, #4
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e046      	b.n	8002340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d021      	beq.n	80022fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ba:	f7ff f86b 	bl	8001394 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d302      	bcc.n	80022d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d116      	bne.n	80022fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f043 0220 	orr.w	r2, r3, #32
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e020      	b.n	8002340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	d10c      	bne.n	8002322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	43da      	mvns	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4013      	ands	r3, r2
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	bf14      	ite	ne
 800231a:	2301      	movne	r3, #1
 800231c:	2300      	moveq	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	e00b      	b.n	800233a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	43da      	mvns	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4013      	ands	r3, r2
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d18d      	bne.n	800225a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002354:	e02d      	b.n	80023b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f878 	bl	800244c <I2C_IsAcknowledgeFailed>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e02d      	b.n	80023c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d021      	beq.n	80023b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800236e:	f7ff f811 	bl	8001394 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	429a      	cmp	r2, r3
 800237c:	d302      	bcc.n	8002384 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d116      	bne.n	80023b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f043 0220 	orr.w	r2, r3, #32
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e007      	b.n	80023c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023bc:	2b80      	cmp	r3, #128	; 0x80
 80023be:	d1ca      	bne.n	8002356 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023d6:	e02d      	b.n	8002434 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f837 	bl	800244c <I2C_IsAcknowledgeFailed>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e02d      	b.n	8002444 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ee:	d021      	beq.n	8002434 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f0:	f7fe ffd0 	bl	8001394 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d302      	bcc.n	8002406 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d116      	bne.n	8002434 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f043 0220 	orr.w	r2, r3, #32
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e007      	b.n	8002444 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b04      	cmp	r3, #4
 8002440:	d1ca      	bne.n	80023d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002462:	d11b      	bne.n	800249c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800246c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	f043 0204 	orr.w	r2, r3, #4
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e272      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8087 	beq.w	80025d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c8:	4b92      	ldr	r3, [pc, #584]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d00c      	beq.n	80024ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024d4:	4b8f      	ldr	r3, [pc, #572]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d112      	bne.n	8002506 <HAL_RCC_OscConfig+0x5e>
 80024e0:	4b8c      	ldr	r3, [pc, #560]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ec:	d10b      	bne.n	8002506 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ee:	4b89      	ldr	r3, [pc, #548]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d06c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x12c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d168      	bne.n	80025d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e24c      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x76>
 8002510:	4b80      	ldr	r3, [pc, #512]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a7f      	ldr	r2, [pc, #508]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	e02e      	b.n	800257c <HAL_RCC_OscConfig+0xd4>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x98>
 8002526:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a7a      	ldr	r2, [pc, #488]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b78      	ldr	r3, [pc, #480]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a77      	ldr	r2, [pc, #476]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e01d      	b.n	800257c <HAL_RCC_OscConfig+0xd4>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0xbc>
 800254a:	4b72      	ldr	r3, [pc, #456]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a71      	ldr	r2, [pc, #452]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b6f      	ldr	r3, [pc, #444]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a6e      	ldr	r2, [pc, #440]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0xd4>
 8002564:	4b6b      	ldr	r3, [pc, #428]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a6a      	ldr	r2, [pc, #424]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800256a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b68      	ldr	r3, [pc, #416]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a67      	ldr	r2, [pc, #412]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe ff06 	bl	8001394 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7fe ff02 	bl	8001394 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e200      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b5d      	ldr	r3, [pc, #372]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0xe4>
 80025aa:	e014      	b.n	80025d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fef2 	bl	8001394 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7fe feee 	bl	8001394 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e1ec      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x10c>
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d063      	beq.n	80026aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e2:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ee:	4b49      	ldr	r3, [pc, #292]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d11c      	bne.n	8002634 <HAL_RCC_OscConfig+0x18c>
 80025fa:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d116      	bne.n	8002634 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_RCC_OscConfig+0x176>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e1c0      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4939      	ldr	r1, [pc, #228]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	e03a      	b.n	80026aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800263c:	4b36      	ldr	r3, [pc, #216]	; (8002718 <HAL_RCC_OscConfig+0x270>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7fe fea7 	bl	8001394 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264a:	f7fe fea3 	bl	8001394 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e1a1      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4927      	ldr	r1, [pc, #156]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]
 800267c:	e015      	b.n	80026aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267e:	4b26      	ldr	r3, [pc, #152]	; (8002718 <HAL_RCC_OscConfig+0x270>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fe86 	bl	8001394 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268c:	f7fe fe82 	bl	8001394 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e180      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d03a      	beq.n	800272c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d019      	beq.n	80026f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026be:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_RCC_OscConfig+0x274>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c4:	f7fe fe66 	bl	8001394 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026cc:	f7fe fe62 	bl	8001394 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e160      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026ea:	2001      	movs	r0, #1
 80026ec:	f000 fac4 	bl	8002c78 <RCC_Delay>
 80026f0:	e01c      	b.n	800272c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_RCC_OscConfig+0x274>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f8:	f7fe fe4c 	bl	8001394 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fe:	e00f      	b.n	8002720 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002700:	f7fe fe48 	bl	8001394 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d908      	bls.n	8002720 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e146      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	42420000 	.word	0x42420000
 800271c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	4b92      	ldr	r3, [pc, #584]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e9      	bne.n	8002700 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80a6 	beq.w	8002886 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b8b      	ldr	r3, [pc, #556]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10d      	bne.n	8002766 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	4b88      	ldr	r3, [pc, #544]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	4a87      	ldr	r2, [pc, #540]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002754:	61d3      	str	r3, [r2, #28]
 8002756:	4b85      	ldr	r3, [pc, #532]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	4b82      	ldr	r3, [pc, #520]	; (8002970 <HAL_RCC_OscConfig+0x4c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d118      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002772:	4b7f      	ldr	r3, [pc, #508]	; (8002970 <HAL_RCC_OscConfig+0x4c8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a7e      	ldr	r2, [pc, #504]	; (8002970 <HAL_RCC_OscConfig+0x4c8>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277e:	f7fe fe09 	bl	8001394 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002786:	f7fe fe05 	bl	8001394 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b64      	cmp	r3, #100	; 0x64
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e103      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	4b75      	ldr	r3, [pc, #468]	; (8002970 <HAL_RCC_OscConfig+0x4c8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d106      	bne.n	80027ba <HAL_RCC_OscConfig+0x312>
 80027ac:	4b6f      	ldr	r3, [pc, #444]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a6e      	ldr	r2, [pc, #440]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	e02d      	b.n	8002816 <HAL_RCC_OscConfig+0x36e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0x334>
 80027c2:	4b6a      	ldr	r3, [pc, #424]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4a69      	ldr	r2, [pc, #420]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6213      	str	r3, [r2, #32]
 80027ce:	4b67      	ldr	r3, [pc, #412]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	4a66      	ldr	r2, [pc, #408]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	f023 0304 	bic.w	r3, r3, #4
 80027d8:	6213      	str	r3, [r2, #32]
 80027da:	e01c      	b.n	8002816 <HAL_RCC_OscConfig+0x36e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d10c      	bne.n	80027fe <HAL_RCC_OscConfig+0x356>
 80027e4:	4b61      	ldr	r3, [pc, #388]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a60      	ldr	r2, [pc, #384]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	4b5e      	ldr	r3, [pc, #376]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4a5d      	ldr	r2, [pc, #372]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6213      	str	r3, [r2, #32]
 80027fc:	e00b      	b.n	8002816 <HAL_RCC_OscConfig+0x36e>
 80027fe:	4b5b      	ldr	r3, [pc, #364]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a5a      	ldr	r2, [pc, #360]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6213      	str	r3, [r2, #32]
 800280a:	4b58      	ldr	r3, [pc, #352]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4a57      	ldr	r2, [pc, #348]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d015      	beq.n	800284a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7fe fdb9 	bl	8001394 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002824:	e00a      	b.n	800283c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7fe fdb5 	bl	8001394 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e0b1      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283c:	4b4b      	ldr	r3, [pc, #300]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ee      	beq.n	8002826 <HAL_RCC_OscConfig+0x37e>
 8002848:	e014      	b.n	8002874 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284a:	f7fe fda3 	bl	8001394 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7fe fd9f 	bl	8001394 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e09b      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002868:	4b40      	ldr	r3, [pc, #256]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ee      	bne.n	8002852 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d105      	bne.n	8002886 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287a:	4b3c      	ldr	r3, [pc, #240]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	4a3b      	ldr	r2, [pc, #236]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002884:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 8087 	beq.w	800299e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002890:	4b36      	ldr	r3, [pc, #216]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b08      	cmp	r3, #8
 800289a:	d061      	beq.n	8002960 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d146      	bne.n	8002932 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a4:	4b33      	ldr	r3, [pc, #204]	; (8002974 <HAL_RCC_OscConfig+0x4cc>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7fe fd73 	bl	8001394 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b2:	f7fe fd6f 	bl	8001394 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e06d      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c4:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d108      	bne.n	80028ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	4921      	ldr	r1, [pc, #132]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ec:	4b1f      	ldr	r3, [pc, #124]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a19      	ldr	r1, [r3, #32]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	430b      	orrs	r3, r1
 80028fe:	491b      	ldr	r1, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x4cc>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe fd43 	bl	8001394 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002912:	f7fe fd3f 	bl	8001394 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e03d      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x46a>
 8002930:	e035      	b.n	800299e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_RCC_OscConfig+0x4cc>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe fd2c 	bl	8001394 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fd28 	bl	8001394 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e026      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x498>
 800295e:	e01e      	b.n	800299e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d107      	bne.n	8002978 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e019      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
 800296c:	40021000 	.word	0x40021000
 8002970:	40007000 	.word	0x40007000
 8002974:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_OscConfig+0x500>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	429a      	cmp	r2, r3
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000

080029ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0d0      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029c0:	4b6a      	ldr	r3, [pc, #424]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d910      	bls.n	80029f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 0207 	bic.w	r2, r3, #7
 80029d6:	4965      	ldr	r1, [pc, #404]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b63      	ldr	r3, [pc, #396]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0b8      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a08:	4b59      	ldr	r3, [pc, #356]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a58      	ldr	r2, [pc, #352]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a20:	4b53      	ldr	r3, [pc, #332]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a52      	ldr	r2, [pc, #328]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2c:	4b50      	ldr	r3, [pc, #320]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	494d      	ldr	r1, [pc, #308]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d040      	beq.n	8002acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b47      	ldr	r3, [pc, #284]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d115      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e07f      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6a:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e073      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06b      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8a:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f023 0203 	bic.w	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4936      	ldr	r1, [pc, #216]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a9c:	f7fe fc7a 	bl	8001394 <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa4:	f7fe fc76 	bl	8001394 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e053      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 020c 	and.w	r2, r3, #12
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d1eb      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d210      	bcs.n	8002afc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 0207 	bic.w	r2, r3, #7
 8002ae2:	4922      	ldr	r1, [pc, #136]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e032      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4916      	ldr	r1, [pc, #88]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	490e      	ldr	r1, [pc, #56]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b3a:	f000 f821 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	490a      	ldr	r1, [pc, #40]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4c:	5ccb      	ldrb	r3, [r1, r3]
 8002b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b52:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <HAL_RCC_ClockConfig+0x1cc>)
 8002b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_RCC_ClockConfig+0x1d0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fbd8 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40022000 	.word	0x40022000
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08003a24 	.word	0x08003a24
 8002b78:	2000003c 	.word	0x2000003c
 8002b7c:	20000040 	.word	0x20000040

08002b80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b80:	b490      	push	{r4, r7}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b86:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xac>)
 8002b88:	1d3c      	adds	r4, r7, #4
 8002b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b90:	f240 2301 	movw	r3, #513	; 0x201
 8002b94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x46>
 8002bbe:	e02b      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bc0:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bc2:	623b      	str	r3, [r7, #32]
      break;
 8002bc4:	e02b      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	0c9b      	lsrs	r3, r3, #18
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3328      	adds	r3, #40	; 0x28
 8002bd0:	443b      	add	r3, r7
 8002bd2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bd6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d012      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002be2:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	0c5b      	lsrs	r3, r3, #17
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	3328      	adds	r3, #40	; 0x28
 8002bee:	443b      	add	r3, r7
 8002bf0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bf4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bfa:	fb03 f202 	mul.w	r2, r3, r2
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
 8002c06:	e004      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c0c:	fb02 f303 	mul.w	r3, r2, r3
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	623b      	str	r3, [r7, #32]
      break;
 8002c16:	e002      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c1a:	623b      	str	r3, [r7, #32]
      break;
 8002c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3728      	adds	r7, #40	; 0x28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc90      	pop	{r4, r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	080032a8 	.word	0x080032a8
 8002c30:	40021000 	.word	0x40021000
 8002c34:	007a1200 	.word	0x007a1200
 8002c38:	003d0900 	.word	0x003d0900

08002c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c40:	4b02      	ldr	r3, [pc, #8]	; (8002c4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	2000003c 	.word	0x2000003c

08002c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c54:	f7ff fff2 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4903      	ldr	r1, [pc, #12]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08003a34 	.word	0x08003a34

08002c78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <RCC_Delay+0x34>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <RCC_Delay+0x38>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0a5b      	lsrs	r3, r3, #9
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c94:	bf00      	nop
  }
  while (Delay --);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1e5a      	subs	r2, r3, #1
 8002c9a:	60fa      	str	r2, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f9      	bne.n	8002c94 <RCC_Delay+0x1c>
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	2000003c 	.word	0x2000003c
 8002cb0:	10624dd3 	.word	0x10624dd3

08002cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e041      	b.n	8002d4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe fa62 	bl	80011a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	f000 f93c 	bl	8002f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d001      	beq.n	8002d6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e032      	b.n	8002dd2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <HAL_TIM_Base_Start+0x88>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d00e      	beq.n	8002d9c <HAL_TIM_Base_Start+0x48>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d86:	d009      	beq.n	8002d9c <HAL_TIM_Base_Start+0x48>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <HAL_TIM_Base_Start+0x8c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <HAL_TIM_Base_Start+0x48>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <HAL_TIM_Base_Start+0x90>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d111      	bne.n	8002dc0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d010      	beq.n	8002dd0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dbe:	e007      	b.n	8002dd0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40000800 	.word	0x40000800

08002de8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_TIM_ConfigClockSource+0x18>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e0b3      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x180>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e38:	d03e      	beq.n	8002eb8 <HAL_TIM_ConfigClockSource+0xd0>
 8002e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e3e:	f200 8087 	bhi.w	8002f50 <HAL_TIM_ConfigClockSource+0x168>
 8002e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e46:	f000 8085 	beq.w	8002f54 <HAL_TIM_ConfigClockSource+0x16c>
 8002e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4e:	d87f      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x168>
 8002e50:	2b70      	cmp	r3, #112	; 0x70
 8002e52:	d01a      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0xa2>
 8002e54:	2b70      	cmp	r3, #112	; 0x70
 8002e56:	d87b      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x168>
 8002e58:	2b60      	cmp	r3, #96	; 0x60
 8002e5a:	d050      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x116>
 8002e5c:	2b60      	cmp	r3, #96	; 0x60
 8002e5e:	d877      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x168>
 8002e60:	2b50      	cmp	r3, #80	; 0x50
 8002e62:	d03c      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0xf6>
 8002e64:	2b50      	cmp	r3, #80	; 0x50
 8002e66:	d873      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x168>
 8002e68:	2b40      	cmp	r3, #64	; 0x40
 8002e6a:	d058      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0x136>
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d86f      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x168>
 8002e70:	2b30      	cmp	r3, #48	; 0x30
 8002e72:	d064      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x156>
 8002e74:	2b30      	cmp	r3, #48	; 0x30
 8002e76:	d86b      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x168>
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d060      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x156>
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d867      	bhi.n	8002f50 <HAL_TIM_ConfigClockSource+0x168>
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d05c      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x156>
 8002e84:	2b10      	cmp	r3, #16
 8002e86:	d05a      	beq.n	8002f3e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e88:	e062      	b.n	8002f50 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6899      	ldr	r1, [r3, #8]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f000 f942 	bl	8003122 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002eac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	609a      	str	r2, [r3, #8]
      break;
 8002eb6:	e04e      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6899      	ldr	r1, [r3, #8]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f000 f92b 	bl	8003122 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eda:	609a      	str	r2, [r3, #8]
      break;
 8002edc:	e03b      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f000 f8a2 	bl	8003034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2150      	movs	r1, #80	; 0x50
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f8f9 	bl	80030ee <TIM_ITRx_SetConfig>
      break;
 8002efc:	e02b      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f000 f8c0 	bl	8003090 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2160      	movs	r1, #96	; 0x60
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f8e9 	bl	80030ee <TIM_ITRx_SetConfig>
      break;
 8002f1c:	e01b      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f000 f882 	bl	8003034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2140      	movs	r1, #64	; 0x40
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f8d9 	bl	80030ee <TIM_ITRx_SetConfig>
      break;
 8002f3c:	e00b      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f000 f8d0 	bl	80030ee <TIM_ITRx_SetConfig>
        break;
 8002f4e:	e002      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f50:	bf00      	nop
 8002f52:	e000      	b.n	8002f56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a29      	ldr	r2, [pc, #164]	; (8003028 <TIM_Base_SetConfig+0xb8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00b      	beq.n	8002fa0 <TIM_Base_SetConfig+0x30>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d007      	beq.n	8002fa0 <TIM_Base_SetConfig+0x30>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a26      	ldr	r2, [pc, #152]	; (800302c <TIM_Base_SetConfig+0xbc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <TIM_Base_SetConfig+0x30>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a25      	ldr	r2, [pc, #148]	; (8003030 <TIM_Base_SetConfig+0xc0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d108      	bne.n	8002fb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <TIM_Base_SetConfig+0xb8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <TIM_Base_SetConfig+0x62>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc0:	d007      	beq.n	8002fd2 <TIM_Base_SetConfig+0x62>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	; (800302c <TIM_Base_SetConfig+0xbc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <TIM_Base_SetConfig+0x62>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a18      	ldr	r2, [pc, #96]	; (8003030 <TIM_Base_SetConfig+0xc0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d108      	bne.n	8002fe4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a07      	ldr	r2, [pc, #28]	; (8003028 <TIM_Base_SetConfig+0xb8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d103      	bne.n	8003018 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	615a      	str	r2, [r3, #20]
}
 800301e:	bf00      	nop
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	40012c00 	.word	0x40012c00
 800302c:	40000400 	.word	0x40000400
 8003030:	40000800 	.word	0x40000800

08003034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f023 0201 	bic.w	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800305e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f023 030a 	bic.w	r3, r3, #10
 8003070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f023 0210 	bic.w	r2, r3, #16
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	031b      	lsls	r3, r3, #12
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	621a      	str	r2, [r3, #32]
}
 80030e4:	bf00      	nop
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr

080030ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b085      	sub	sp, #20
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	f043 0307 	orr.w	r3, r3, #7
 8003110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	609a      	str	r2, [r3, #8]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003122:	b480      	push	{r7}
 8003124:	b087      	sub	sp, #28
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800313c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	021a      	lsls	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	431a      	orrs	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4313      	orrs	r3, r2
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	609a      	str	r2, [r3, #8]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003174:	2302      	movs	r3, #2
 8003176:	e046      	b.n	8003206 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a16      	ldr	r2, [pc, #88]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00e      	beq.n	80031da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c4:	d009      	beq.n	80031da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a10      	ldr	r2, [pc, #64]	; (8003218 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d10c      	bne.n	80031f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40000400 	.word	0x40000400
 8003218:	40000800 	.word	0x40000800

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	2600      	movs	r6, #0
 8003220:	4d0c      	ldr	r5, [pc, #48]	; (8003254 <__libc_init_array+0x38>)
 8003222:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003224:	1b64      	subs	r4, r4, r5
 8003226:	10a4      	asrs	r4, r4, #2
 8003228:	42a6      	cmp	r6, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	f000 f822 	bl	8003274 <_init>
 8003230:	2600      	movs	r6, #0
 8003232:	4d0a      	ldr	r5, [pc, #40]	; (800325c <__libc_init_array+0x40>)
 8003234:	4c0a      	ldr	r4, [pc, #40]	; (8003260 <__libc_init_array+0x44>)
 8003236:	1b64      	subs	r4, r4, r5
 8003238:	10a4      	asrs	r4, r4, #2
 800323a:	42a6      	cmp	r6, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	f855 3b04 	ldr.w	r3, [r5], #4
 8003244:	4798      	blx	r3
 8003246:	3601      	adds	r6, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	f855 3b04 	ldr.w	r3, [r5], #4
 800324e:	4798      	blx	r3
 8003250:	3601      	adds	r6, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	08003a3c 	.word	0x08003a3c
 8003258:	08003a3c 	.word	0x08003a3c
 800325c:	08003a3c 	.word	0x08003a3c
 8003260:	08003a40 	.word	0x08003a40

08003264 <memset>:
 8003264:	4603      	mov	r3, r0
 8003266:	4402      	add	r2, r0
 8003268:	4293      	cmp	r3, r2
 800326a:	d100      	bne.n	800326e <memset+0xa>
 800326c:	4770      	bx	lr
 800326e:	f803 1b01 	strb.w	r1, [r3], #1
 8003272:	e7f9      	b.n	8003268 <memset+0x4>

08003274 <_init>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	bf00      	nop
 8003278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327a:	bc08      	pop	{r3}
 800327c:	469e      	mov	lr, r3
 800327e:	4770      	bx	lr

08003280 <_fini>:
 8003280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003282:	bf00      	nop
 8003284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003286:	bc08      	pop	{r3}
 8003288:	469e      	mov	lr, r3
 800328a:	4770      	bx	lr
