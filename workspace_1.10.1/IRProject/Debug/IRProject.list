
IRProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017d8  08004de4  08004de4  00014de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065bc  080065bc  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080065bc  080065bc  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065bc  080065bc  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065bc  080065bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065c0  080065c0  000165c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080065c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000080  08006644  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  08006644  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca1d  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002117  00000000  00000000  0002cac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0002ebe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  0002f9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b13  00000000  00000000  000306f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cb0  00000000  00000000  00049203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b080  00000000  00000000  00059eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4f33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ffc  00000000  00000000  000e4f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08004dcc 	.word	0x08004dcc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08004dcc 	.word	0x08004dcc

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	3a01      	subs	r2, #1
 8000a42:	bf28      	it	cs
 8000a44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a48:	d2ed      	bcs.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__aeabi_f2uiz>:
 8000e44:	0042      	lsls	r2, r0, #1
 8000e46:	d20e      	bcs.n	8000e66 <__aeabi_f2uiz+0x22>
 8000e48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e4c:	d30b      	bcc.n	8000e66 <__aeabi_f2uiz+0x22>
 8000e4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e56:	d409      	bmi.n	8000e6c <__aeabi_f2uiz+0x28>
 8000e58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e60:	fa23 f002 	lsr.w	r0, r3, r2
 8000e64:	4770      	bx	lr
 8000e66:	f04f 0000 	mov.w	r0, #0
 8000e6a:	4770      	bx	lr
 8000e6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e70:	d101      	bne.n	8000e76 <__aeabi_f2uiz+0x32>
 8000e72:	0242      	lsls	r2, r0, #9
 8000e74:	d102      	bne.n	8000e7c <__aeabi_f2uiz+0x38>
 8000e76:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7a:	4770      	bx	lr
 8000e7c:	f04f 0000 	mov.w	r0, #0
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <DHT11_Start>:
float RH = 0;
uint8_t TFI = 0;
uint8_t TFD = 0;
int Maxtemperature = 30;

uint8_t DHT11_Start(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
	GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	482c      	ldr	r0, [pc, #176]	; (8000f64 <DHT11_Start+0xe0>)
 8000eb2:	f001 fcbf 	bl	8002834 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ebc:	4829      	ldr	r0, [pc, #164]	; (8000f64 <DHT11_Start+0xe0>)
 8000ebe:	f001 fe54 	bl	8002b6a <HAL_GPIO_WritePin>
	HAL_Delay(20);   // wait for 20ms
 8000ec2:	2014      	movs	r0, #20
 8000ec4:	f001 fb84 	bl	80025d0 <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ece:	4825      	ldr	r0, [pc, #148]	; (8000f64 <DHT11_Start+0xe0>)
 8000ed0:	f001 fe4b 	bl	8002b6a <HAL_GPIO_WritePin>
	microDelay(30);   // wait for 30us
 8000ed4:	201e      	movs	r0, #30
 8000ed6:	f000 fd03 	bl	80018e0 <microDelay>
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	481f      	ldr	r0, [pc, #124]	; (8000f64 <DHT11_Start+0xe0>)
 8000ee8:	f001 fca4 	bl	8002834 <HAL_GPIO_Init>
	microDelay(40);
 8000eec:	2028      	movs	r0, #40	; 0x28
 8000eee:	f000 fcf7 	bl	80018e0 <microDelay>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8000ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef6:	481b      	ldr	r0, [pc, #108]	; (8000f64 <DHT11_Start+0xe0>)
 8000ef8:	f001 fe20 	bl	8002b3c <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10c      	bne.n	8000f1c <DHT11_Start+0x98>
		microDelay(80);
 8000f02:	2050      	movs	r0, #80	; 0x50
 8000f04:	f000 fcec 	bl	80018e0 <microDelay>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000f08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0c:	4815      	ldr	r0, [pc, #84]	; (8000f64 <DHT11_Start+0xe0>)
 8000f0e:	f001 fe15 	bl	8002b3c <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <DHT11_Start+0x98>
			Response = 1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	75fb      	strb	r3, [r7, #23]
	}
	pMillis = HAL_GetTick();
 8000f1c:	f001 fb4e 	bl	80025bc <HAL_GetTick>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a11      	ldr	r2, [pc, #68]	; (8000f68 <DHT11_Start+0xe4>)
 8000f24:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 8000f26:	f001 fb49 	bl	80025bc <HAL_GetTick>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <DHT11_Start+0xe8>)
 8000f2e:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8000f30:	e004      	b.n	8000f3c <DHT11_Start+0xb8>
		cMillis = HAL_GetTick();
 8000f32:	f001 fb43 	bl	80025bc <HAL_GetTick>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a0c      	ldr	r2, [pc, #48]	; (8000f6c <DHT11_Start+0xe8>)
 8000f3a:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8000f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f40:	4808      	ldr	r0, [pc, #32]	; (8000f64 <DHT11_Start+0xe0>)
 8000f42:	f001 fdfb 	bl	8002b3c <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d006      	beq.n	8000f5a <DHT11_Start+0xd6>
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <DHT11_Start+0xe4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	1c9a      	adds	r2, r3, #2
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <DHT11_Start+0xe8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d8eb      	bhi.n	8000f32 <DHT11_Start+0xae>
	}
	return Response;
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40010800 	.word	0x40010800
 8000f68:	200000a4 	.word	0x200000a4
 8000f6c:	200000a8 	.word	0x200000a8

08000f70 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
	uint8_t a, b;
	for (a = 0; a < 8; a++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]
 8000f7a:	e066      	b.n	800104a <DHT11_Read+0xda>
		pMillis = HAL_GetTick();
 8000f7c:	f001 fb1e 	bl	80025bc <HAL_GetTick>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a36      	ldr	r2, [pc, #216]	; (800105c <DHT11_Read+0xec>)
 8000f84:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8000f86:	f001 fb19 	bl	80025bc <HAL_GetTick>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a34      	ldr	r2, [pc, #208]	; (8001060 <DHT11_Read+0xf0>)
 8000f8e:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000f90:	e004      	b.n	8000f9c <DHT11_Read+0x2c>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
			cMillis = HAL_GetTick();
 8000f92:	f001 fb13 	bl	80025bc <HAL_GetTick>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a31      	ldr	r2, [pc, #196]	; (8001060 <DHT11_Read+0xf0>)
 8000f9a:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa0:	4830      	ldr	r0, [pc, #192]	; (8001064 <DHT11_Read+0xf4>)
 8000fa2:	f001 fdcb 	bl	8002b3c <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d106      	bne.n	8000fba <DHT11_Read+0x4a>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <DHT11_Read+0xec>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	1c9a      	adds	r2, r3, #2
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <DHT11_Read+0xf0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d8eb      	bhi.n	8000f92 <DHT11_Read+0x22>
		}
		microDelay(40);   // wait for 40 us
 8000fba:	2028      	movs	r0, #40	; 0x28
 8000fbc:	f000 fc90 	bl	80018e0 <microDelay>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc4:	4827      	ldr	r0, [pc, #156]	; (8001064 <DHT11_Read+0xf4>)
 8000fc6:	f001 fdb9 	bl	8002b3c <HAL_GPIO_ReadPin>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10e      	bne.n	8000fee <DHT11_Read+0x7e>
			b &= ~(1 << (7 - a));
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	b25a      	sxtb	r2, r3
 8000fe2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	71bb      	strb	r3, [r7, #6]
 8000fec:	e00b      	b.n	8001006 <DHT11_Read+0x96>
		else
			b |= (1 << (7 - a));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f1c3 0307 	rsb	r3, r3, #7
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	b25a      	sxtb	r2, r3
 8000ffc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001000:	4313      	orrs	r3, r2
 8001002:	b25b      	sxtb	r3, r3
 8001004:	71bb      	strb	r3, [r7, #6]
		pMillis = HAL_GetTick();
 8001006:	f001 fad9 	bl	80025bc <HAL_GetTick>
 800100a:	4603      	mov	r3, r0
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <DHT11_Read+0xec>)
 800100e:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8001010:	f001 fad4 	bl	80025bc <HAL_GetTick>
 8001014:	4603      	mov	r3, r0
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <DHT11_Read+0xf0>)
 8001018:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800101a:	e004      	b.n	8001026 <DHT11_Read+0xb6>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
			cMillis = HAL_GetTick();
 800101c:	f001 face 	bl	80025bc <HAL_GetTick>
 8001020:	4603      	mov	r3, r0
 8001022:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <DHT11_Read+0xf0>)
 8001024:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <DHT11_Read+0xf4>)
 800102c:	f001 fd86 	bl	8002b3c <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <DHT11_Read+0xd4>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <DHT11_Read+0xec>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	1c9a      	adds	r2, r3, #2
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <DHT11_Read+0xf0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8eb      	bhi.n	800101c <DHT11_Read+0xac>
	for (a = 0; a < 8; a++) {
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	3301      	adds	r3, #1
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b07      	cmp	r3, #7
 800104e:	d995      	bls.n	8000f7c <DHT11_Read+0xc>
		}
	}
	return b;
 8001050:	79bb      	ldrb	r3, [r7, #6]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200000a4 	.word	0x200000a4
 8001060:	200000a8 	.word	0x200000a8
 8001064:	40010800 	.word	0x40010800

08001068 <Check_IN>:

struct DHTSS1 Check_IN() {
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
	RHI = DHT11_Read(); // Relative humidity integral
 800106e:	f7ff ff7f 	bl	8000f70 <DHT11_Read>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	4b62      	ldr	r3, [pc, #392]	; (8001200 <Check_IN+0x198>)
 8001078:	701a      	strb	r2, [r3, #0]
	RHD = DHT11_Read(); // Relative humidity decimal
 800107a:	f7ff ff79 	bl	8000f70 <DHT11_Read>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b60      	ldr	r3, [pc, #384]	; (8001204 <Check_IN+0x19c>)
 8001084:	701a      	strb	r2, [r3, #0]
	TCI = DHT11_Read(); // Menu Celsius integral
 8001086:	f7ff ff73 	bl	8000f70 <DHT11_Read>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b5e      	ldr	r3, [pc, #376]	; (8001208 <Check_IN+0x1a0>)
 8001090:	701a      	strb	r2, [r3, #0]
	TCD = DHT11_Read(); // Celsius decimal
 8001092:	f7ff ff6d 	bl	8000f70 <DHT11_Read>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	4b5c      	ldr	r3, [pc, #368]	; (800120c <Check_IN+0x1a4>)
 800109c:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read(); // Check sum
 800109e:	f7ff ff67 	bl	8000f70 <DHT11_Read>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b5a      	ldr	r3, [pc, #360]	; (8001210 <Check_IN+0x1a8>)
 80010a8:	701a      	strb	r2, [r3, #0]

	struct DHTSS1 Ret;

	if (RHI + RHD + TCI + TCD == SUM) {
 80010aa:	4b55      	ldr	r3, [pc, #340]	; (8001200 <Check_IN+0x198>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b54      	ldr	r3, [pc, #336]	; (8001204 <Check_IN+0x19c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	4a54      	ldr	r2, [pc, #336]	; (8001208 <Check_IN+0x1a0>)
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a53      	ldr	r2, [pc, #332]	; (800120c <Check_IN+0x1a4>)
 80010be:	7812      	ldrb	r2, [r2, #0]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a53      	ldr	r2, [pc, #332]	; (8001210 <Check_IN+0x1a8>)
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	4293      	cmp	r3, r2
 80010c8:	f040 8087 	bne.w	80011da <Check_IN+0x172>
		/// Can use RHI and TCI for any purposes if whole number only needed
		tCelsius = (float) TCI + (float) (TCD / 10.0);
 80010cc:	4b4e      	ldr	r3, [pc, #312]	; (8001208 <Check_IN+0x1a0>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fd0f 	bl	8000af4 <__aeabi_ui2f>
 80010d6:	4604      	mov	r4, r0
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <Check_IN+0x1a4>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f987 	bl	80003f0 <__aeabi_i2d>
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <Check_IN+0x1ac>)
 80010e8:	f7ff fb16 	bl	8000718 <__aeabi_ddiv>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fbf8 	bl	80008e8 <__aeabi_d2f>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4619      	mov	r1, r3
 80010fc:	4620      	mov	r0, r4
 80010fe:	f7ff fc49 	bl	8000994 <__addsf3>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	4b44      	ldr	r3, [pc, #272]	; (8001218 <Check_IN+0x1b0>)
 8001108:	601a      	str	r2, [r3, #0]
		tFahrenheit = tCelsius * 9 / 5 + 32;
 800110a:	4b43      	ldr	r3, [pc, #268]	; (8001218 <Check_IN+0x1b0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4943      	ldr	r1, [pc, #268]	; (800121c <Check_IN+0x1b4>)
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fd47 	bl	8000ba4 <__aeabi_fmul>
 8001116:	4603      	mov	r3, r0
 8001118:	4941      	ldr	r1, [pc, #260]	; (8001220 <Check_IN+0x1b8>)
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fdf6 	bl	8000d0c <__aeabi_fdiv>
 8001120:	4603      	mov	r3, r0
 8001122:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fc34 	bl	8000994 <__addsf3>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b3c      	ldr	r3, [pc, #240]	; (8001224 <Check_IN+0x1bc>)
 8001132:	601a      	str	r2, [r3, #0]
		RH = (float) RHI + (float) (RHD / 10.0);
 8001134:	4b32      	ldr	r3, [pc, #200]	; (8001200 <Check_IN+0x198>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fcdb 	bl	8000af4 <__aeabi_ui2f>
 800113e:	4604      	mov	r4, r0
 8001140:	4b30      	ldr	r3, [pc, #192]	; (8001204 <Check_IN+0x19c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f953 	bl	80003f0 <__aeabi_i2d>
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b31      	ldr	r3, [pc, #196]	; (8001214 <Check_IN+0x1ac>)
 8001150:	f7ff fae2 	bl	8000718 <__aeabi_ddiv>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fbc4 	bl	80008e8 <__aeabi_d2f>
 8001160:	4603      	mov	r3, r0
 8001162:	4619      	mov	r1, r3
 8001164:	4620      	mov	r0, r4
 8001166:	f7ff fc15 	bl	8000994 <__addsf3>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <Check_IN+0x1c0>)
 8001170:	601a      	str	r2, [r3, #0]
		//Can use tCelsius, tFahrenheit and RH for any purposes
		TFI = tFahrenheit;  // Fahrenheit integral
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <Check_IN+0x1bc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fe64 	bl	8000e44 <__aeabi_f2uiz>
 800117c:	4603      	mov	r3, r0
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <Check_IN+0x1c4>)
 8001182:	701a      	strb	r2, [r3, #0]
		TFD = tFahrenheit * 10 - TFI * 10; // Fahrenheit decimal
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <Check_IN+0x1bc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4929      	ldr	r1, [pc, #164]	; (8001230 <Check_IN+0x1c8>)
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fd0a 	bl	8000ba4 <__aeabi_fmul>
 8001190:	4603      	mov	r3, r0
 8001192:	461c      	mov	r4, r3
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <Check_IN+0x1c4>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fcaa 	bl	8000afc <__aeabi_i2f>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4619      	mov	r1, r3
 80011ac:	4620      	mov	r0, r4
 80011ae:	f7ff fbef 	bl	8000990 <__aeabi_fsub>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fe45 	bl	8000e44 <__aeabi_f2uiz>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <Check_IN+0x1cc>)
 80011c0:	701a      	strb	r2, [r3, #0]
		Ret.TFD = TFD;
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <Check_IN+0x1cc>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	70bb      	strb	r3, [r7, #2]
		Ret.TFI = TFI;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <Check_IN+0x1c4>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	70fb      	strb	r3, [r7, #3]
		Ret.TCI = TCI;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <Check_IN+0x1a0>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	703b      	strb	r3, [r7, #0]
		Ret.TCD = TCD;
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <Check_IN+0x1a4>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	707b      	strb	r3, [r7, #1]


		//if (TFI > Maxtemperature) Ret.working = 1;
	}
	return Ret;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	2300      	movs	r3, #0
 80011e0:	793a      	ldrb	r2, [r7, #4]
 80011e2:	f362 0307 	bfi	r3, r2, #0, #8
 80011e6:	797a      	ldrb	r2, [r7, #5]
 80011e8:	f362 230f 	bfi	r3, r2, #8, #8
 80011ec:	79ba      	ldrb	r2, [r7, #6]
 80011ee:	f362 4317 	bfi	r3, r2, #16, #8
 80011f2:	79fa      	ldrb	r2, [r7, #7]
 80011f4:	f362 631f 	bfi	r3, r2, #24, #8
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd90      	pop	{r4, r7, pc}
 8001200:	2000009c 	.word	0x2000009c
 8001204:	2000009d 	.word	0x2000009d
 8001208:	2000009e 	.word	0x2000009e
 800120c:	2000009f 	.word	0x2000009f
 8001210:	200000a0 	.word	0x200000a0
 8001214:	40240000 	.word	0x40240000
 8001218:	200000ac 	.word	0x200000ac
 800121c:	41100000 	.word	0x41100000
 8001220:	40a00000 	.word	0x40a00000
 8001224:	200000b0 	.word	0x200000b0
 8001228:	200000b4 	.word	0x200000b4
 800122c:	200000b8 	.word	0x200000b8
 8001230:	41200000 	.word	0x41200000
 8001234:	200000b9 	.word	0x200000b9

08001238 <PrintLCDByFont>:
#include "DrowingLCD.h"
#include "DHT11.h"

//Base Method add here only
void PrintLCDByFont(uint16_t X, uint16_t Y, char *str, FontDef_t *Font,
		int IndexColor) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60ba      	str	r2, [r7, #8]
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4603      	mov	r3, r0
 8001244:	81fb      	strh	r3, [r7, #14]
 8001246:	460b      	mov	r3, r1
 8001248:	81bb      	strh	r3, [r7, #12]
	SSD1306_GotoXY(X, Y);
 800124a:	89ba      	ldrh	r2, [r7, #12]
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f000 feb9 	bl	8001fc8 <SSD1306_GotoXY>
	SSD1306_Puts(str, Font,
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf14      	ite	ne
 800125c:	2301      	movne	r3, #1
 800125e:	2300      	moveq	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	461a      	mov	r2, r3
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	68b8      	ldr	r0, [r7, #8]
 8001268:	f000 ff44 	bl	80020f4 <SSD1306_Puts>
			(IndexColor == 0) ? SSD1306_COLOR_BLACK : SSD1306_COLOR_WHITE);
}
 800126c:	bf00      	nop
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <PrintLCD>:
void PrintLCD(uint16_t X, uint16_t Y, char *str, int IndexColor) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60ba      	str	r2, [r7, #8]
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4603      	mov	r3, r0
 8001280:	81fb      	strh	r3, [r7, #14]
 8001282:	460b      	mov	r3, r1
 8001284:	81bb      	strh	r3, [r7, #12]
	SSD1306_GotoXY(X, Y);
 8001286:	89ba      	ldrh	r2, [r7, #12]
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fe9b 	bl	8001fc8 <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_7x10,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf14      	ite	ne
 8001298:	2301      	movne	r3, #1
 800129a:	2300      	moveq	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	4903      	ldr	r1, [pc, #12]	; (80012b0 <PrintLCD+0x3c>)
 80012a2:	68b8      	ldr	r0, [r7, #8]
 80012a4:	f000 ff26 	bl	80020f4 <SSD1306_Puts>
			(IndexColor == 0) ? SSD1306_COLOR_BLACK : SSD1306_COLOR_WHITE);
}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000000 	.word	0x20000000

080012b4 <AddTotal>:

void AddTotal(char *str, int BagOrSmail) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	if (BagOrSmail == 0) {
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d108      	bne.n	80012d6 <AddTotal+0x22>
		PrintLCDByFont(20, 0, str, &Font_7x10, 1);
 80012c4:	2301      	movs	r3, #1
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <AddTotal+0x3c>)
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	2100      	movs	r1, #0
 80012ce:	2014      	movs	r0, #20
 80012d0:	f7ff ffb2 	bl	8001238 <PrintLCDByFont>
	} else {
		PrintLCDByFont(20, 0, str, &Font_11x18, 1);
	}
}
 80012d4:	e007      	b.n	80012e6 <AddTotal+0x32>
		PrintLCDByFont(20, 0, str, &Font_11x18, 1);
 80012d6:	2301      	movs	r3, #1
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <AddTotal+0x40>)
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	2100      	movs	r1, #0
 80012e0:	2014      	movs	r0, #20
 80012e2:	f7ff ffa9 	bl	8001238 <PrintLCDByFont>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000008 	.word	0x20000008

080012f8 <GetList>:

//Main Method
void GetList(int *Index, int *IndexMenu) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b090      	sub	sp, #64	; 0x40
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]

	int MyValueIndex = *Index;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
	int MyValueMainMenu = *IndexMenu;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	633b      	str	r3, [r7, #48]	; 0x30

	char *NameSol[10] =
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2228      	movs	r2, #40	; 0x28
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f003 f8d6 	bl	80044c8 <memset>
 800131c:	4b41      	ldr	r3, [pc, #260]	; (8001424 <GetList+0x12c>)
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	4b41      	ldr	r3, [pc, #260]	; (8001428 <GetList+0x130>)
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	4b41      	ldr	r3, [pc, #260]	; (800142c <GetList+0x134>)
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	4b41      	ldr	r3, [pc, #260]	; (8001430 <GetList+0x138>)
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	4b41      	ldr	r3, [pc, #260]	; (8001434 <GetList+0x13c>)
 800132e:	61bb      	str	r3, [r7, #24]
 8001330:	4b41      	ldr	r3, [pc, #260]	; (8001438 <GetList+0x140>)
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	4b41      	ldr	r3, [pc, #260]	; (800143c <GetList+0x144>)
 8001336:	623b      	str	r3, [r7, #32]
			"Motor                        ",// = 5
			"About                        ",// = 6
			"ShutDown                     " // = 7
	};

	if (MyValueMainMenu == 0) {
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10a      	bne.n	8001354 <GetList+0x5c>
		AddTotal("Menu                       ", 1);
 800133e:	2101      	movs	r1, #1
 8001340:	483f      	ldr	r0, [pc, #252]	; (8001440 <GetList+0x148>)
 8001342:	f7ff ffb7 	bl	80012b4 <AddTotal>
		GetListMainMenus(MyValueIndex, NameSol);
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	4619      	mov	r1, r3
 800134c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800134e:	f000 f87b 	bl	8001448 <GetListMainMenus>
 8001352:	e061      	b.n	8001418 <GetList+0x120>

	} else if (MyValueMainMenu == 1) {
 8001354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001356:	2b01      	cmp	r3, #1
 8001358:	d10e      	bne.n	8001378 <GetList+0x80>
		AddTotal(NameSol[MyValueMainMenu - 1], 0);
 800135a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135c:	3b01      	subs	r3, #1
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	3338      	adds	r3, #56	; 0x38
 8001362:	443b      	add	r3, r7
 8001364:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ffa2 	bl	80012b4 <AddTotal>
		GetListLed(MyValueIndex);
 8001370:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001372:	f000 f8b1 	bl	80014d8 <GetListLed>
 8001376:	e04f      	b.n	8001418 <GetList+0x120>

	} else if (MyValueMainMenu == 2) {
 8001378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137a:	2b02      	cmp	r3, #2
 800137c:	d10e      	bne.n	800139c <GetList+0xa4>
		AddTotal(NameSol[MyValueMainMenu - 1], 0);
 800137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001380:	3b01      	subs	r3, #1
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	3338      	adds	r3, #56	; 0x38
 8001386:	443b      	add	r3, r7
 8001388:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff90 	bl	80012b4 <AddTotal>
		GetListLed_RGB(MyValueIndex);
 8001394:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001396:	f000 f905 	bl	80015a4 <GetListLed_RGB>
 800139a:	e03d      	b.n	8001418 <GetList+0x120>

	} else if (MyValueMainMenu == 3) {
 800139c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d111      	bne.n	80013c6 <GetList+0xce>
		PrintLCDByFont(0, 0, NameSol[MyValueMainMenu - 1], &Font_7x10, 1);
 80013a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a4:	3b01      	subs	r3, #1
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	3338      	adds	r3, #56	; 0x38
 80013aa:	443b      	add	r3, r7
 80013ac:	f853 2c30 	ldr.w	r2, [r3, #-48]
 80013b0:	2301      	movs	r3, #1
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <GetList+0x14c>)
 80013b6:	2100      	movs	r1, #0
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff ff3d 	bl	8001238 <PrintLCDByFont>
		GetListTemperatureSensor(MyValueIndex);
 80013be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013c0:	f000 f956 	bl	8001670 <GetListTemperatureSensor>
 80013c4:	e028      	b.n	8001418 <GetList+0x120>

	} else if (MyValueMainMenu == 4) {
 80013c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d111      	bne.n	80013f0 <GetList+0xf8>
		PrintLCDByFont(
				0,
				0,
				NameSol[MyValueMainMenu - 1],
 80013cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ce:	3b01      	subs	r3, #1
		PrintLCDByFont(
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	3338      	adds	r3, #56	; 0x38
 80013d4:	443b      	add	r3, r7
 80013d6:	f853 2c30 	ldr.w	r2, [r3, #-48]
 80013da:	2301      	movs	r3, #1
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <GetList+0x14c>)
 80013e0:	2100      	movs	r1, #0
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff ff28 	bl	8001238 <PrintLCDByFont>
				&Font_7x10,
				1);
		GetListBuzzerSensor(MyValueIndex);
 80013e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013ea:	f000 f97d 	bl	80016e8 <GetListBuzzerSensor>
 80013ee:	e013      	b.n	8001418 <GetList+0x120>

	} else if (MyValueMainMenu == 6) {
 80013f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d103      	bne.n	80013fe <GetList+0x106>
		//AddTotal(NameSol[MyValueMainMenu - 1],0);
		GetListAbout(MyValueIndex);
 80013f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013f8:	f000 f998 	bl	800172c <GetListAbout>
 80013fc:	e00c      	b.n	8001418 <GetList+0x120>
	}

	//Add Here New UI here ..

	else {
		AddTotal(NameSol[MyValueMainMenu - 1], 1);
 80013fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001400:	3b01      	subs	r3, #1
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	3338      	adds	r3, #56	; 0x38
 8001406:	443b      	add	r3, r7
 8001408:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800140c:	2101      	movs	r1, #1
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff50 	bl	80012b4 <AddTotal>
		GetListSoonModel(); // [🌟]
 8001414:	f000 f994 	bl	8001740 <GetListSoonModel>
	}

	//See Any Text [🌟]
	SSD1306_UpdateScreen();
 8001418:	f000 fd32 	bl	8001e80 <SSD1306_UpdateScreen>
}
 800141c:	bf00      	nop
 800141e:	3738      	adds	r7, #56	; 0x38
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	08004de4 	.word	0x08004de4
 8001428:	08004e04 	.word	0x08004e04
 800142c:	08004e24 	.word	0x08004e24
 8001430:	08004e44 	.word	0x08004e44
 8001434:	08004e64 	.word	0x08004e64
 8001438:	08004e84 	.word	0x08004e84
 800143c:	08004ea4 	.word	0x08004ea4
 8001440:	08004ec4 	.word	0x08004ec4
 8001444:	20000000 	.word	0x20000000

08001448 <GetListMainMenus>:
void GetListMainMenus(int IndexMenu, char *str[]) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]

	char *OldValue = str[IndexMenu - 1];  // Find the value before the current
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001458:	3b01      	subs	r3, #1
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	4413      	add	r3, r2
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	617b      	str	r3, [r7, #20]
	char *Value = str[IndexMenu];         // Find the current value
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	4413      	add	r3, r2
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	613b      	str	r3, [r7, #16]
	char *NextValue = str[IndexMenu + 1]; // Find the following value
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3301      	adds	r3, #1
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	4413      	add	r3, r2
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]

	if ((IndexMenu - 1) > -1) {
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	dd06      	ble.n	8001492 <GetListMainMenus+0x4a>
		PrintLCD(0, 24, OldValue, 1);
 8001484:	2301      	movs	r3, #1
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	2118      	movs	r1, #24
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff fef2 	bl	8001274 <PrintLCD>
 8001490:	e005      	b.n	800149e <GetListMainMenus+0x56>
	} else {
		PrintLCD(0, 24, "                    ", 1);
 8001492:	2301      	movs	r3, #1
 8001494:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <GetListMainMenus+0x8c>)
 8001496:	2118      	movs	r1, #24
 8001498:	2000      	movs	r0, #0
 800149a:	f7ff feeb 	bl	8001274 <PrintLCD>
	}
	PrintLCD(0, 36, Value, 0);
 800149e:	2300      	movs	r3, #0
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	2124      	movs	r1, #36	; 0x24
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7ff fee5 	bl	8001274 <PrintLCD>
	if ((IndexMenu + 1) < 7) {
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	dc06      	bgt.n	80014be <GetListMainMenus+0x76>
		PrintLCD(0, 48, NextValue, 1);
 80014b0:	2301      	movs	r3, #1
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	2130      	movs	r1, #48	; 0x30
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fedc 	bl	8001274 <PrintLCD>
	} else {
		PrintLCD(0, 48, "                    ", 1);
	}

}
 80014bc:	e005      	b.n	80014ca <GetListMainMenus+0x82>
		PrintLCD(0, 48, "                    ", 1);
 80014be:	2301      	movs	r3, #1
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <GetListMainMenus+0x8c>)
 80014c2:	2130      	movs	r1, #48	; 0x30
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fed5 	bl	8001274 <PrintLCD>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	08004ee0 	.word	0x08004ee0

080014d8 <GetListLed>:

//Method Groups
void GetListLed(int IndexMenu) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	PrintLCD(0, 12,
			(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) ?
 80014e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e4:	4827      	ldr	r0, [pc, #156]	; (8001584 <GetListLed+0xac>)
 80014e6:	f001 fb29 	bl	8002b3c <HAL_GPIO_ReadPin>
 80014ea:	4603      	mov	r3, r0
	PrintLCD(0, 12,
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <GetListLed+0x1c>
 80014f0:	4a25      	ldr	r2, [pc, #148]	; (8001588 <GetListLed+0xb0>)
 80014f2:	e000      	b.n	80014f6 <GetListLed+0x1e>
 80014f4:	4a25      	ldr	r2, [pc, #148]	; (800158c <GetListLed+0xb4>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	dd04      	ble.n	8001506 <GetListLed+0x2e>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	dc01      	bgt.n	8001506 <GetListLed+0x2e>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <GetListLed+0x30>
 8001506:	2300      	movs	r3, #0
 8001508:	210c      	movs	r1, #12
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff feb2 	bl	8001274 <PrintLCD>
					"Led 1 = off                " :
					"Led 1 = on                 ",
			(IndexMenu <= 0 || IndexMenu >= 4) ? 0 : 1);
	PrintLCD(0, 24,
			(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == 0) ?
 8001510:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001514:	481b      	ldr	r0, [pc, #108]	; (8001584 <GetListLed+0xac>)
 8001516:	f001 fb11 	bl	8002b3c <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
	PrintLCD(0, 24,
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <GetListLed+0x4c>
 8001520:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <GetListLed+0xb8>)
 8001522:	e000      	b.n	8001526 <GetListLed+0x4e>
 8001524:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <GetListLed+0xbc>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b01      	cmp	r3, #1
 800152a:	bf14      	ite	ne
 800152c:	2301      	movne	r3, #1
 800152e:	2300      	moveq	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2118      	movs	r1, #24
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff fe9d 	bl	8001274 <PrintLCD>
					"Led 2 = off                " :
					"Led 2 = on                 ", (IndexMenu == 1) ? 0 : 1);
	PrintLCD(0, 36,
			(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 0) ?
 800153a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800153e:	4811      	ldr	r0, [pc, #68]	; (8001584 <GetListLed+0xac>)
 8001540:	f001 fafc 	bl	8002b3c <HAL_GPIO_ReadPin>
 8001544:	4603      	mov	r3, r0
	PrintLCD(0, 36,
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <GetListLed+0x76>
 800154a:	4a13      	ldr	r2, [pc, #76]	; (8001598 <GetListLed+0xc0>)
 800154c:	e000      	b.n	8001550 <GetListLed+0x78>
 800154e:	4a13      	ldr	r2, [pc, #76]	; (800159c <GetListLed+0xc4>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b02      	cmp	r3, #2
 8001554:	bf14      	ite	ne
 8001556:	2301      	movne	r3, #1
 8001558:	2300      	moveq	r3, #0
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2124      	movs	r1, #36	; 0x24
 800155e:	2000      	movs	r0, #0
 8001560:	f7ff fe88 	bl	8001274 <PrintLCD>
					"Led 3 = off                " :
					"Led 3 = on                 ", (IndexMenu == 2) ? 0 : 1);
	PrintLCD(0, 48, "Back", (IndexMenu == 3) ? 0 : 1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b03      	cmp	r3, #3
 8001568:	bf14      	ite	ne
 800156a:	2301      	movne	r3, #1
 800156c:	2300      	moveq	r3, #0
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <GetListLed+0xc8>)
 8001572:	2130      	movs	r1, #48	; 0x30
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fe7d 	bl	8001274 <PrintLCD>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40011000 	.word	0x40011000
 8001588:	08004ef8 	.word	0x08004ef8
 800158c:	08004f14 	.word	0x08004f14
 8001590:	08004f30 	.word	0x08004f30
 8001594:	08004f4c 	.word	0x08004f4c
 8001598:	08004f68 	.word	0x08004f68
 800159c:	08004f84 	.word	0x08004f84
 80015a0:	08004fa0 	.word	0x08004fa0

080015a4 <GetListLed_RGB>:

void GetListLed_RGB(int IndexMenu) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	//SSD1306_DrawFilledCircle(110,24-3,5,(IndexMenu==1)?SSD1306_COLOR_WHITE:SSD1306_COLOR_BLACK);
	//SSD1306_DrawFilledCircle(110,36-3,5,(IndexMenu==2)?SSD1306_COLOR_WHITE:SSD1306_COLOR_BLACK);
	//SSD1306_DrawFilledCircle(110,48-3,5,(IndexMenu==3)?SSD1306_COLOR_WHITE:SSD1306_COLOR_BLACK);

	PrintLCD(0, 12,
			(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0) ?
 80015ac:	2102      	movs	r1, #2
 80015ae:	4827      	ldr	r0, [pc, #156]	; (800164c <GetListLed_RGB+0xa8>)
 80015b0:	f001 fac4 	bl	8002b3c <HAL_GPIO_ReadPin>
 80015b4:	4603      	mov	r3, r0
	PrintLCD(0, 12,
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <GetListLed_RGB+0x1a>
 80015ba:	4a25      	ldr	r2, [pc, #148]	; (8001650 <GetListLed_RGB+0xac>)
 80015bc:	e000      	b.n	80015c0 <GetListLed_RGB+0x1c>
 80015be:	4a25      	ldr	r2, [pc, #148]	; (8001654 <GetListLed_RGB+0xb0>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	dd04      	ble.n	80015d0 <GetListLed_RGB+0x2c>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	dc01      	bgt.n	80015d0 <GetListLed_RGB+0x2c>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <GetListLed_RGB+0x2e>
 80015d0:	2300      	movs	r3, #0
 80015d2:	210c      	movs	r1, #12
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff fe4d 	bl	8001274 <PrintLCD>
					"Red: off                   " :
					"Red: on                    ",
			(IndexMenu <= 0 || IndexMenu >= 4) ? 0 : 1);
	PrintLCD(0, 24,
			(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == 0) ?
 80015da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015de:	481e      	ldr	r0, [pc, #120]	; (8001658 <GetListLed_RGB+0xb4>)
 80015e0:	f001 faac 	bl	8002b3c <HAL_GPIO_ReadPin>
 80015e4:	4603      	mov	r3, r0
	PrintLCD(0, 24,
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <GetListLed_RGB+0x4a>
 80015ea:	4a1c      	ldr	r2, [pc, #112]	; (800165c <GetListLed_RGB+0xb8>)
 80015ec:	e000      	b.n	80015f0 <GetListLed_RGB+0x4c>
 80015ee:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <GetListLed_RGB+0xbc>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	bf14      	ite	ne
 80015f6:	2301      	movne	r3, #1
 80015f8:	2300      	moveq	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2118      	movs	r1, #24
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff fe38 	bl	8001274 <PrintLCD>
					"Green: off                 " :
					"Green: on                  ", (IndexMenu == 1) ? 0 : 1);
	PrintLCD(0, 36,
			(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == 0) ?
 8001604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001608:	4813      	ldr	r0, [pc, #76]	; (8001658 <GetListLed_RGB+0xb4>)
 800160a:	f001 fa97 	bl	8002b3c <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
	PrintLCD(0, 36,
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <GetListLed_RGB+0x74>
 8001614:	4a13      	ldr	r2, [pc, #76]	; (8001664 <GetListLed_RGB+0xc0>)
 8001616:	e000      	b.n	800161a <GetListLed_RGB+0x76>
 8001618:	4a13      	ldr	r2, [pc, #76]	; (8001668 <GetListLed_RGB+0xc4>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b02      	cmp	r3, #2
 800161e:	bf14      	ite	ne
 8001620:	2301      	movne	r3, #1
 8001622:	2300      	moveq	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2124      	movs	r1, #36	; 0x24
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff fe23 	bl	8001274 <PrintLCD>
					"Blue: off                  " :
					"Blue: on                   ", (IndexMenu == 2) ? 0 : 1);
	PrintLCD(0, 48, "Back", (IndexMenu == 3) ? 0 : 1);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b03      	cmp	r3, #3
 8001632:	bf14      	ite	ne
 8001634:	2301      	movne	r3, #1
 8001636:	2300      	moveq	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	4a0c      	ldr	r2, [pc, #48]	; (800166c <GetListLed_RGB+0xc8>)
 800163c:	2130      	movs	r1, #48	; 0x30
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff fe18 	bl	8001274 <PrintLCD>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40010800 	.word	0x40010800
 8001650:	08004fa8 	.word	0x08004fa8
 8001654:	08004fc4 	.word	0x08004fc4
 8001658:	40011000 	.word	0x40011000
 800165c:	08004fe0 	.word	0x08004fe0
 8001660:	08004ffc 	.word	0x08004ffc
 8001664:	08005018 	.word	0x08005018
 8001668:	08005034 	.word	0x08005034
 800166c:	08004fa0 	.word	0x08004fa0

08001670 <GetListTemperatureSensor>:

void GetListTemperatureSensor(int IndexMenu) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	//IndexMenu = 1;
	//Check_IN

	if (DHT11_Start()) {
 8001678:	f7ff fc04 	bl	8000e84 <DHT11_Start>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d027      	beq.n	80016d2 <GetListTemperatureSensor+0x62>
		struct DHTSS1 Ret;
		Ret = Check_IN();
 8001682:	f7ff fcf1 	bl	8001068 <Check_IN>
 8001686:	4603      	mov	r3, r0
 8001688:	61fb      	str	r3, [r7, #28]
		char strCopy[15];
		//PB9
		sprintf(strCopy, "%d.%d C      ", Ret.TCI, Ret.TCD);
 800168a:	7f3b      	ldrb	r3, [r7, #28]
 800168c:	461a      	mov	r2, r3
 800168e:	7f7b      	ldrb	r3, [r7, #29]
 8001690:	f107 000c 	add.w	r0, r7, #12
 8001694:	4911      	ldr	r1, [pc, #68]	; (80016dc <GetListTemperatureSensor+0x6c>)
 8001696:	f002 ff1f 	bl	80044d8 <siprintf>
		PrintLCD(0, 12, strCopy, 1);
 800169a:	f107 020c 	add.w	r2, r7, #12
 800169e:	2301      	movs	r3, #1
 80016a0:	210c      	movs	r1, #12
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff fde6 	bl	8001274 <PrintLCD>
		sprintf(strCopy, "%d.%d F      ", Ret.TFI, Ret.TFD);
 80016a8:	7ffb      	ldrb	r3, [r7, #31]
 80016aa:	461a      	mov	r2, r3
 80016ac:	7fbb      	ldrb	r3, [r7, #30]
 80016ae:	f107 000c 	add.w	r0, r7, #12
 80016b2:	490b      	ldr	r1, [pc, #44]	; (80016e0 <GetListTemperatureSensor+0x70>)
 80016b4:	f002 ff10 	bl	80044d8 <siprintf>
		PrintLCD(0, 24, strCopy, 1);
 80016b8:	f107 020c 	add.w	r2, r7, #12
 80016bc:	2301      	movs	r3, #1
 80016be:	2118      	movs	r1, #24
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff fdd7 	bl	8001274 <PrintLCD>
		PrintLCD(0, 36, "Back", 0);
 80016c6:	2300      	movs	r3, #0
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <GetListTemperatureSensor+0x74>)
 80016ca:	2124      	movs	r1, #36	; 0x24
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7ff fdd1 	bl	8001274 <PrintLCD>
	}

}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	08005050 	.word	0x08005050
 80016e0:	08005060 	.word	0x08005060
 80016e4:	08004fa0 	.word	0x08004fa0

080016e8 <GetListBuzzerSensor>:
//PB9
void GetListBuzzerSensor(int IndexMenu) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	PrintLCD(0, 12, "Test", (IndexMenu == 0) ? 0 : 1);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	bf14      	ite	ne
 80016f6:	2301      	movne	r3, #1
 80016f8:	2300      	moveq	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4a09      	ldr	r2, [pc, #36]	; (8001724 <GetListBuzzerSensor+0x3c>)
 80016fe:	210c      	movs	r1, #12
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff fdb7 	bl	8001274 <PrintLCD>
	PrintLCD(0, 24, "Back",(IndexMenu == 1) ? 0 : 1);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b01      	cmp	r3, #1
 800170a:	bf14      	ite	ne
 800170c:	2301      	movne	r3, #1
 800170e:	2300      	moveq	r3, #0
 8001710:	b2db      	uxtb	r3, r3
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <GetListBuzzerSensor+0x40>)
 8001714:	2118      	movs	r1, #24
 8001716:	2000      	movs	r0, #0
 8001718:	f7ff fdac 	bl	8001274 <PrintLCD>
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	08005070 	.word	0x08005070
 8001728:	08004fa0 	.word	0x08004fa0

0800172c <GetListAbout>:

void GetListAbout(int IndexMenu) {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	//	int I =10*i;
	//	int Y =10*i;
	//SSD1306_DrawCircle(I,Y,5,SSD1306_COLOR_WHITE);//int16_t x0, int16_t y0, int16_t r
	//SSD1306_DrawFilledCircle(I,Y,3,SSD1306_COLOR_WHITE);
//	}
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
	...

08001740 <GetListSoonModel>:
void GetListSoonModel() {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	PrintLCD(0, 36, "Will open soon                 ", 1);
 8001744:	2301      	movs	r3, #1
 8001746:	4a06      	ldr	r2, [pc, #24]	; (8001760 <GetListSoonModel+0x20>)
 8001748:	2124      	movs	r1, #36	; 0x24
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff fd92 	bl	8001274 <PrintLCD>
	PrintLCD(0, 48, "Back", 0);
 8001750:	2300      	movs	r3, #0
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <GetListSoonModel+0x24>)
 8001754:	2130      	movs	r1, #48	; 0x30
 8001756:	2000      	movs	r0, #0
 8001758:	f7ff fd8c 	bl	8001274 <PrintLCD>
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	08005078 	.word	0x08005078
 8001764:	08004fa0 	.word	0x08004fa0

08001768 <ClickButtons>:
 * MainMun  | 0	     | ( Index = 0 ~ 6 )
 * Led   	| 1 	 | ( index = 0 ~ 3 )
 * LEDs RGB | 2 	 | ( index = 0 ~ 3 )
 * */

int ClickButtons(int *index, int *MainMenu) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]

	int GetIndexValue = *index;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]
	int GetMainMenuValue = *MainMenu;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60bb      	str	r3, [r7, #8]

	//Add in 30/10/2022
	if (GetMainMenuValue == 0) //Move To AnyPage
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d104      	bne.n	800178e <ClickButtons+0x26>
		*MainMenu = GetIndexValue + 1;//EventMainMeun(GetIndexValue, MainMenu);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	e01b      	b.n	80017c6 <ClickButtons+0x5e>
	//Add in 30/10/2022
	else if (GetMainMenuValue == 1)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d104      	bne.n	800179e <ClickButtons+0x36>
		EventMeunLed(GetIndexValue, MainMenu);
 8001794:	6839      	ldr	r1, [r7, #0]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f81a 	bl	80017d0 <EventMeunLed>
 800179c:	e013      	b.n	80017c6 <ClickButtons+0x5e>
	//Add in 30/10/2022
	else if (GetMainMenuValue == 2)
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d104      	bne.n	80017ae <ClickButtons+0x46>
		EventMeunLEDsRGP(GetIndexValue, MainMenu);
 80017a4:	6839      	ldr	r1, [r7, #0]
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f83e 	bl	8001828 <EventMeunLEDsRGP>
 80017ac:	e00b      	b.n	80017c6 <ClickButtons+0x5e>

	// < here
	else if (GetMainMenuValue == 4)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d104      	bne.n	80017be <ClickButtons+0x56>
		EventBuzzer(GetIndexValue, MainMenu);
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 f860 	bl	800187c <EventBuzzer>
 80017bc:	e003      	b.n	80017c6 <ClickButtons+0x5e>
	//Add Here New Method 🔼

	else
		EventBeSoon(GetIndexValue, MainMenu);
 80017be:	6839      	ldr	r1, [r7, #0]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f87f 	bl	80018c4 <EventBeSoon>


	return GetMainMenuValue; // Back Values
 80017c6:	68bb      	ldr	r3, [r7, #8]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <EventMeunLed>:

//

void EventMeunLed(int Myindex, int *MainMenu) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]

	if (Myindex == 0) { HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); }
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d105      	bne.n	80017ec <EventMeunLed+0x1c>
 80017e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e4:	480f      	ldr	r0, [pc, #60]	; (8001824 <EventMeunLed+0x54>)
 80017e6:	f001 f9d8 	bl	8002b9a <HAL_GPIO_TogglePin>
	else if (Myindex == 1) { HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14); }
	else if (Myindex == 2) { HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); }
	else if (Myindex == 3) { *MainMenu = 0; } // Back TO MainMeun

}
 80017ea:	e017      	b.n	800181c <EventMeunLed+0x4c>
	else if (Myindex == 1) { HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14); }
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d105      	bne.n	80017fe <EventMeunLed+0x2e>
 80017f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <EventMeunLed+0x54>)
 80017f8:	f001 f9cf 	bl	8002b9a <HAL_GPIO_TogglePin>
}
 80017fc:	e00e      	b.n	800181c <EventMeunLed+0x4c>
	else if (Myindex == 2) { HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); }
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d105      	bne.n	8001810 <EventMeunLed+0x40>
 8001804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001808:	4806      	ldr	r0, [pc, #24]	; (8001824 <EventMeunLed+0x54>)
 800180a:	f001 f9c6 	bl	8002b9a <HAL_GPIO_TogglePin>
}
 800180e:	e005      	b.n	800181c <EventMeunLed+0x4c>
	else if (Myindex == 3) { *MainMenu = 0; } // Back TO MainMeun
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d102      	bne.n	800181c <EventMeunLed+0x4c>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40011000 	.word	0x40011000

08001828 <EventMeunLEDsRGP>:

void EventMeunLEDsRGP(int Myindex,int* MainMenu)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
	if (Myindex == 0) { HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1); }
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d104      	bne.n	8001842 <EventMeunLEDsRGP+0x1a>
 8001838:	2102      	movs	r1, #2
 800183a:	480f      	ldr	r0, [pc, #60]	; (8001878 <EventMeunLEDsRGP+0x50>)
 800183c:	f001 f9ad 	bl	8002b9a <HAL_GPIO_TogglePin>
	else if (Myindex == 1) { HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2); }
	else if (Myindex == 2) { HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3); }
	else if (Myindex == 3) { *MainMenu = 0; } // Back TO MainMeun
}
 8001840:	e015      	b.n	800186e <EventMeunLEDsRGP+0x46>
	else if (Myindex == 1) { HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2); }
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d104      	bne.n	8001852 <EventMeunLEDsRGP+0x2a>
 8001848:	2104      	movs	r1, #4
 800184a:	480b      	ldr	r0, [pc, #44]	; (8001878 <EventMeunLEDsRGP+0x50>)
 800184c:	f001 f9a5 	bl	8002b9a <HAL_GPIO_TogglePin>
}
 8001850:	e00d      	b.n	800186e <EventMeunLEDsRGP+0x46>
	else if (Myindex == 2) { HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3); }
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d104      	bne.n	8001862 <EventMeunLEDsRGP+0x3a>
 8001858:	2108      	movs	r1, #8
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <EventMeunLEDsRGP+0x50>)
 800185c:	f001 f99d 	bl	8002b9a <HAL_GPIO_TogglePin>
}
 8001860:	e005      	b.n	800186e <EventMeunLEDsRGP+0x46>
	else if (Myindex == 3) { *MainMenu = 0; } // Back TO MainMeun
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d102      	bne.n	800186e <EventMeunLEDsRGP+0x46>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40010800 	.word	0x40010800

0800187c <EventBuzzer>:

void EventBuzzer(int Myindex,int* MainMenu)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	if(Myindex == 0)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d111      	bne.n	80018b0 <EventBuzzer+0x34>
	{
		for(int X;X<=3000;X++){
 800188c:	e00a      	b.n	80018a4 <EventBuzzer+0x28>
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_9);
 800188e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001892:	480b      	ldr	r0, [pc, #44]	; (80018c0 <EventBuzzer+0x44>)
 8001894:	f001 f981 	bl	8002b9a <HAL_GPIO_TogglePin>
			HAL_Delay(10);
 8001898:	200a      	movs	r0, #10
 800189a:	f000 fe99 	bl	80025d0 <HAL_Delay>
		for(int X;X<=3000;X++){
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80018aa:	4293      	cmp	r3, r2
 80018ac:	ddef      	ble.n	800188e <EventBuzzer+0x12>
	}
	else
	{
		*MainMenu = 0;
	}
}
 80018ae:	e002      	b.n	80018b6 <EventBuzzer+0x3a>
		*MainMenu = 0;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40010c00 	.word	0x40010c00

080018c4 <EventBeSoon>:




//Soon Page
void EventBeSoon(int Myindex,int* MainMenu){
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
	//Anyway back to the main page
	*MainMenu = 0;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
	...

080018e0 <microDelay>:
void static MX_TIM1_Init(void);

I2C_HandleTypeDef hi2c1;
TIM_HandleTypeDef htim1;

void microDelay(uint16_t delay) {
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <microDelay+0x2c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 80018f2:	bf00      	nop
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <microDelay+0x2c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3f9      	bcc.n	80018f4 <microDelay+0x14>
		;
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	20000110 	.word	0x20000110

08001910 <main>:

int MainMeun = 0;
int IndexMune = 0;

int main(void) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
	HAL_Init();
 8001916:	f000 fdf9 	bl	800250c <HAL_Init>
	SystemClock_Config();
 800191a:	f000 f86b 	bl	80019f4 <SystemClock_Config>
	MX_GPIO_Init();
 800191e:	f000 f92d 	bl	8001b7c <MX_GPIO_Init>
	MX_I2C1_Init();
 8001922:	f000 f8ad 	bl	8001a80 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001926:	f000 f8d9 	bl	8001adc <MX_TIM1_Init>
	HAL_TIM_Base_Start(&htim1);
 800192a:	482e      	ldr	r0, [pc, #184]	; (80019e4 <main+0xd4>)
 800192c:	f002 fb3e 	bl	8003fac <HAL_TIM_Base_Start>
	SSD1306_Init();
 8001930:	f000 f9e2 	bl	8001cf8 <SSD1306_Init>
	while (1) {
		 volatile unsigned int btnEnter = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001934:	2110      	movs	r1, #16
 8001936:	482c      	ldr	r0, [pc, #176]	; (80019e8 <main+0xd8>)
 8001938:	f001 f900 	bl	8002b3c <HAL_GPIO_ReadPin>
 800193c:	4603      	mov	r3, r0
 800193e:	607b      	str	r3, [r7, #4]
				volatile unsigned int btnMoveDown = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001940:	2120      	movs	r1, #32
 8001942:	4829      	ldr	r0, [pc, #164]	; (80019e8 <main+0xd8>)
 8001944:	f001 f8fa 	bl	8002b3c <HAL_GPIO_ReadPin>
 8001948:	4603      	mov	r3, r0
 800194a:	603b      	str	r3, [r7, #0]
				if (btnMoveDown == 0) {
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d12b      	bne.n	80019aa <main+0x9a>
					int MaxCount =
									(MainMeun == 0) ? 6 : 	   //Main
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <main+0xdc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d017      	beq.n	800198a <main+0x7a>
								    (MainMeun == 1) ? 3 :	   //Normal LEDs
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <main+0xdc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d011      	beq.n	8001986 <main+0x76>
									(MainMeun == 2) ? 3 :	   //RGB LEDs
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <main+0xdc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d00b      	beq.n	8001982 <main+0x72>
									(MainMeun == 3) ? 0 :	   //temperature sensors
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <main+0xdc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b03      	cmp	r3, #3
 8001970:	d005      	beq.n	800197e <main+0x6e>
									(MainMeun == 4) ? 1 : 0;    // Buzzer
 8001972:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <main+0xdc>)
 8001974:	681b      	ldr	r3, [r3, #0]
									(MainMeun == 3) ? 0 :	   //temperature sensors
 8001976:	2b04      	cmp	r3, #4
 8001978:	d101      	bne.n	800197e <main+0x6e>
 800197a:	2301      	movs	r3, #1
 800197c:	e006      	b.n	800198c <main+0x7c>
 800197e:	2300      	movs	r3, #0
 8001980:	e004      	b.n	800198c <main+0x7c>
									(MainMeun == 2) ? 3 :	   //RGB LEDs
 8001982:	2303      	movs	r3, #3
 8001984:	e002      	b.n	800198c <main+0x7c>
								    (MainMeun == 1) ? 3 :	   //Normal LEDs
 8001986:	2303      	movs	r3, #3
 8001988:	e000      	b.n	800198c <main+0x7c>
									(MainMeun == 0) ? 6 : 	   //Main
 800198a:	2306      	movs	r3, #6
					int MaxCount =
 800198c:	60fb      	str	r3, [r7, #12]
					if (IndexMune > MaxCount)
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <main+0xe0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	429a      	cmp	r2, r3
 8001996:	da03      	bge.n	80019a0 <main+0x90>
						IndexMune = 0;
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <main+0xe0>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	e004      	b.n	80019aa <main+0x9a>
					else
						IndexMune += 1;
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <main+0xe0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	3301      	adds	r3, #1
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <main+0xe0>)
 80019a8:	6013      	str	r3, [r2, #0]
				}
				if (btnEnter == 0) {
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10f      	bne.n	80019d0 <main+0xc0>
					SSD1306_Clear();
 80019b0:	f000 fbc5 	bl	800213e <SSD1306_Clear>
					int GetSol = ClickButtons(&IndexMune, &MainMeun);
 80019b4:	490d      	ldr	r1, [pc, #52]	; (80019ec <main+0xdc>)
 80019b6:	480e      	ldr	r0, [pc, #56]	; (80019f0 <main+0xe0>)
 80019b8:	f7ff fed6 	bl	8001768 <ClickButtons>
 80019bc:	60b8      	str	r0, [r7, #8]
					IndexMune = (GetSol != 0) ? GetSol - 1 : 0;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <main+0xba>
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	e000      	b.n	80019cc <main+0xbc>
 80019ca:	2300      	movs	r3, #0
 80019cc:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <main+0xe0>)
 80019ce:	6013      	str	r3, [r2, #0]
				}
				GetList(&IndexMune, &MainMeun);
 80019d0:	4906      	ldr	r1, [pc, #24]	; (80019ec <main+0xdc>)
 80019d2:	4807      	ldr	r0, [pc, #28]	; (80019f0 <main+0xe0>)
 80019d4:	f7ff fc90 	bl	80012f8 <GetList>
				HAL_Delay(500);
 80019d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019dc:	f000 fdf8 	bl	80025d0 <HAL_Delay>
	while (1) {
 80019e0:	e7a8      	b.n	8001934 <main+0x24>
 80019e2:	bf00      	nop
 80019e4:	20000110 	.word	0x20000110
 80019e8:	40010c00 	.word	0x40010c00
 80019ec:	20000158 	.word	0x20000158
 80019f0:	2000015c 	.word	0x2000015c

080019f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b090      	sub	sp, #64	; 0x40
 80019f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fa:	f107 0318 	add.w	r3, r7, #24
 80019fe:	2228      	movs	r2, #40	; 0x28
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fd60 	bl	80044c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a24:	2301      	movs	r3, #1
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a38:	f107 0318 	add.w	r3, r7, #24
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f001 fe5f 	bl	8003700 <HAL_RCC_OscConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a48:	f000 f950 	bl	8001cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a50:	2302      	movs	r3, #2
 8001a52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2102      	movs	r1, #2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 f8cc 	bl	8003c04 <HAL_RCC_ClockConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a72:	f000 f93b 	bl	8001cec <Error_Handler>
  }
}
 8001a76:	bf00      	nop
 8001a78:	3740      	adds	r7, #64	; 0x40
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001a86:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <MX_I2C1_Init+0x54>)
 8001a88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001a8c:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <MX_I2C1_Init+0x58>)
 8001a8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001abe:	f001 f8a7 	bl	8002c10 <HAL_I2C_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ac8:	f000 f910 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200000bc 	.word	0x200000bc
 8001ad4:	40005400 	.word	0x40005400
 8001ad8:	00061a80 	.word	0x00061a80

08001adc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	463b      	mov	r3, r7
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <MX_TIM1_Init+0x98>)
 8001afa:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <MX_TIM1_Init+0x9c>)
 8001afc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <MX_TIM1_Init+0x98>)
 8001b00:	2247      	movs	r2, #71	; 0x47
 8001b02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <MX_TIM1_Init+0x98>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <MX_TIM1_Init+0x98>)
 8001b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <MX_TIM1_Init+0x98>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <MX_TIM1_Init+0x98>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <MX_TIM1_Init+0x98>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b24:	4813      	ldr	r0, [pc, #76]	; (8001b74 <MX_TIM1_Init+0x98>)
 8001b26:	f002 f9f1 	bl	8003f0c <HAL_TIM_Base_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b30:	f000 f8dc 	bl	8001cec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480c      	ldr	r0, [pc, #48]	; (8001b74 <MX_TIM1_Init+0x98>)
 8001b42:	f002 fa7d 	bl	8004040 <HAL_TIM_ConfigClockSource>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b4c:	f000 f8ce 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b58:	463b      	mov	r3, r7
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	; (8001b74 <MX_TIM1_Init+0x98>)
 8001b5e:	f002 fc2b 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b68:	f000 f8c0 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000110 	.word	0x20000110
 8001b78:	40012c00 	.word	0x40012c00

08001b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <MX_GPIO_Init+0x158>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a4f      	ldr	r2, [pc, #316]	; (8001cd4 <MX_GPIO_Init+0x158>)
 8001b96:	f043 0310 	orr.w	r3, r3, #16
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	; (8001cd4 <MX_GPIO_Init+0x158>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0310 	and.w	r3, r3, #16
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba8:	4b4a      	ldr	r3, [pc, #296]	; (8001cd4 <MX_GPIO_Init+0x158>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a49      	ldr	r2, [pc, #292]	; (8001cd4 <MX_GPIO_Init+0x158>)
 8001bae:	f043 0320 	orr.w	r3, r3, #32
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <MX_GPIO_Init+0x158>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc0:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <MX_GPIO_Init+0x158>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a43      	ldr	r2, [pc, #268]	; (8001cd4 <MX_GPIO_Init+0x158>)
 8001bc6:	f043 0308 	orr.w	r3, r3, #8
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b41      	ldr	r3, [pc, #260]	; (8001cd4 <MX_GPIO_Init+0x158>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b3e      	ldr	r3, [pc, #248]	; (8001cd4 <MX_GPIO_Init+0x158>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a3d      	ldr	r2, [pc, #244]	; (8001cd4 <MX_GPIO_Init+0x158>)
 8001bde:	f043 0304 	orr.w	r3, r3, #4
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <MX_GPIO_Init+0x158>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001bf6:	4838      	ldr	r0, [pc, #224]	; (8001cd8 <MX_GPIO_Init+0x15c>)
 8001bf8:	f000 ffb7 	bl	8002b6a <HAL_GPIO_WritePin>


	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8,
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8001c02:	4836      	ldr	r0, [pc, #216]	; (8001cdc <MX_GPIO_Init+0x160>)
 8001c04:	f000 ffb1 	bl	8002b6a <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c0e:	4834      	ldr	r0, [pc, #208]	; (8001ce0 <MX_GPIO_Init+0x164>)
 8001c10:	f000 ffab 	bl	8002b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c14:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2302      	movs	r3, #2
 8001c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c26:	f107 0310 	add.w	r3, r7, #16
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	482a      	ldr	r0, [pc, #168]	; (8001cd8 <MX_GPIO_Init+0x15c>)
 8001c2e:	f000 fe01 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <MX_GPIO_Init+0x168>)
 8001c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4619      	mov	r1, r3
 8001c46:	4826      	ldr	r0, [pc, #152]	; (8001ce0 <MX_GPIO_Init+0x164>)
 8001c48:	f000 fdf4 	bl	8002834 <HAL_GPIO_Init>


	/*Configure GPIO pins : PA1 PA2 PA3 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8;
 8001c4c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001c50:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	4619      	mov	r1, r3
 8001c64:	481d      	ldr	r0, [pc, #116]	; (8001cdc <MX_GPIO_Init+0x160>)
 8001c66:	f000 fde5 	bl	8002834 <HAL_GPIO_Init>



  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <MX_GPIO_Init+0x16c>)
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4817      	ldr	r0, [pc, #92]	; (8001cdc <MX_GPIO_Init+0x160>)
 8001c80:	f000 fdd8 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c84:	2338      	movs	r3, #56	; 0x38
 8001c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	4619      	mov	r1, r3
 8001c96:	4812      	ldr	r0, [pc, #72]	; (8001ce0 <MX_GPIO_Init+0x164>)
 8001c98:	f000 fdcc 	bl	8002834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2302      	movs	r3, #2
 8001cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	480a      	ldr	r0, [pc, #40]	; (8001ce0 <MX_GPIO_Init+0x164>)
 8001cb6:	f000 fdbd 	bl	8002834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2028      	movs	r0, #40	; 0x28
 8001cc0:	f000 fd81 	bl	80027c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cc4:	2028      	movs	r0, #40	; 0x28
 8001cc6:	f000 fd9a 	bl	80027fe <HAL_NVIC_EnableIRQ>

}
 8001cca:	bf00      	nop
 8001ccc:	3720      	adds	r7, #32
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40011000 	.word	0x40011000
 8001cdc:	40010800 	.word	0x40010800
 8001ce0:	40010c00 	.word	0x40010c00
 8001ce4:	10210000 	.word	0x10210000
 8001ce8:	10110000 	.word	0x10110000

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <Error_Handler+0x8>
	...

08001cf8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001cfe:	f000 fa27 	bl	8002150 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001d02:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001d06:	2201      	movs	r2, #1
 8001d08:	2178      	movs	r1, #120	; 0x78
 8001d0a:	485b      	ldr	r0, [pc, #364]	; (8001e78 <SSD1306_Init+0x180>)
 8001d0c:	f001 f9c2 	bl	8003094 <HAL_I2C_IsDeviceReady>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e0a9      	b.n	8001e6e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001d1a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001d1e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d20:	e002      	b.n	8001d28 <SSD1306_Init+0x30>
		p--;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f9      	bne.n	8001d22 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001d2e:	22ae      	movs	r2, #174	; 0xae
 8001d30:	2100      	movs	r1, #0
 8001d32:	2078      	movs	r0, #120	; 0x78
 8001d34:	f000 fa86 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001d38:	2220      	movs	r2, #32
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2078      	movs	r0, #120	; 0x78
 8001d3e:	f000 fa81 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001d42:	2210      	movs	r2, #16
 8001d44:	2100      	movs	r1, #0
 8001d46:	2078      	movs	r0, #120	; 0x78
 8001d48:	f000 fa7c 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d4c:	22b0      	movs	r2, #176	; 0xb0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2078      	movs	r0, #120	; 0x78
 8001d52:	f000 fa77 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001d56:	22c8      	movs	r2, #200	; 0xc8
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2078      	movs	r0, #120	; 0x78
 8001d5c:	f000 fa72 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	2078      	movs	r0, #120	; 0x78
 8001d66:	f000 fa6d 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2078      	movs	r0, #120	; 0x78
 8001d70:	f000 fa68 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001d74:	2240      	movs	r2, #64	; 0x40
 8001d76:	2100      	movs	r1, #0
 8001d78:	2078      	movs	r0, #120	; 0x78
 8001d7a:	f000 fa63 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001d7e:	2281      	movs	r2, #129	; 0x81
 8001d80:	2100      	movs	r1, #0
 8001d82:	2078      	movs	r0, #120	; 0x78
 8001d84:	f000 fa5e 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001d88:	22ff      	movs	r2, #255	; 0xff
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	2078      	movs	r0, #120	; 0x78
 8001d8e:	f000 fa59 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001d92:	22a1      	movs	r2, #161	; 0xa1
 8001d94:	2100      	movs	r1, #0
 8001d96:	2078      	movs	r0, #120	; 0x78
 8001d98:	f000 fa54 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001d9c:	22a6      	movs	r2, #166	; 0xa6
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2078      	movs	r0, #120	; 0x78
 8001da2:	f000 fa4f 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001da6:	22a8      	movs	r2, #168	; 0xa8
 8001da8:	2100      	movs	r1, #0
 8001daa:	2078      	movs	r0, #120	; 0x78
 8001dac:	f000 fa4a 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001db0:	223f      	movs	r2, #63	; 0x3f
 8001db2:	2100      	movs	r1, #0
 8001db4:	2078      	movs	r0, #120	; 0x78
 8001db6:	f000 fa45 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001dba:	22a4      	movs	r2, #164	; 0xa4
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2078      	movs	r0, #120	; 0x78
 8001dc0:	f000 fa40 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001dc4:	22d3      	movs	r2, #211	; 0xd3
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2078      	movs	r0, #120	; 0x78
 8001dca:	f000 fa3b 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2078      	movs	r0, #120	; 0x78
 8001dd4:	f000 fa36 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001dd8:	22d5      	movs	r2, #213	; 0xd5
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2078      	movs	r0, #120	; 0x78
 8001dde:	f000 fa31 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001de2:	22f0      	movs	r2, #240	; 0xf0
 8001de4:	2100      	movs	r1, #0
 8001de6:	2078      	movs	r0, #120	; 0x78
 8001de8:	f000 fa2c 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001dec:	22d9      	movs	r2, #217	; 0xd9
 8001dee:	2100      	movs	r1, #0
 8001df0:	2078      	movs	r0, #120	; 0x78
 8001df2:	f000 fa27 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001df6:	2222      	movs	r2, #34	; 0x22
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2078      	movs	r0, #120	; 0x78
 8001dfc:	f000 fa22 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001e00:	22da      	movs	r2, #218	; 0xda
 8001e02:	2100      	movs	r1, #0
 8001e04:	2078      	movs	r0, #120	; 0x78
 8001e06:	f000 fa1d 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001e0a:	2212      	movs	r2, #18
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2078      	movs	r0, #120	; 0x78
 8001e10:	f000 fa18 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001e14:	22db      	movs	r2, #219	; 0xdb
 8001e16:	2100      	movs	r1, #0
 8001e18:	2078      	movs	r0, #120	; 0x78
 8001e1a:	f000 fa13 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001e1e:	2220      	movs	r2, #32
 8001e20:	2100      	movs	r1, #0
 8001e22:	2078      	movs	r0, #120	; 0x78
 8001e24:	f000 fa0e 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001e28:	228d      	movs	r2, #141	; 0x8d
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2078      	movs	r0, #120	; 0x78
 8001e2e:	f000 fa09 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001e32:	2214      	movs	r2, #20
 8001e34:	2100      	movs	r1, #0
 8001e36:	2078      	movs	r0, #120	; 0x78
 8001e38:	f000 fa04 	bl	8002244 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001e3c:	22af      	movs	r2, #175	; 0xaf
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2078      	movs	r0, #120	; 0x78
 8001e42:	f000 f9ff 	bl	8002244 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001e46:	222e      	movs	r2, #46	; 0x2e
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2078      	movs	r0, #120	; 0x78
 8001e4c:	f000 f9fa 	bl	8002244 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f000 f843 	bl	8001edc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001e56:	f000 f813 	bl	8001e80 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <SSD1306_Init+0x184>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <SSD1306_Init+0x184>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SSD1306_Init+0x184>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001e6c:	2301      	movs	r3, #1
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200000bc 	.word	0x200000bc
 8001e7c:	20000560 	.word	0x20000560

08001e80 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001e86:	2300      	movs	r3, #0
 8001e88:	71fb      	strb	r3, [r7, #7]
 8001e8a:	e01d      	b.n	8001ec8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	3b50      	subs	r3, #80	; 0x50
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	2100      	movs	r1, #0
 8001e96:	2078      	movs	r0, #120	; 0x78
 8001e98:	f000 f9d4 	bl	8002244 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2078      	movs	r0, #120	; 0x78
 8001ea2:	f000 f9cf 	bl	8002244 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2078      	movs	r0, #120	; 0x78
 8001eac:	f000 f9ca 	bl	8002244 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	01db      	lsls	r3, r3, #7
 8001eb4:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <SSD1306_UpdateScreen+0x58>)
 8001eb6:	441a      	add	r2, r3
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	2140      	movs	r1, #64	; 0x40
 8001ebc:	2078      	movs	r0, #120	; 0x78
 8001ebe:	f000 f95b 	bl	8002178 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	71fb      	strb	r3, [r7, #7]
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	2b07      	cmp	r3, #7
 8001ecc:	d9de      	bls.n	8001e8c <SSD1306_UpdateScreen+0xc>
	}
}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000160 	.word	0x20000160

08001edc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <SSD1306_Fill+0x14>
 8001eec:	2300      	movs	r3, #0
 8001eee:	e000      	b.n	8001ef2 <SSD1306_Fill+0x16>
 8001ef0:	23ff      	movs	r3, #255	; 0xff
 8001ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4803      	ldr	r0, [pc, #12]	; (8001f08 <SSD1306_Fill+0x2c>)
 8001efa:	f002 fae5 	bl	80044c8 <memset>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000160 	.word	0x20000160

08001f0c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
 8001f16:	460b      	mov	r3, r1
 8001f18:	80bb      	strh	r3, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	70fb      	strb	r3, [r7, #3]
	if (
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	2b7f      	cmp	r3, #127	; 0x7f
 8001f22:	d848      	bhi.n	8001fb6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001f24:	88bb      	ldrh	r3, [r7, #4]
 8001f26:	2b3f      	cmp	r3, #63	; 0x3f
 8001f28:	d845      	bhi.n	8001fb6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001f2a:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <SSD1306_DrawPixel+0xb4>)
 8001f2c:	791b      	ldrb	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d11a      	bne.n	8001f7c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f46:	88fa      	ldrh	r2, [r7, #6]
 8001f48:	88bb      	ldrh	r3, [r7, #4]
 8001f4a:	08db      	lsrs	r3, r3, #3
 8001f4c:	b298      	uxth	r0, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	01db      	lsls	r3, r3, #7
 8001f52:	4413      	add	r3, r2
 8001f54:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <SSD1306_DrawPixel+0xb8>)
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	b25a      	sxtb	r2, r3
 8001f5a:	88bb      	ldrh	r3, [r7, #4]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	2101      	movs	r1, #1
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	b25b      	sxtb	r3, r3
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	b259      	sxtb	r1, r3
 8001f6c:	88fa      	ldrh	r2, [r7, #6]
 8001f6e:	4603      	mov	r3, r0
 8001f70:	01db      	lsls	r3, r3, #7
 8001f72:	4413      	add	r3, r2
 8001f74:	b2c9      	uxtb	r1, r1
 8001f76:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <SSD1306_DrawPixel+0xb8>)
 8001f78:	54d1      	strb	r1, [r2, r3]
 8001f7a:	e01d      	b.n	8001fb8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f7c:	88fa      	ldrh	r2, [r7, #6]
 8001f7e:	88bb      	ldrh	r3, [r7, #4]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	b298      	uxth	r0, r3
 8001f84:	4603      	mov	r3, r0
 8001f86:	01db      	lsls	r3, r3, #7
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <SSD1306_DrawPixel+0xb8>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	b25a      	sxtb	r2, r3
 8001f90:	88bb      	ldrh	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	b25b      	sxtb	r3, r3
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	b259      	sxtb	r1, r3
 8001fa6:	88fa      	ldrh	r2, [r7, #6]
 8001fa8:	4603      	mov	r3, r0
 8001faa:	01db      	lsls	r3, r3, #7
 8001fac:	4413      	add	r3, r2
 8001fae:	b2c9      	uxtb	r1, r1
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <SSD1306_DrawPixel+0xb8>)
 8001fb2:	54d1      	strb	r1, [r2, r3]
 8001fb4:	e000      	b.n	8001fb8 <SSD1306_DrawPixel+0xac>
		return;
 8001fb6:	bf00      	nop
	}
}
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	20000560 	.word	0x20000560
 8001fc4:	20000160 	.word	0x20000160

08001fc8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	460a      	mov	r2, r1
 8001fd2:	80fb      	strh	r3, [r7, #6]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001fd8:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <SSD1306_GotoXY+0x28>)
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001fde:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <SSD1306_GotoXY+0x28>)
 8001fe0:	88bb      	ldrh	r3, [r7, #4]
 8001fe2:	8053      	strh	r3, [r2, #2]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000560 	.word	0x20000560

08001ff4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
 8002000:	4613      	mov	r3, r2
 8002002:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002004:	4b3a      	ldr	r3, [pc, #232]	; (80020f0 <SSD1306_Putc+0xfc>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
	if (
 8002010:	2b7f      	cmp	r3, #127	; 0x7f
 8002012:	dc07      	bgt.n	8002024 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002014:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <SSD1306_Putc+0xfc>)
 8002016:	885b      	ldrh	r3, [r3, #2]
 8002018:	461a      	mov	r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	785b      	ldrb	r3, [r3, #1]
 800201e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002020:	2b3f      	cmp	r3, #63	; 0x3f
 8002022:	dd01      	ble.n	8002028 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002024:	2300      	movs	r3, #0
 8002026:	e05e      	b.n	80020e6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	e04b      	b.n	80020c6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	3b20      	subs	r3, #32
 8002036:	6839      	ldr	r1, [r7, #0]
 8002038:	7849      	ldrb	r1, [r1, #1]
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4619      	mov	r1, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	440b      	add	r3, r1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	e030      	b.n	80020b4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d010      	beq.n	8002084 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002062:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <SSD1306_Putc+0xfc>)
 8002064:	881a      	ldrh	r2, [r3, #0]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	b29b      	uxth	r3, r3
 800206a:	4413      	add	r3, r2
 800206c:	b298      	uxth	r0, r3
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <SSD1306_Putc+0xfc>)
 8002070:	885a      	ldrh	r2, [r3, #2]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	b29b      	uxth	r3, r3
 8002076:	4413      	add	r3, r2
 8002078:	b29b      	uxth	r3, r3
 800207a:	79ba      	ldrb	r2, [r7, #6]
 800207c:	4619      	mov	r1, r3
 800207e:	f7ff ff45 	bl	8001f0c <SSD1306_DrawPixel>
 8002082:	e014      	b.n	80020ae <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <SSD1306_Putc+0xfc>)
 8002086:	881a      	ldrh	r2, [r3, #0]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	b29b      	uxth	r3, r3
 800208c:	4413      	add	r3, r2
 800208e:	b298      	uxth	r0, r3
 8002090:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <SSD1306_Putc+0xfc>)
 8002092:	885a      	ldrh	r2, [r3, #2]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	b29b      	uxth	r3, r3
 8002098:	4413      	add	r3, r2
 800209a:	b299      	uxth	r1, r3
 800209c:	79bb      	ldrb	r3, [r7, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	bf0c      	ite	eq
 80020a2:	2301      	moveq	r3, #1
 80020a4:	2300      	movne	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	f7ff ff2f 	bl	8001f0c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	3301      	adds	r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4293      	cmp	r3, r2
 80020be:	d3c8      	bcc.n	8002052 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3301      	adds	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	785b      	ldrb	r3, [r3, #1]
 80020ca:	461a      	mov	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d3ad      	bcc.n	800202e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <SSD1306_Putc+0xfc>)
 80020d4:	881a      	ldrh	r2, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	4413      	add	r3, r2
 80020de:	b29a      	uxth	r2, r3
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <SSD1306_Putc+0xfc>)
 80020e2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80020e4:	79fb      	ldrb	r3, [r7, #7]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000560 	.word	0x20000560

080020f4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	4613      	mov	r3, r2
 8002100:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002102:	e012      	b.n	800212a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	79fa      	ldrb	r2, [r7, #7]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff71 	bl	8001ff4 <SSD1306_Putc>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d002      	beq.n	8002124 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	e008      	b.n	8002136 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3301      	adds	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1e8      	bne.n	8002104 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	781b      	ldrb	r3, [r3, #0]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002142:	2000      	movs	r0, #0
 8002144:	f7ff feca 	bl	8001edc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002148:	f7ff fe9a 	bl	8001e80 <SSD1306_UpdateScreen>
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}

08002150 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <ssd1306_I2C_Init+0x24>)
 8002158:	607b      	str	r3, [r7, #4]
	while(p>0)
 800215a:	e002      	b.n	8002162 <ssd1306_I2C_Init+0x12>
		p--;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f9      	bne.n	800215c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	0003d090 	.word	0x0003d090

08002178 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b0c7      	sub	sp, #284	; 0x11c
 800217c:	af02      	add	r7, sp, #8
 800217e:	4604      	mov	r4, r0
 8002180:	4608      	mov	r0, r1
 8002182:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002186:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800218a:	600a      	str	r2, [r1, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002192:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002196:	4622      	mov	r2, r4
 8002198:	701a      	strb	r2, [r3, #0]
 800219a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800219e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80021a2:	4602      	mov	r2, r0
 80021a4:	701a      	strb	r2, [r3, #0]
 80021a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021ae:	460a      	mov	r2, r1
 80021b0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80021b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80021b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80021be:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80021c2:	7812      	ldrb	r2, [r2, #0]
 80021c4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80021cc:	e015      	b.n	80021fa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80021ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021d2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80021d6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	441a      	add	r2, r3
 80021de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021e2:	3301      	adds	r3, #1
 80021e4:	7811      	ldrb	r1, [r2, #0]
 80021e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80021ea:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80021ee:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80021f0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021f4:	3301      	adds	r3, #1
 80021f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80021fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002204:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002208:	8812      	ldrh	r2, [r2, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d8df      	bhi.n	80021ce <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800220e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002212:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b299      	uxth	r1, r3
 800221a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800221e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	b29b      	uxth	r3, r3
 8002228:	f107 020c 	add.w	r2, r7, #12
 800222c:	200a      	movs	r0, #10
 800222e:	9000      	str	r0, [sp, #0]
 8002230:	4803      	ldr	r0, [pc, #12]	; (8002240 <ssd1306_I2C_WriteMulti+0xc8>)
 8002232:	f000 fe31 	bl	8002e98 <HAL_I2C_Master_Transmit>
}
 8002236:	bf00      	nop
 8002238:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800223c:	46bd      	mov	sp, r7
 800223e:	bd90      	pop	{r4, r7, pc}
 8002240:	200000bc 	.word	0x200000bc

08002244 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af02      	add	r7, sp, #8
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
 800224e:	460b      	mov	r3, r1
 8002250:	71bb      	strb	r3, [r7, #6]
 8002252:	4613      	mov	r3, r2
 8002254:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002256:	79bb      	ldrb	r3, [r7, #6]
 8002258:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800225a:	797b      	ldrb	r3, [r7, #5]
 800225c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	b299      	uxth	r1, r3
 8002262:	f107 020c 	add.w	r2, r7, #12
 8002266:	230a      	movs	r3, #10
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2302      	movs	r3, #2
 800226c:	4803      	ldr	r0, [pc, #12]	; (800227c <ssd1306_I2C_Write+0x38>)
 800226e:	f000 fe13 	bl	8002e98 <HAL_I2C_Master_Transmit>
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200000bc 	.word	0x200000bc

08002280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_MspInit+0x5c>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	4a14      	ldr	r2, [pc, #80]	; (80022dc <HAL_MspInit+0x5c>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6193      	str	r3, [r2, #24]
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_MspInit+0x5c>)
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_MspInit+0x5c>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <HAL_MspInit+0x5c>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a8:	61d3      	str	r3, [r2, #28]
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_MspInit+0x5c>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_MspInit+0x60>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_MspInit+0x60>)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40010000 	.word	0x40010000

080022e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a15      	ldr	r2, [pc, #84]	; (8002354 <HAL_I2C_MspInit+0x70>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d123      	bne.n	800234c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_I2C_MspInit+0x74>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a13      	ldr	r2, [pc, #76]	; (8002358 <HAL_I2C_MspInit+0x74>)
 800230a:	f043 0308 	orr.w	r3, r3, #8
 800230e:	6193      	str	r3, [r2, #24]
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_I2C_MspInit+0x74>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800231c:	23c0      	movs	r3, #192	; 0xc0
 800231e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002320:	2312      	movs	r3, #18
 8002322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	4619      	mov	r1, r3
 800232e:	480b      	ldr	r0, [pc, #44]	; (800235c <HAL_I2C_MspInit+0x78>)
 8002330:	f000 fa80 	bl	8002834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_I2C_MspInit+0x74>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	4a07      	ldr	r2, [pc, #28]	; (8002358 <HAL_I2C_MspInit+0x74>)
 800233a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800233e:	61d3      	str	r3, [r2, #28]
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_I2C_MspInit+0x74>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800234c:	bf00      	nop
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40005400 	.word	0x40005400
 8002358:	40021000 	.word	0x40021000
 800235c:	40010c00 	.word	0x40010c00

08002360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a16      	ldr	r2, [pc, #88]	; (80023d4 <HAL_TIM_Base_MspInit+0x74>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d124      	bne.n	80023ca <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002380:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_TIM_Base_MspInit+0x78>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <HAL_TIM_Base_MspInit+0x78>)
 8002386:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_TIM_Base_MspInit+0x78>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_TIM_Base_MspInit+0x78>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_TIM_Base_MspInit+0x78>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6193      	str	r3, [r2, #24]
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_TIM_Base_MspInit+0x78>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 0310 	add.w	r3, r7, #16
 80023c2:	4619      	mov	r1, r3
 80023c4:	4805      	ldr	r0, [pc, #20]	; (80023dc <HAL_TIM_Base_MspInit+0x7c>)
 80023c6:	f000 fa35 	bl	8002834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023ca:	bf00      	nop
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40010800 	.word	0x40010800

080023e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <NMI_Handler+0x4>

080023e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ea:	e7fe      	b.n	80023ea <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <MemManage_Handler+0x4>

080023f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f6:	e7fe      	b.n	80023f6 <BusFault_Handler+0x4>

080023f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <UsageFault_Handler+0x4>

080023fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002426:	f000 f8b7 	bl	8002598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}

0800242e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002432:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002436:	f000 fbc9 	bl	8002bcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800243a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800243e:	f000 fbc5 	bl	8002bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002450:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <_sbrk+0x5c>)
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <_sbrk+0x60>)
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <_sbrk+0x64>)
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <_sbrk+0x68>)
 8002468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <_sbrk+0x64>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	429a      	cmp	r2, r3
 8002476:	d207      	bcs.n	8002488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002478:	f001 fffc 	bl	8004474 <__errno>
 800247c:	4603      	mov	r3, r0
 800247e:	220c      	movs	r2, #12
 8002480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002482:	f04f 33ff 	mov.w	r3, #4294967295
 8002486:	e009      	b.n	800249c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <_sbrk+0x64>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <_sbrk+0x64>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	4a05      	ldr	r2, [pc, #20]	; (80024ac <_sbrk+0x64>)
 8002498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249a:	68fb      	ldr	r3, [r7, #12]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20005000 	.word	0x20005000
 80024a8:	00000400 	.word	0x00000400
 80024ac:	20000568 	.word	0x20000568
 80024b0:	20000580 	.word	0x20000580

080024b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024c0:	480c      	ldr	r0, [pc, #48]	; (80024f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024c2:	490d      	ldr	r1, [pc, #52]	; (80024f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024d8:	4c0a      	ldr	r4, [pc, #40]	; (8002504 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024e6:	f7ff ffe5 	bl	80024b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ea:	f001 ffc9 	bl	8004480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ee:	f7ff fa0f 	bl	8001910 <main>
  bx lr
 80024f2:	4770      	bx	lr
  ldr r0, =_sdata
 80024f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80024fc:	080065c4 	.word	0x080065c4
  ldr r2, =_sbss
 8002500:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002504:	20000580 	.word	0x20000580

08002508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC1_2_IRQHandler>
	...

0800250c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <HAL_Init+0x28>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a07      	ldr	r2, [pc, #28]	; (8002534 <HAL_Init+0x28>)
 8002516:	f043 0310 	orr.w	r3, r3, #16
 800251a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251c:	2003      	movs	r0, #3
 800251e:	f000 f947 	bl	80027b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002522:	200f      	movs	r0, #15
 8002524:	f000 f808 	bl	8002538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002528:	f7ff feaa 	bl	8002280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000

08002538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_InitTick+0x54>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_InitTick+0x58>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800254e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f95f 	bl	800281a <HAL_SYSTICK_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00e      	b.n	8002584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d80a      	bhi.n	8002582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800256c:	2200      	movs	r2, #0
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f000 f927 	bl	80027c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <HAL_InitTick+0x5c>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000010 	.word	0x20000010
 8002590:	20000018 	.word	0x20000018
 8002594:	20000014 	.word	0x20000014

08002598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_IncTick+0x1c>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_IncTick+0x20>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a03      	ldr	r2, [pc, #12]	; (80025b8 <HAL_IncTick+0x20>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	20000018 	.word	0x20000018
 80025b8:	2000056c 	.word	0x2000056c

080025bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return uwTick;
 80025c0:	4b02      	ldr	r3, [pc, #8]	; (80025cc <HAL_GetTick+0x10>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	2000056c 	.word	0x2000056c

080025d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff fff0 	bl	80025bc <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d005      	beq.n	80025f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_Delay+0x44>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025f6:	bf00      	nop
 80025f8:	f7ff ffe0 	bl	80025bc <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	429a      	cmp	r2, r3
 8002606:	d8f7      	bhi.n	80025f8 <HAL_Delay+0x28>
  {
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000018 	.word	0x20000018

08002618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <__NVIC_GetPriorityGrouping+0x18>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	f003 0307 	and.w	r3, r3, #7
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	2b00      	cmp	r3, #0
 800268c:	db0b      	blt.n	80026a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	4906      	ldr	r1, [pc, #24]	; (80026b0 <__NVIC_EnableIRQ+0x34>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2001      	movs	r0, #1
 800269e:	fa00 f202 	lsl.w	r2, r0, r2
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	e000e100 	.word	0xe000e100

080026b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0a      	blt.n	80026de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	490c      	ldr	r1, [pc, #48]	; (8002700 <__NVIC_SetPriority+0x4c>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	440b      	add	r3, r1
 80026d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026dc:	e00a      	b.n	80026f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4908      	ldr	r1, [pc, #32]	; (8002704 <__NVIC_SetPriority+0x50>)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	3b04      	subs	r3, #4
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	761a      	strb	r2, [r3, #24]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f1c3 0307 	rsb	r3, r3, #7
 8002722:	2b04      	cmp	r3, #4
 8002724:	bf28      	it	cs
 8002726:	2304      	movcs	r3, #4
 8002728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3304      	adds	r3, #4
 800272e:	2b06      	cmp	r3, #6
 8002730:	d902      	bls.n	8002738 <NVIC_EncodePriority+0x30>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3b03      	subs	r3, #3
 8002736:	e000      	b.n	800273a <NVIC_EncodePriority+0x32>
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002750:	f04f 31ff 	mov.w	r1, #4294967295
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43d9      	mvns	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	4313      	orrs	r3, r2
         );
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	; 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800277c:	d301      	bcc.n	8002782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277e:	2301      	movs	r3, #1
 8002780:	e00f      	b.n	80027a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <SysTick_Config+0x40>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278a:	210f      	movs	r1, #15
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	f7ff ff90 	bl	80026b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <SysTick_Config+0x40>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <SysTick_Config+0x40>)
 800279c:	2207      	movs	r2, #7
 800279e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	e000e010 	.word	0xe000e010

080027b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff2d 	bl	8002618 <__NVIC_SetPriorityGrouping>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d8:	f7ff ff42 	bl	8002660 <__NVIC_GetPriorityGrouping>
 80027dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff ff90 	bl	8002708 <NVIC_EncodePriority>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff5f 	bl	80026b4 <__NVIC_SetPriority>
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff35 	bl	800267c <__NVIC_EnableIRQ>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ffa2 	bl	800276c <SysTick_Config>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002834:	b480      	push	{r7}
 8002836:	b08b      	sub	sp, #44	; 0x2c
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283e:	2300      	movs	r3, #0
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002846:	e169      	b.n	8002b1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002848:	2201      	movs	r2, #1
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8158 	bne.w	8002b16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4a9a      	ldr	r2, [pc, #616]	; (8002ad4 <HAL_GPIO_Init+0x2a0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d05e      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 8002870:	4a98      	ldr	r2, [pc, #608]	; (8002ad4 <HAL_GPIO_Init+0x2a0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d875      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 8002876:	4a98      	ldr	r2, [pc, #608]	; (8002ad8 <HAL_GPIO_Init+0x2a4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d058      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 800287c:	4a96      	ldr	r2, [pc, #600]	; (8002ad8 <HAL_GPIO_Init+0x2a4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d86f      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 8002882:	4a96      	ldr	r2, [pc, #600]	; (8002adc <HAL_GPIO_Init+0x2a8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d052      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 8002888:	4a94      	ldr	r2, [pc, #592]	; (8002adc <HAL_GPIO_Init+0x2a8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d869      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 800288e:	4a94      	ldr	r2, [pc, #592]	; (8002ae0 <HAL_GPIO_Init+0x2ac>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d04c      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 8002894:	4a92      	ldr	r2, [pc, #584]	; (8002ae0 <HAL_GPIO_Init+0x2ac>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d863      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 800289a:	4a92      	ldr	r2, [pc, #584]	; (8002ae4 <HAL_GPIO_Init+0x2b0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d046      	beq.n	800292e <HAL_GPIO_Init+0xfa>
 80028a0:	4a90      	ldr	r2, [pc, #576]	; (8002ae4 <HAL_GPIO_Init+0x2b0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d85d      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 80028a6:	2b12      	cmp	r3, #18
 80028a8:	d82a      	bhi.n	8002900 <HAL_GPIO_Init+0xcc>
 80028aa:	2b12      	cmp	r3, #18
 80028ac:	d859      	bhi.n	8002962 <HAL_GPIO_Init+0x12e>
 80028ae:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <HAL_GPIO_Init+0x80>)
 80028b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b4:	0800292f 	.word	0x0800292f
 80028b8:	08002909 	.word	0x08002909
 80028bc:	0800291b 	.word	0x0800291b
 80028c0:	0800295d 	.word	0x0800295d
 80028c4:	08002963 	.word	0x08002963
 80028c8:	08002963 	.word	0x08002963
 80028cc:	08002963 	.word	0x08002963
 80028d0:	08002963 	.word	0x08002963
 80028d4:	08002963 	.word	0x08002963
 80028d8:	08002963 	.word	0x08002963
 80028dc:	08002963 	.word	0x08002963
 80028e0:	08002963 	.word	0x08002963
 80028e4:	08002963 	.word	0x08002963
 80028e8:	08002963 	.word	0x08002963
 80028ec:	08002963 	.word	0x08002963
 80028f0:	08002963 	.word	0x08002963
 80028f4:	08002963 	.word	0x08002963
 80028f8:	08002911 	.word	0x08002911
 80028fc:	08002925 	.word	0x08002925
 8002900:	4a79      	ldr	r2, [pc, #484]	; (8002ae8 <HAL_GPIO_Init+0x2b4>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002906:	e02c      	b.n	8002962 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	623b      	str	r3, [r7, #32]
          break;
 800290e:	e029      	b.n	8002964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	3304      	adds	r3, #4
 8002916:	623b      	str	r3, [r7, #32]
          break;
 8002918:	e024      	b.n	8002964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	3308      	adds	r3, #8
 8002920:	623b      	str	r3, [r7, #32]
          break;
 8002922:	e01f      	b.n	8002964 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	330c      	adds	r3, #12
 800292a:	623b      	str	r3, [r7, #32]
          break;
 800292c:	e01a      	b.n	8002964 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002936:	2304      	movs	r3, #4
 8002938:	623b      	str	r3, [r7, #32]
          break;
 800293a:	e013      	b.n	8002964 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d105      	bne.n	8002950 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002944:	2308      	movs	r3, #8
 8002946:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	611a      	str	r2, [r3, #16]
          break;
 800294e:	e009      	b.n	8002964 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002950:	2308      	movs	r3, #8
 8002952:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	615a      	str	r2, [r3, #20]
          break;
 800295a:	e003      	b.n	8002964 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800295c:	2300      	movs	r3, #0
 800295e:	623b      	str	r3, [r7, #32]
          break;
 8002960:	e000      	b.n	8002964 <HAL_GPIO_Init+0x130>
          break;
 8002962:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	2bff      	cmp	r3, #255	; 0xff
 8002968:	d801      	bhi.n	800296e <HAL_GPIO_Init+0x13a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	e001      	b.n	8002972 <HAL_GPIO_Init+0x13e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3304      	adds	r3, #4
 8002972:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2bff      	cmp	r3, #255	; 0xff
 8002978:	d802      	bhi.n	8002980 <HAL_GPIO_Init+0x14c>
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	e002      	b.n	8002986 <HAL_GPIO_Init+0x152>
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	3b08      	subs	r3, #8
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	210f      	movs	r1, #15
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	401a      	ands	r2, r3
 8002998:	6a39      	ldr	r1, [r7, #32]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	fa01 f303 	lsl.w	r3, r1, r3
 80029a0:	431a      	orrs	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 80b1 	beq.w	8002b16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029b4:	4b4d      	ldr	r3, [pc, #308]	; (8002aec <HAL_GPIO_Init+0x2b8>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	4a4c      	ldr	r2, [pc, #304]	; (8002aec <HAL_GPIO_Init+0x2b8>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6193      	str	r3, [r2, #24]
 80029c0:	4b4a      	ldr	r3, [pc, #296]	; (8002aec <HAL_GPIO_Init+0x2b8>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029cc:	4a48      	ldr	r2, [pc, #288]	; (8002af0 <HAL_GPIO_Init+0x2bc>)
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	220f      	movs	r2, #15
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4013      	ands	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a40      	ldr	r2, [pc, #256]	; (8002af4 <HAL_GPIO_Init+0x2c0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d013      	beq.n	8002a20 <HAL_GPIO_Init+0x1ec>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a3f      	ldr	r2, [pc, #252]	; (8002af8 <HAL_GPIO_Init+0x2c4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00d      	beq.n	8002a1c <HAL_GPIO_Init+0x1e8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a3e      	ldr	r2, [pc, #248]	; (8002afc <HAL_GPIO_Init+0x2c8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d007      	beq.n	8002a18 <HAL_GPIO_Init+0x1e4>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a3d      	ldr	r2, [pc, #244]	; (8002b00 <HAL_GPIO_Init+0x2cc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_GPIO_Init+0x1e0>
 8002a10:	2303      	movs	r3, #3
 8002a12:	e006      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a14:	2304      	movs	r3, #4
 8002a16:	e004      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e002      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_GPIO_Init+0x1ee>
 8002a20:	2300      	movs	r3, #0
 8002a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a24:	f002 0203 	and.w	r2, r2, #3
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	4093      	lsls	r3, r2
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a32:	492f      	ldr	r1, [pc, #188]	; (8002af0 <HAL_GPIO_Init+0x2bc>)
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	3302      	adds	r3, #2
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d006      	beq.n	8002a5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	492c      	ldr	r1, [pc, #176]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	4928      	ldr	r1, [pc, #160]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d006      	beq.n	8002a82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a74:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	4922      	ldr	r1, [pc, #136]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
 8002a80:	e006      	b.n	8002a90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	491e      	ldr	r1, [pc, #120]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d006      	beq.n	8002aaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a9c:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	4918      	ldr	r1, [pc, #96]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]
 8002aa8:	e006      	b.n	8002ab8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	4914      	ldr	r1, [pc, #80]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d021      	beq.n	8002b08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	490e      	ldr	r1, [pc, #56]	; (8002b04 <HAL_GPIO_Init+0x2d0>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60cb      	str	r3, [r1, #12]
 8002ad0:	e021      	b.n	8002b16 <HAL_GPIO_Init+0x2e2>
 8002ad2:	bf00      	nop
 8002ad4:	10320000 	.word	0x10320000
 8002ad8:	10310000 	.word	0x10310000
 8002adc:	10220000 	.word	0x10220000
 8002ae0:	10210000 	.word	0x10210000
 8002ae4:	10120000 	.word	0x10120000
 8002ae8:	10110000 	.word	0x10110000
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40010800 	.word	0x40010800
 8002af8:	40010c00 	.word	0x40010c00
 8002afc:	40011000 	.word	0x40011000
 8002b00:	40011400 	.word	0x40011400
 8002b04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_GPIO_Init+0x304>)
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	4909      	ldr	r1, [pc, #36]	; (8002b38 <HAL_GPIO_Init+0x304>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	3301      	adds	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f47f ae8e 	bne.w	8002848 <HAL_GPIO_Init+0x14>
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	372c      	adds	r7, #44	; 0x2c
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	40010400 	.word	0x40010400

08002b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
 8002b58:	e001      	b.n	8002b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	807b      	strh	r3, [r7, #2]
 8002b76:	4613      	mov	r3, r2
 8002b78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b7a:	787b      	ldrb	r3, [r7, #1]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b80:	887a      	ldrh	r2, [r7, #2]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b86:	e003      	b.n	8002b90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	041a      	lsls	r2, r3, #16
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	611a      	str	r2, [r3, #16]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bac:	887a      	ldrh	r2, [r7, #2]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	041a      	lsls	r2, r3, #16
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	400b      	ands	r3, r1
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	611a      	str	r2, [r3, #16]
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bd6:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002be2:	4a05      	ldr	r2, [pc, #20]	; (8002bf8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f806 	bl	8002bfc <HAL_GPIO_EXTI_Callback>
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40010400 	.word	0x40010400

08002bfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e12b      	b.n	8002e7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff fb54 	bl	80022e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2224      	movs	r2, #36	; 0x24
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c74:	f001 f918 	bl	8003ea8 <HAL_RCC_GetPCLK1Freq>
 8002c78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4a81      	ldr	r2, [pc, #516]	; (8002e84 <HAL_I2C_Init+0x274>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d807      	bhi.n	8002c94 <HAL_I2C_Init+0x84>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a80      	ldr	r2, [pc, #512]	; (8002e88 <HAL_I2C_Init+0x278>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	bf94      	ite	ls
 8002c8c:	2301      	movls	r3, #1
 8002c8e:	2300      	movhi	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e006      	b.n	8002ca2 <HAL_I2C_Init+0x92>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a7d      	ldr	r2, [pc, #500]	; (8002e8c <HAL_I2C_Init+0x27c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	bf94      	ite	ls
 8002c9c:	2301      	movls	r3, #1
 8002c9e:	2300      	movhi	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0e7      	b.n	8002e7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a78      	ldr	r2, [pc, #480]	; (8002e90 <HAL_I2C_Init+0x280>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	0c9b      	lsrs	r3, r3, #18
 8002cb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a6a      	ldr	r2, [pc, #424]	; (8002e84 <HAL_I2C_Init+0x274>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d802      	bhi.n	8002ce4 <HAL_I2C_Init+0xd4>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	e009      	b.n	8002cf8 <HAL_I2C_Init+0xe8>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	4a69      	ldr	r2, [pc, #420]	; (8002e94 <HAL_I2C_Init+0x284>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	495c      	ldr	r1, [pc, #368]	; (8002e84 <HAL_I2C_Init+0x274>)
 8002d14:	428b      	cmp	r3, r1
 8002d16:	d819      	bhi.n	8002d4c <HAL_I2C_Init+0x13c>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1e59      	subs	r1, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d26:	1c59      	adds	r1, r3, #1
 8002d28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d2c:	400b      	ands	r3, r1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_I2C_Init+0x138>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1e59      	subs	r1, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d40:	3301      	adds	r3, #1
 8002d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d46:	e051      	b.n	8002dec <HAL_I2C_Init+0x1dc>
 8002d48:	2304      	movs	r3, #4
 8002d4a:	e04f      	b.n	8002dec <HAL_I2C_Init+0x1dc>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d111      	bne.n	8002d78 <HAL_I2C_Init+0x168>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1e58      	subs	r0, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	440b      	add	r3, r1
 8002d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e012      	b.n	8002d9e <HAL_I2C_Init+0x18e>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1e58      	subs	r0, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	0099      	lsls	r1, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Init+0x196>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e022      	b.n	8002dec <HAL_I2C_Init+0x1dc>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10e      	bne.n	8002dcc <HAL_I2C_Init+0x1bc>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	1e58      	subs	r0, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6859      	ldr	r1, [r3, #4]
 8002db6:	460b      	mov	r3, r1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	440b      	add	r3, r1
 8002dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dca:	e00f      	b.n	8002dec <HAL_I2C_Init+0x1dc>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1e58      	subs	r0, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	0099      	lsls	r1, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de2:	3301      	adds	r3, #1
 8002de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	6809      	ldr	r1, [r1, #0]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6911      	ldr	r1, [r2, #16]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68d2      	ldr	r2, [r2, #12]
 8002e26:	4311      	orrs	r1, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	000186a0 	.word	0x000186a0
 8002e88:	001e847f 	.word	0x001e847f
 8002e8c:	003d08ff 	.word	0x003d08ff
 8002e90:	431bde83 	.word	0x431bde83
 8002e94:	10624dd3 	.word	0x10624dd3

08002e98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	817b      	strh	r3, [r7, #10]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7ff fb86 	bl	80025bc <HAL_GetTick>
 8002eb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	f040 80e0 	bne.w	8003080 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	2319      	movs	r3, #25
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4970      	ldr	r1, [pc, #448]	; (800308c <HAL_I2C_Master_Transmit+0x1f4>)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fa92 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e0d3      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_I2C_Master_Transmit+0x50>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e0cc      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d007      	beq.n	8002f0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0201 	orr.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2221      	movs	r2, #33	; 0x21
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2210      	movs	r2, #16
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	893a      	ldrh	r2, [r7, #8]
 8002f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4a50      	ldr	r2, [pc, #320]	; (8003090 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f50:	8979      	ldrh	r1, [r7, #10]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f9ca 	bl	80032f0 <I2C_MasterRequestWrite>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e08d      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f7c:	e066      	b.n	800304c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	6a39      	ldr	r1, [r7, #32]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fb0c 	bl	80035a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d107      	bne.n	8002fa6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e06b      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d11b      	bne.n	8003020 <HAL_I2C_Master_Transmit+0x188>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d017      	beq.n	8003020 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	6a39      	ldr	r1, [r7, #32]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fafc 	bl	8003622 <I2C_WaitOnBTFFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00d      	beq.n	800304c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	2b04      	cmp	r3, #4
 8003036:	d107      	bne.n	8003048 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003046:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e01a      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	d194      	bne.n	8002f7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	00100002 	.word	0x00100002
 8003090:	ffff0000 	.word	0xffff0000

08003094 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	603b      	str	r3, [r7, #0]
 80030a0:	460b      	mov	r3, r1
 80030a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80030a4:	f7ff fa8a 	bl	80025bc <HAL_GetTick>
 80030a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80030aa:	2301      	movs	r3, #1
 80030ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	f040 8111 	bne.w	80032de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	2319      	movs	r3, #25
 80030c2:	2201      	movs	r2, #1
 80030c4:	4988      	ldr	r1, [pc, #544]	; (80032e8 <HAL_I2C_IsDeviceReady+0x254>)
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f994 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
 80030d4:	e104      	b.n	80032e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_I2C_IsDeviceReady+0x50>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e0fd      	b.n	80032e0 <HAL_I2C_IsDeviceReady+0x24c>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d007      	beq.n	800310a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 0201 	orr.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003118:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2224      	movs	r2, #36	; 0x24
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4a70      	ldr	r2, [pc, #448]	; (80032ec <HAL_I2C_IsDeviceReady+0x258>)
 800312c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	2200      	movs	r2, #0
 8003146:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f952 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003164:	d103      	bne.n	800316e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e0b6      	b.n	80032e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003172:	897b      	ldrh	r3, [r7, #10]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003180:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003182:	f7ff fa1b 	bl	80025bc <HAL_GetTick>
 8003186:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b02      	cmp	r3, #2
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ac:	bf0c      	ite	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	2300      	movne	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031b6:	e025      	b.n	8003204 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031b8:	f7ff fa00 	bl	80025bc <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d302      	bcc.n	80031ce <HAL_I2C_IsDeviceReady+0x13a>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d103      	bne.n	80031d6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	22a0      	movs	r2, #160	; 0xa0
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2ba0      	cmp	r3, #160	; 0xa0
 800320e:	d005      	beq.n	800321c <HAL_I2C_IsDeviceReady+0x188>
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <HAL_I2C_IsDeviceReady+0x188>
 8003216:	7dbb      	ldrb	r3, [r7, #22]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0cd      	beq.n	80031b8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b02      	cmp	r3, #2
 8003230:	d129      	bne.n	8003286 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003240:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	2319      	movs	r3, #25
 800325e:	2201      	movs	r2, #1
 8003260:	4921      	ldr	r1, [pc, #132]	; (80032e8 <HAL_I2C_IsDeviceReady+0x254>)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f8c6 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e036      	b.n	80032e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e02c      	b.n	80032e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003294:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800329e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2319      	movs	r3, #25
 80032a6:	2201      	movs	r2, #1
 80032a8:	490f      	ldr	r1, [pc, #60]	; (80032e8 <HAL_I2C_IsDeviceReady+0x254>)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f8a2 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e012      	b.n	80032e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	3301      	adds	r3, #1
 80032be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	f4ff af32 	bcc.w	800312e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032de:	2302      	movs	r3, #2
  }
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	00100002 	.word	0x00100002
 80032ec:	ffff0000 	.word	0xffff0000

080032f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	460b      	mov	r3, r1
 80032fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b08      	cmp	r3, #8
 800330a:	d006      	beq.n	800331a <I2C_MasterRequestWrite+0x2a>
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d003      	beq.n	800331a <I2C_MasterRequestWrite+0x2a>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003318:	d108      	bne.n	800332c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e00b      	b.n	8003344 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	2b12      	cmp	r3, #18
 8003332:	d107      	bne.n	8003344 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003342:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f84f 	bl	80033f4 <I2C_WaitOnFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00d      	beq.n	8003378 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336a:	d103      	bne.n	8003374 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e035      	b.n	80033e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003380:	d108      	bne.n	8003394 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003382:	897b      	ldrh	r3, [r7, #10]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003390:	611a      	str	r2, [r3, #16]
 8003392:	e01b      	b.n	80033cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003394:	897b      	ldrh	r3, [r7, #10]
 8003396:	11db      	asrs	r3, r3, #7
 8003398:	b2db      	uxtb	r3, r3
 800339a:	f003 0306 	and.w	r3, r3, #6
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f063 030f 	orn	r3, r3, #15
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	490e      	ldr	r1, [pc, #56]	; (80033ec <I2C_MasterRequestWrite+0xfc>)
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f875 	bl	80034a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e010      	b.n	80033e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033c2:	897b      	ldrh	r3, [r7, #10]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4907      	ldr	r1, [pc, #28]	; (80033f0 <I2C_MasterRequestWrite+0x100>)
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f865 	bl	80034a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	00010008 	.word	0x00010008
 80033f0:	00010002 	.word	0x00010002

080033f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003404:	e025      	b.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d021      	beq.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7ff f8d5 	bl	80025bc <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d116      	bne.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f043 0220 	orr.w	r2, r3, #32
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e023      	b.n	800349a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d10d      	bne.n	8003478 <I2C_WaitOnFlagUntilTimeout+0x84>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	43da      	mvns	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4013      	ands	r3, r2
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	bf0c      	ite	eq
 800346e:	2301      	moveq	r3, #1
 8003470:	2300      	movne	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	e00c      	b.n	8003492 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	43da      	mvns	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4013      	ands	r3, r2
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	bf0c      	ite	eq
 800348a:	2301      	moveq	r3, #1
 800348c:	2300      	movne	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	429a      	cmp	r2, r3
 8003496:	d0b6      	beq.n	8003406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034b0:	e051      	b.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c0:	d123      	bne.n	800350a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f043 0204 	orr.w	r2, r3, #4
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e046      	b.n	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d021      	beq.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003512:	f7ff f853 	bl	80025bc <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d302      	bcc.n	8003528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d116      	bne.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e020      	b.n	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d10c      	bne.n	800357a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	43da      	mvns	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4013      	ands	r3, r2
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	bf14      	ite	ne
 8003572:	2301      	movne	r3, #1
 8003574:	2300      	moveq	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	e00b      	b.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	43da      	mvns	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d18d      	bne.n	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035ac:	e02d      	b.n	800360a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f878 	bl	80036a4 <I2C_IsAcknowledgeFailed>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e02d      	b.n	800361a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d021      	beq.n	800360a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7fe fff9 	bl	80025bc <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d116      	bne.n	800360a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f043 0220 	orr.w	r2, r3, #32
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e007      	b.n	800361a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	2b80      	cmp	r3, #128	; 0x80
 8003616:	d1ca      	bne.n	80035ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800362e:	e02d      	b.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f837 	bl	80036a4 <I2C_IsAcknowledgeFailed>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e02d      	b.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d021      	beq.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003648:	f7fe ffb8 	bl	80025bc <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	429a      	cmp	r2, r3
 8003656:	d302      	bcc.n	800365e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d116      	bne.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f043 0220 	orr.w	r2, r3, #32
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e007      	b.n	800369c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b04      	cmp	r3, #4
 8003698:	d1ca      	bne.n	8003630 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d11b      	bne.n	80036f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f043 0204 	orr.w	r2, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e272      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8087 	beq.w	800382e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003720:	4b92      	ldr	r3, [pc, #584]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b04      	cmp	r3, #4
 800372a:	d00c      	beq.n	8003746 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800372c:	4b8f      	ldr	r3, [pc, #572]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	2b08      	cmp	r3, #8
 8003736:	d112      	bne.n	800375e <HAL_RCC_OscConfig+0x5e>
 8003738:	4b8c      	ldr	r3, [pc, #560]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003744:	d10b      	bne.n	800375e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003746:	4b89      	ldr	r3, [pc, #548]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d06c      	beq.n	800382c <HAL_RCC_OscConfig+0x12c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d168      	bne.n	800382c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e24c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x76>
 8003768:	4b80      	ldr	r3, [pc, #512]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a7f      	ldr	r2, [pc, #508]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 800376e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	e02e      	b.n	80037d4 <HAL_RCC_OscConfig+0xd4>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x98>
 800377e:	4b7b      	ldr	r3, [pc, #492]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a7a      	ldr	r2, [pc, #488]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	4b78      	ldr	r3, [pc, #480]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a77      	ldr	r2, [pc, #476]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	e01d      	b.n	80037d4 <HAL_RCC_OscConfig+0xd4>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0xbc>
 80037a2:	4b72      	ldr	r3, [pc, #456]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a71      	ldr	r2, [pc, #452]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	4b6f      	ldr	r3, [pc, #444]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a6e      	ldr	r2, [pc, #440]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	e00b      	b.n	80037d4 <HAL_RCC_OscConfig+0xd4>
 80037bc:	4b6b      	ldr	r3, [pc, #428]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6a      	ldr	r2, [pc, #424]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b68      	ldr	r3, [pc, #416]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a67      	ldr	r2, [pc, #412]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d013      	beq.n	8003804 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fe feee 	bl	80025bc <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fe feea 	bl	80025bc <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	; 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e200      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	4b5d      	ldr	r3, [pc, #372]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0xe4>
 8003802:	e014      	b.n	800382e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003804:	f7fe feda 	bl	80025bc <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800380c:	f7fe fed6 	bl	80025bc <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e1ec      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381e:	4b53      	ldr	r3, [pc, #332]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x10c>
 800382a:	e000      	b.n	800382e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800382c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d063      	beq.n	8003902 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800383a:	4b4c      	ldr	r3, [pc, #304]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003846:	4b49      	ldr	r3, [pc, #292]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 030c 	and.w	r3, r3, #12
 800384e:	2b08      	cmp	r3, #8
 8003850:	d11c      	bne.n	800388c <HAL_RCC_OscConfig+0x18c>
 8003852:	4b46      	ldr	r3, [pc, #280]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d116      	bne.n	800388c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385e:	4b43      	ldr	r3, [pc, #268]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_RCC_OscConfig+0x176>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d001      	beq.n	8003876 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e1c0      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003876:	4b3d      	ldr	r3, [pc, #244]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4939      	ldr	r1, [pc, #228]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388a:	e03a      	b.n	8003902 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d020      	beq.n	80038d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003894:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389a:	f7fe fe8f 	bl	80025bc <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a2:	f7fe fe8b 	bl	80025bc <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e1a1      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b4:	4b2d      	ldr	r3, [pc, #180]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c0:	4b2a      	ldr	r3, [pc, #168]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4927      	ldr	r1, [pc, #156]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	600b      	str	r3, [r1, #0]
 80038d4:	e015      	b.n	8003902 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d6:	4b26      	ldr	r3, [pc, #152]	; (8003970 <HAL_RCC_OscConfig+0x270>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fe fe6e 	bl	80025bc <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e4:	f7fe fe6a 	bl	80025bc <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e180      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f6:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d03a      	beq.n	8003984 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d019      	beq.n	800394a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003916:	4b17      	ldr	r3, [pc, #92]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 8003918:	2201      	movs	r2, #1
 800391a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391c:	f7fe fe4e 	bl	80025bc <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003924:	f7fe fe4a 	bl	80025bc <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e160      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_RCC_OscConfig+0x26c>)
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003942:	2001      	movs	r0, #1
 8003944:	f000 fac4 	bl	8003ed0 <RCC_Delay>
 8003948:	e01c      	b.n	8003984 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <HAL_RCC_OscConfig+0x274>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003950:	f7fe fe34 	bl	80025bc <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003956:	e00f      	b.n	8003978 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003958:	f7fe fe30 	bl	80025bc <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d908      	bls.n	8003978 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e146      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	42420000 	.word	0x42420000
 8003974:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003978:	4b92      	ldr	r3, [pc, #584]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e9      	bne.n	8003958 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80a6 	beq.w	8003ade <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003996:	4b8b      	ldr	r3, [pc, #556]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039a2:	4b88      	ldr	r3, [pc, #544]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4a87      	ldr	r2, [pc, #540]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ac:	61d3      	str	r3, [r2, #28]
 80039ae:	4b85      	ldr	r3, [pc, #532]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039be:	4b82      	ldr	r3, [pc, #520]	; (8003bc8 <HAL_RCC_OscConfig+0x4c8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d118      	bne.n	80039fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ca:	4b7f      	ldr	r3, [pc, #508]	; (8003bc8 <HAL_RCC_OscConfig+0x4c8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a7e      	ldr	r2, [pc, #504]	; (8003bc8 <HAL_RCC_OscConfig+0x4c8>)
 80039d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d6:	f7fe fdf1 	bl	80025bc <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039de:	f7fe fded 	bl	80025bc <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b64      	cmp	r3, #100	; 0x64
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e103      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	4b75      	ldr	r3, [pc, #468]	; (8003bc8 <HAL_RCC_OscConfig+0x4c8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x312>
 8003a04:	4b6f      	ldr	r3, [pc, #444]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4a6e      	ldr	r2, [pc, #440]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6213      	str	r3, [r2, #32]
 8003a10:	e02d      	b.n	8003a6e <HAL_RCC_OscConfig+0x36e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x334>
 8003a1a:	4b6a      	ldr	r3, [pc, #424]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4a69      	ldr	r2, [pc, #420]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	6213      	str	r3, [r2, #32]
 8003a26:	4b67      	ldr	r3, [pc, #412]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4a66      	ldr	r2, [pc, #408]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	6213      	str	r3, [r2, #32]
 8003a32:	e01c      	b.n	8003a6e <HAL_RCC_OscConfig+0x36e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	d10c      	bne.n	8003a56 <HAL_RCC_OscConfig+0x356>
 8003a3c:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4a60      	ldr	r2, [pc, #384]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a42:	f043 0304 	orr.w	r3, r3, #4
 8003a46:	6213      	str	r3, [r2, #32]
 8003a48:	4b5e      	ldr	r3, [pc, #376]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4a5d      	ldr	r2, [pc, #372]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6213      	str	r3, [r2, #32]
 8003a54:	e00b      	b.n	8003a6e <HAL_RCC_OscConfig+0x36e>
 8003a56:	4b5b      	ldr	r3, [pc, #364]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4a5a      	ldr	r2, [pc, #360]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	6213      	str	r3, [r2, #32]
 8003a62:	4b58      	ldr	r3, [pc, #352]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	4a57      	ldr	r2, [pc, #348]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	f023 0304 	bic.w	r3, r3, #4
 8003a6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d015      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a76:	f7fe fda1 	bl	80025bc <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fe fd9d 	bl	80025bc <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e0b1      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a94:	4b4b      	ldr	r3, [pc, #300]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0ee      	beq.n	8003a7e <HAL_RCC_OscConfig+0x37e>
 8003aa0:	e014      	b.n	8003acc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa2:	f7fe fd8b 	bl	80025bc <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa8:	e00a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aaa:	f7fe fd87 	bl	80025bc <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e09b      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac0:	4b40      	ldr	r3, [pc, #256]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ee      	bne.n	8003aaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d105      	bne.n	8003ade <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad2:	4b3c      	ldr	r3, [pc, #240]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	4a3b      	ldr	r2, [pc, #236]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003adc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f000 8087 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ae8:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 030c 	and.w	r3, r3, #12
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d061      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d146      	bne.n	8003b8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afc:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <HAL_RCC_OscConfig+0x4cc>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b02:	f7fe fd5b 	bl	80025bc <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7fe fd57 	bl	80025bc <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e06d      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1c:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b30:	d108      	bne.n	8003b44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b32:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	4921      	ldr	r1, [pc, #132]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b44:	4b1f      	ldr	r3, [pc, #124]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a19      	ldr	r1, [r3, #32]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	430b      	orrs	r3, r1
 8003b56:	491b      	ldr	r1, [pc, #108]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_RCC_OscConfig+0x4cc>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b62:	f7fe fd2b 	bl	80025bc <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fe fd27 	bl	80025bc <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e03d      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x46a>
 8003b88:	e035      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <HAL_RCC_OscConfig+0x4cc>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe fd14 	bl	80025bc <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b98:	f7fe fd10 	bl	80025bc <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e026      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x498>
 8003bb6:	e01e      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d107      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e019      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40007000 	.word	0x40007000
 8003bcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCC_OscConfig+0x500>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000

08003c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0d0      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c18:	4b6a      	ldr	r3, [pc, #424]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d910      	bls.n	8003c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b67      	ldr	r3, [pc, #412]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 0207 	bic.w	r2, r3, #7
 8003c2e:	4965      	ldr	r1, [pc, #404]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b63      	ldr	r3, [pc, #396]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e0b8      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d020      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c60:	4b59      	ldr	r3, [pc, #356]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a58      	ldr	r2, [pc, #352]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c78:	4b53      	ldr	r3, [pc, #332]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a52      	ldr	r2, [pc, #328]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c84:	4b50      	ldr	r3, [pc, #320]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	494d      	ldr	r1, [pc, #308]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d040      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d115      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e07f      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d107      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc2:	4b41      	ldr	r3, [pc, #260]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e073      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd2:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e06b      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce2:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f023 0203 	bic.w	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4936      	ldr	r1, [pc, #216]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf4:	f7fe fc62 	bl	80025bc <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cfc:	f7fe fc5e 	bl	80025bc <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e053      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 020c 	and.w	r2, r3, #12
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d1eb      	bne.n	8003cfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d24:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d210      	bcs.n	8003d54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f023 0207 	bic.w	r2, r3, #7
 8003d3a:	4922      	ldr	r1, [pc, #136]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d42:	4b20      	ldr	r3, [pc, #128]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d001      	beq.n	8003d54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e032      	b.n	8003dba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4916      	ldr	r1, [pc, #88]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	490e      	ldr	r1, [pc, #56]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d92:	f000 f821 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003d96:	4602      	mov	r2, r0
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	490a      	ldr	r1, [pc, #40]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003da4:	5ccb      	ldrb	r3, [r1, r3]
 8003da6:	fa22 f303 	lsr.w	r3, r2, r3
 8003daa:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fbc0 	bl	8002538 <HAL_InitTick>

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40022000 	.word	0x40022000
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	08006570 	.word	0x08006570
 8003dd0:	20000010 	.word	0x20000010
 8003dd4:	20000014 	.word	0x20000014

08003dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd8:	b490      	push	{r4, r7}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003dde:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xac>)
 8003de0:	1d3c      	adds	r4, r7, #4
 8003de2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003de8:	f240 2301 	movw	r3, #513	; 0x201
 8003dec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	2300      	movs	r3, #0
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e02:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d002      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x40>
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d003      	beq.n	8003e1e <HAL_RCC_GetSysClockFreq+0x46>
 8003e16:	e02b      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e18:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e1a:	623b      	str	r3, [r7, #32]
      break;
 8003e1c:	e02b      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	0c9b      	lsrs	r3, r3, #18
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	3328      	adds	r3, #40	; 0x28
 8003e28:	443b      	add	r3, r7
 8003e2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e2e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d012      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	0c5b      	lsrs	r3, r3, #17
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	3328      	adds	r3, #40	; 0x28
 8003e46:	443b      	add	r3, r7
 8003e48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	4a0e      	ldr	r2, [pc, #56]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e52:	fb03 f202 	mul.w	r2, r3, r2
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	e004      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	623b      	str	r3, [r7, #32]
      break;
 8003e6e:	e002      	b.n	8003e76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e70:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e72:	623b      	str	r3, [r7, #32]
      break;
 8003e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e76:	6a3b      	ldr	r3, [r7, #32]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3728      	adds	r7, #40	; 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc90      	pop	{r4, r7}
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	08005098 	.word	0x08005098
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	007a1200 	.word	0x007a1200
 8003e90:	003d0900 	.word	0x003d0900

08003e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e98:	4b02      	ldr	r3, [pc, #8]	; (8003ea4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr
 8003ea4:	20000010 	.word	0x20000010

08003ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eac:	f7ff fff2 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4903      	ldr	r1, [pc, #12]	; (8003ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	08006580 	.word	0x08006580

08003ed0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <RCC_Delay+0x34>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <RCC_Delay+0x38>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	0a5b      	lsrs	r3, r3, #9
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003eec:	bf00      	nop
  }
  while (Delay --);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1e5a      	subs	r2, r3, #1
 8003ef2:	60fa      	str	r2, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f9      	bne.n	8003eec <RCC_Delay+0x1c>
}
 8003ef8:	bf00      	nop
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	20000010 	.word	0x20000010
 8003f08:	10624dd3 	.word	0x10624dd3

08003f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e041      	b.n	8003fa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fe fa14 	bl	8002360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f000 f93c 	bl	80041c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d001      	beq.n	8003fc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e032      	b.n	800402a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a18      	ldr	r2, [pc, #96]	; (8004034 <HAL_TIM_Base_Start+0x88>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x48>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fde:	d009      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x48>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <HAL_TIM_Base_Start+0x8c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x48>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a13      	ldr	r2, [pc, #76]	; (800403c <HAL_TIM_Base_Start+0x90>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d111      	bne.n	8004018 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b06      	cmp	r3, #6
 8004004:	d010      	beq.n	8004028 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004016:	e007      	b.n	8004028 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40000400 	.word	0x40000400
 800403c:	40000800 	.word	0x40000800

08004040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_TIM_ConfigClockSource+0x18>
 8004054:	2302      	movs	r3, #2
 8004056:	e0b3      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x180>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004076:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800407e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004090:	d03e      	beq.n	8004110 <HAL_TIM_ConfigClockSource+0xd0>
 8004092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004096:	f200 8087 	bhi.w	80041a8 <HAL_TIM_ConfigClockSource+0x168>
 800409a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409e:	f000 8085 	beq.w	80041ac <HAL_TIM_ConfigClockSource+0x16c>
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	d87f      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x168>
 80040a8:	2b70      	cmp	r3, #112	; 0x70
 80040aa:	d01a      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0xa2>
 80040ac:	2b70      	cmp	r3, #112	; 0x70
 80040ae:	d87b      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x168>
 80040b0:	2b60      	cmp	r3, #96	; 0x60
 80040b2:	d050      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x116>
 80040b4:	2b60      	cmp	r3, #96	; 0x60
 80040b6:	d877      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x168>
 80040b8:	2b50      	cmp	r3, #80	; 0x50
 80040ba:	d03c      	beq.n	8004136 <HAL_TIM_ConfigClockSource+0xf6>
 80040bc:	2b50      	cmp	r3, #80	; 0x50
 80040be:	d873      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x168>
 80040c0:	2b40      	cmp	r3, #64	; 0x40
 80040c2:	d058      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x136>
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d86f      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x168>
 80040c8:	2b30      	cmp	r3, #48	; 0x30
 80040ca:	d064      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x156>
 80040cc:	2b30      	cmp	r3, #48	; 0x30
 80040ce:	d86b      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x168>
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d060      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x156>
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d867      	bhi.n	80041a8 <HAL_TIM_ConfigClockSource+0x168>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d05c      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x156>
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d05a      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80040e0:	e062      	b.n	80041a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6899      	ldr	r1, [r3, #8]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f000 f942 	bl	800437a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004104:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	609a      	str	r2, [r3, #8]
      break;
 800410e:	e04e      	b.n	80041ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6899      	ldr	r1, [r3, #8]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f000 f92b 	bl	800437a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004132:	609a      	str	r2, [r3, #8]
      break;
 8004134:	e03b      	b.n	80041ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	461a      	mov	r2, r3
 8004144:	f000 f8a2 	bl	800428c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2150      	movs	r1, #80	; 0x50
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f8f9 	bl	8004346 <TIM_ITRx_SetConfig>
      break;
 8004154:	e02b      	b.n	80041ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6859      	ldr	r1, [r3, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	461a      	mov	r2, r3
 8004164:	f000 f8c0 	bl	80042e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2160      	movs	r1, #96	; 0x60
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f8e9 	bl	8004346 <TIM_ITRx_SetConfig>
      break;
 8004174:	e01b      	b.n	80041ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	461a      	mov	r2, r3
 8004184:	f000 f882 	bl	800428c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2140      	movs	r1, #64	; 0x40
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f8d9 	bl	8004346 <TIM_ITRx_SetConfig>
      break;
 8004194:	e00b      	b.n	80041ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f000 f8d0 	bl	8004346 <TIM_ITRx_SetConfig>
        break;
 80041a6:	e002      	b.n	80041ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041a8:	bf00      	nop
 80041aa:	e000      	b.n	80041ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a29      	ldr	r2, [pc, #164]	; (8004280 <TIM_Base_SetConfig+0xb8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00b      	beq.n	80041f8 <TIM_Base_SetConfig+0x30>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e6:	d007      	beq.n	80041f8 <TIM_Base_SetConfig+0x30>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a26      	ldr	r2, [pc, #152]	; (8004284 <TIM_Base_SetConfig+0xbc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_Base_SetConfig+0x30>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a25      	ldr	r2, [pc, #148]	; (8004288 <TIM_Base_SetConfig+0xc0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d108      	bne.n	800420a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <TIM_Base_SetConfig+0xb8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00b      	beq.n	800422a <TIM_Base_SetConfig+0x62>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004218:	d007      	beq.n	800422a <TIM_Base_SetConfig+0x62>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a19      	ldr	r2, [pc, #100]	; (8004284 <TIM_Base_SetConfig+0xbc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d003      	beq.n	800422a <TIM_Base_SetConfig+0x62>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a18      	ldr	r2, [pc, #96]	; (8004288 <TIM_Base_SetConfig+0xc0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d108      	bne.n	800423c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a07      	ldr	r2, [pc, #28]	; (8004280 <TIM_Base_SetConfig+0xb8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d103      	bne.n	8004270 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	615a      	str	r2, [r3, #20]
}
 8004276:	bf00      	nop
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40000400 	.word	0x40000400
 8004288:	40000800 	.word	0x40000800

0800428c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f023 0201 	bic.w	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f023 030a 	bic.w	r3, r3, #10
 80042c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	621a      	str	r2, [r3, #32]
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f023 0210 	bic.w	r2, r3, #16
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004312:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	031b      	lsls	r3, r3, #12
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004324:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	621a      	str	r2, [r3, #32]
}
 800433c:	bf00      	nop
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr

08004346 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800435c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	f043 0307 	orr.w	r3, r3, #7
 8004368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	609a      	str	r2, [r3, #8]
}
 8004370:	bf00      	nop
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800437a:	b480      	push	{r7}
 800437c:	b087      	sub	sp, #28
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004394:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	021a      	lsls	r2, r3, #8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	431a      	orrs	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	609a      	str	r2, [r3, #8]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr

080043b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e046      	b.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a16      	ldr	r2, [pc, #88]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441c:	d009      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a12      	ldr	r2, [pc, #72]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a10      	ldr	r2, [pc, #64]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d10c      	bne.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4313      	orrs	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr
 8004468:	40012c00 	.word	0x40012c00
 800446c:	40000400 	.word	0x40000400
 8004470:	40000800 	.word	0x40000800

08004474 <__errno>:
 8004474:	4b01      	ldr	r3, [pc, #4]	; (800447c <__errno+0x8>)
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	2000001c 	.word	0x2000001c

08004480 <__libc_init_array>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	2600      	movs	r6, #0
 8004484:	4d0c      	ldr	r5, [pc, #48]	; (80044b8 <__libc_init_array+0x38>)
 8004486:	4c0d      	ldr	r4, [pc, #52]	; (80044bc <__libc_init_array+0x3c>)
 8004488:	1b64      	subs	r4, r4, r5
 800448a:	10a4      	asrs	r4, r4, #2
 800448c:	42a6      	cmp	r6, r4
 800448e:	d109      	bne.n	80044a4 <__libc_init_array+0x24>
 8004490:	f000 fc9c 	bl	8004dcc <_init>
 8004494:	2600      	movs	r6, #0
 8004496:	4d0a      	ldr	r5, [pc, #40]	; (80044c0 <__libc_init_array+0x40>)
 8004498:	4c0a      	ldr	r4, [pc, #40]	; (80044c4 <__libc_init_array+0x44>)
 800449a:	1b64      	subs	r4, r4, r5
 800449c:	10a4      	asrs	r4, r4, #2
 800449e:	42a6      	cmp	r6, r4
 80044a0:	d105      	bne.n	80044ae <__libc_init_array+0x2e>
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a8:	4798      	blx	r3
 80044aa:	3601      	adds	r6, #1
 80044ac:	e7ee      	b.n	800448c <__libc_init_array+0xc>
 80044ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b2:	4798      	blx	r3
 80044b4:	3601      	adds	r6, #1
 80044b6:	e7f2      	b.n	800449e <__libc_init_array+0x1e>
 80044b8:	080065bc 	.word	0x080065bc
 80044bc:	080065bc 	.word	0x080065bc
 80044c0:	080065bc 	.word	0x080065bc
 80044c4:	080065c0 	.word	0x080065c0

080044c8 <memset>:
 80044c8:	4603      	mov	r3, r0
 80044ca:	4402      	add	r2, r0
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d100      	bne.n	80044d2 <memset+0xa>
 80044d0:	4770      	bx	lr
 80044d2:	f803 1b01 	strb.w	r1, [r3], #1
 80044d6:	e7f9      	b.n	80044cc <memset+0x4>

080044d8 <siprintf>:
 80044d8:	b40e      	push	{r1, r2, r3}
 80044da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044de:	b500      	push	{lr}
 80044e0:	b09c      	sub	sp, #112	; 0x70
 80044e2:	ab1d      	add	r3, sp, #116	; 0x74
 80044e4:	9002      	str	r0, [sp, #8]
 80044e6:	9006      	str	r0, [sp, #24]
 80044e8:	9107      	str	r1, [sp, #28]
 80044ea:	9104      	str	r1, [sp, #16]
 80044ec:	4808      	ldr	r0, [pc, #32]	; (8004510 <siprintf+0x38>)
 80044ee:	4909      	ldr	r1, [pc, #36]	; (8004514 <siprintf+0x3c>)
 80044f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80044f4:	9105      	str	r1, [sp, #20]
 80044f6:	6800      	ldr	r0, [r0, #0]
 80044f8:	a902      	add	r1, sp, #8
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	f000 f868 	bl	80045d0 <_svfiprintf_r>
 8004500:	2200      	movs	r2, #0
 8004502:	9b02      	ldr	r3, [sp, #8]
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	b01c      	add	sp, #112	; 0x70
 8004508:	f85d eb04 	ldr.w	lr, [sp], #4
 800450c:	b003      	add	sp, #12
 800450e:	4770      	bx	lr
 8004510:	2000001c 	.word	0x2000001c
 8004514:	ffff0208 	.word	0xffff0208

08004518 <__ssputs_r>:
 8004518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800451c:	688e      	ldr	r6, [r1, #8]
 800451e:	4682      	mov	sl, r0
 8004520:	429e      	cmp	r6, r3
 8004522:	460c      	mov	r4, r1
 8004524:	4690      	mov	r8, r2
 8004526:	461f      	mov	r7, r3
 8004528:	d838      	bhi.n	800459c <__ssputs_r+0x84>
 800452a:	898a      	ldrh	r2, [r1, #12]
 800452c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004530:	d032      	beq.n	8004598 <__ssputs_r+0x80>
 8004532:	6825      	ldr	r5, [r4, #0]
 8004534:	6909      	ldr	r1, [r1, #16]
 8004536:	3301      	adds	r3, #1
 8004538:	eba5 0901 	sub.w	r9, r5, r1
 800453c:	6965      	ldr	r5, [r4, #20]
 800453e:	444b      	add	r3, r9
 8004540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004544:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004548:	106d      	asrs	r5, r5, #1
 800454a:	429d      	cmp	r5, r3
 800454c:	bf38      	it	cc
 800454e:	461d      	movcc	r5, r3
 8004550:	0553      	lsls	r3, r2, #21
 8004552:	d531      	bpl.n	80045b8 <__ssputs_r+0xa0>
 8004554:	4629      	mov	r1, r5
 8004556:	f000 fb6f 	bl	8004c38 <_malloc_r>
 800455a:	4606      	mov	r6, r0
 800455c:	b950      	cbnz	r0, 8004574 <__ssputs_r+0x5c>
 800455e:	230c      	movs	r3, #12
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	f8ca 3000 	str.w	r3, [sl]
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800456e:	81a3      	strh	r3, [r4, #12]
 8004570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004574:	464a      	mov	r2, r9
 8004576:	6921      	ldr	r1, [r4, #16]
 8004578:	f000 face 	bl	8004b18 <memcpy>
 800457c:	89a3      	ldrh	r3, [r4, #12]
 800457e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	6126      	str	r6, [r4, #16]
 800458a:	444e      	add	r6, r9
 800458c:	6026      	str	r6, [r4, #0]
 800458e:	463e      	mov	r6, r7
 8004590:	6165      	str	r5, [r4, #20]
 8004592:	eba5 0509 	sub.w	r5, r5, r9
 8004596:	60a5      	str	r5, [r4, #8]
 8004598:	42be      	cmp	r6, r7
 800459a:	d900      	bls.n	800459e <__ssputs_r+0x86>
 800459c:	463e      	mov	r6, r7
 800459e:	4632      	mov	r2, r6
 80045a0:	4641      	mov	r1, r8
 80045a2:	6820      	ldr	r0, [r4, #0]
 80045a4:	f000 fac6 	bl	8004b34 <memmove>
 80045a8:	68a3      	ldr	r3, [r4, #8]
 80045aa:	2000      	movs	r0, #0
 80045ac:	1b9b      	subs	r3, r3, r6
 80045ae:	60a3      	str	r3, [r4, #8]
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	4433      	add	r3, r6
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	e7db      	b.n	8004570 <__ssputs_r+0x58>
 80045b8:	462a      	mov	r2, r5
 80045ba:	f000 fbb1 	bl	8004d20 <_realloc_r>
 80045be:	4606      	mov	r6, r0
 80045c0:	2800      	cmp	r0, #0
 80045c2:	d1e1      	bne.n	8004588 <__ssputs_r+0x70>
 80045c4:	4650      	mov	r0, sl
 80045c6:	6921      	ldr	r1, [r4, #16]
 80045c8:	f000 face 	bl	8004b68 <_free_r>
 80045cc:	e7c7      	b.n	800455e <__ssputs_r+0x46>
	...

080045d0 <_svfiprintf_r>:
 80045d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d4:	4698      	mov	r8, r3
 80045d6:	898b      	ldrh	r3, [r1, #12]
 80045d8:	4607      	mov	r7, r0
 80045da:	061b      	lsls	r3, r3, #24
 80045dc:	460d      	mov	r5, r1
 80045de:	4614      	mov	r4, r2
 80045e0:	b09d      	sub	sp, #116	; 0x74
 80045e2:	d50e      	bpl.n	8004602 <_svfiprintf_r+0x32>
 80045e4:	690b      	ldr	r3, [r1, #16]
 80045e6:	b963      	cbnz	r3, 8004602 <_svfiprintf_r+0x32>
 80045e8:	2140      	movs	r1, #64	; 0x40
 80045ea:	f000 fb25 	bl	8004c38 <_malloc_r>
 80045ee:	6028      	str	r0, [r5, #0]
 80045f0:	6128      	str	r0, [r5, #16]
 80045f2:	b920      	cbnz	r0, 80045fe <_svfiprintf_r+0x2e>
 80045f4:	230c      	movs	r3, #12
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295
 80045fc:	e0d1      	b.n	80047a2 <_svfiprintf_r+0x1d2>
 80045fe:	2340      	movs	r3, #64	; 0x40
 8004600:	616b      	str	r3, [r5, #20]
 8004602:	2300      	movs	r3, #0
 8004604:	9309      	str	r3, [sp, #36]	; 0x24
 8004606:	2320      	movs	r3, #32
 8004608:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800460c:	2330      	movs	r3, #48	; 0x30
 800460e:	f04f 0901 	mov.w	r9, #1
 8004612:	f8cd 800c 	str.w	r8, [sp, #12]
 8004616:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80047bc <_svfiprintf_r+0x1ec>
 800461a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800461e:	4623      	mov	r3, r4
 8004620:	469a      	mov	sl, r3
 8004622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004626:	b10a      	cbz	r2, 800462c <_svfiprintf_r+0x5c>
 8004628:	2a25      	cmp	r2, #37	; 0x25
 800462a:	d1f9      	bne.n	8004620 <_svfiprintf_r+0x50>
 800462c:	ebba 0b04 	subs.w	fp, sl, r4
 8004630:	d00b      	beq.n	800464a <_svfiprintf_r+0x7a>
 8004632:	465b      	mov	r3, fp
 8004634:	4622      	mov	r2, r4
 8004636:	4629      	mov	r1, r5
 8004638:	4638      	mov	r0, r7
 800463a:	f7ff ff6d 	bl	8004518 <__ssputs_r>
 800463e:	3001      	adds	r0, #1
 8004640:	f000 80aa 	beq.w	8004798 <_svfiprintf_r+0x1c8>
 8004644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004646:	445a      	add	r2, fp
 8004648:	9209      	str	r2, [sp, #36]	; 0x24
 800464a:	f89a 3000 	ldrb.w	r3, [sl]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80a2 	beq.w	8004798 <_svfiprintf_r+0x1c8>
 8004654:	2300      	movs	r3, #0
 8004656:	f04f 32ff 	mov.w	r2, #4294967295
 800465a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800465e:	f10a 0a01 	add.w	sl, sl, #1
 8004662:	9304      	str	r3, [sp, #16]
 8004664:	9307      	str	r3, [sp, #28]
 8004666:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800466a:	931a      	str	r3, [sp, #104]	; 0x68
 800466c:	4654      	mov	r4, sl
 800466e:	2205      	movs	r2, #5
 8004670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004674:	4851      	ldr	r0, [pc, #324]	; (80047bc <_svfiprintf_r+0x1ec>)
 8004676:	f000 fa41 	bl	8004afc <memchr>
 800467a:	9a04      	ldr	r2, [sp, #16]
 800467c:	b9d8      	cbnz	r0, 80046b6 <_svfiprintf_r+0xe6>
 800467e:	06d0      	lsls	r0, r2, #27
 8004680:	bf44      	itt	mi
 8004682:	2320      	movmi	r3, #32
 8004684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004688:	0711      	lsls	r1, r2, #28
 800468a:	bf44      	itt	mi
 800468c:	232b      	movmi	r3, #43	; 0x2b
 800468e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004692:	f89a 3000 	ldrb.w	r3, [sl]
 8004696:	2b2a      	cmp	r3, #42	; 0x2a
 8004698:	d015      	beq.n	80046c6 <_svfiprintf_r+0xf6>
 800469a:	4654      	mov	r4, sl
 800469c:	2000      	movs	r0, #0
 800469e:	f04f 0c0a 	mov.w	ip, #10
 80046a2:	9a07      	ldr	r2, [sp, #28]
 80046a4:	4621      	mov	r1, r4
 80046a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046aa:	3b30      	subs	r3, #48	; 0x30
 80046ac:	2b09      	cmp	r3, #9
 80046ae:	d94e      	bls.n	800474e <_svfiprintf_r+0x17e>
 80046b0:	b1b0      	cbz	r0, 80046e0 <_svfiprintf_r+0x110>
 80046b2:	9207      	str	r2, [sp, #28]
 80046b4:	e014      	b.n	80046e0 <_svfiprintf_r+0x110>
 80046b6:	eba0 0308 	sub.w	r3, r0, r8
 80046ba:	fa09 f303 	lsl.w	r3, r9, r3
 80046be:	4313      	orrs	r3, r2
 80046c0:	46a2      	mov	sl, r4
 80046c2:	9304      	str	r3, [sp, #16]
 80046c4:	e7d2      	b.n	800466c <_svfiprintf_r+0x9c>
 80046c6:	9b03      	ldr	r3, [sp, #12]
 80046c8:	1d19      	adds	r1, r3, #4
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	9103      	str	r1, [sp, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	bfbb      	ittet	lt
 80046d2:	425b      	neglt	r3, r3
 80046d4:	f042 0202 	orrlt.w	r2, r2, #2
 80046d8:	9307      	strge	r3, [sp, #28]
 80046da:	9307      	strlt	r3, [sp, #28]
 80046dc:	bfb8      	it	lt
 80046de:	9204      	strlt	r2, [sp, #16]
 80046e0:	7823      	ldrb	r3, [r4, #0]
 80046e2:	2b2e      	cmp	r3, #46	; 0x2e
 80046e4:	d10c      	bne.n	8004700 <_svfiprintf_r+0x130>
 80046e6:	7863      	ldrb	r3, [r4, #1]
 80046e8:	2b2a      	cmp	r3, #42	; 0x2a
 80046ea:	d135      	bne.n	8004758 <_svfiprintf_r+0x188>
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	3402      	adds	r4, #2
 80046f0:	1d1a      	adds	r2, r3, #4
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	9203      	str	r2, [sp, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	bfb8      	it	lt
 80046fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80046fe:	9305      	str	r3, [sp, #20]
 8004700:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80047c0 <_svfiprintf_r+0x1f0>
 8004704:	2203      	movs	r2, #3
 8004706:	4650      	mov	r0, sl
 8004708:	7821      	ldrb	r1, [r4, #0]
 800470a:	f000 f9f7 	bl	8004afc <memchr>
 800470e:	b140      	cbz	r0, 8004722 <_svfiprintf_r+0x152>
 8004710:	2340      	movs	r3, #64	; 0x40
 8004712:	eba0 000a 	sub.w	r0, r0, sl
 8004716:	fa03 f000 	lsl.w	r0, r3, r0
 800471a:	9b04      	ldr	r3, [sp, #16]
 800471c:	3401      	adds	r4, #1
 800471e:	4303      	orrs	r3, r0
 8004720:	9304      	str	r3, [sp, #16]
 8004722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004726:	2206      	movs	r2, #6
 8004728:	4826      	ldr	r0, [pc, #152]	; (80047c4 <_svfiprintf_r+0x1f4>)
 800472a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800472e:	f000 f9e5 	bl	8004afc <memchr>
 8004732:	2800      	cmp	r0, #0
 8004734:	d038      	beq.n	80047a8 <_svfiprintf_r+0x1d8>
 8004736:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <_svfiprintf_r+0x1f8>)
 8004738:	bb1b      	cbnz	r3, 8004782 <_svfiprintf_r+0x1b2>
 800473a:	9b03      	ldr	r3, [sp, #12]
 800473c:	3307      	adds	r3, #7
 800473e:	f023 0307 	bic.w	r3, r3, #7
 8004742:	3308      	adds	r3, #8
 8004744:	9303      	str	r3, [sp, #12]
 8004746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004748:	4433      	add	r3, r6
 800474a:	9309      	str	r3, [sp, #36]	; 0x24
 800474c:	e767      	b.n	800461e <_svfiprintf_r+0x4e>
 800474e:	460c      	mov	r4, r1
 8004750:	2001      	movs	r0, #1
 8004752:	fb0c 3202 	mla	r2, ip, r2, r3
 8004756:	e7a5      	b.n	80046a4 <_svfiprintf_r+0xd4>
 8004758:	2300      	movs	r3, #0
 800475a:	f04f 0c0a 	mov.w	ip, #10
 800475e:	4619      	mov	r1, r3
 8004760:	3401      	adds	r4, #1
 8004762:	9305      	str	r3, [sp, #20]
 8004764:	4620      	mov	r0, r4
 8004766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800476a:	3a30      	subs	r2, #48	; 0x30
 800476c:	2a09      	cmp	r2, #9
 800476e:	d903      	bls.n	8004778 <_svfiprintf_r+0x1a8>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0c5      	beq.n	8004700 <_svfiprintf_r+0x130>
 8004774:	9105      	str	r1, [sp, #20]
 8004776:	e7c3      	b.n	8004700 <_svfiprintf_r+0x130>
 8004778:	4604      	mov	r4, r0
 800477a:	2301      	movs	r3, #1
 800477c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004780:	e7f0      	b.n	8004764 <_svfiprintf_r+0x194>
 8004782:	ab03      	add	r3, sp, #12
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	462a      	mov	r2, r5
 8004788:	4638      	mov	r0, r7
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <_svfiprintf_r+0x1fc>)
 800478c:	a904      	add	r1, sp, #16
 800478e:	f3af 8000 	nop.w
 8004792:	1c42      	adds	r2, r0, #1
 8004794:	4606      	mov	r6, r0
 8004796:	d1d6      	bne.n	8004746 <_svfiprintf_r+0x176>
 8004798:	89ab      	ldrh	r3, [r5, #12]
 800479a:	065b      	lsls	r3, r3, #25
 800479c:	f53f af2c 	bmi.w	80045f8 <_svfiprintf_r+0x28>
 80047a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047a2:	b01d      	add	sp, #116	; 0x74
 80047a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a8:	ab03      	add	r3, sp, #12
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	462a      	mov	r2, r5
 80047ae:	4638      	mov	r0, r7
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <_svfiprintf_r+0x1fc>)
 80047b2:	a904      	add	r1, sp, #16
 80047b4:	f000 f87c 	bl	80048b0 <_printf_i>
 80047b8:	e7eb      	b.n	8004792 <_svfiprintf_r+0x1c2>
 80047ba:	bf00      	nop
 80047bc:	08006588 	.word	0x08006588
 80047c0:	0800658e 	.word	0x0800658e
 80047c4:	08006592 	.word	0x08006592
 80047c8:	00000000 	.word	0x00000000
 80047cc:	08004519 	.word	0x08004519

080047d0 <_printf_common>:
 80047d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d4:	4616      	mov	r6, r2
 80047d6:	4699      	mov	r9, r3
 80047d8:	688a      	ldr	r2, [r1, #8]
 80047da:	690b      	ldr	r3, [r1, #16]
 80047dc:	4607      	mov	r7, r0
 80047de:	4293      	cmp	r3, r2
 80047e0:	bfb8      	it	lt
 80047e2:	4613      	movlt	r3, r2
 80047e4:	6033      	str	r3, [r6, #0]
 80047e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047ea:	460c      	mov	r4, r1
 80047ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047f0:	b10a      	cbz	r2, 80047f6 <_printf_common+0x26>
 80047f2:	3301      	adds	r3, #1
 80047f4:	6033      	str	r3, [r6, #0]
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	0699      	lsls	r1, r3, #26
 80047fa:	bf42      	ittt	mi
 80047fc:	6833      	ldrmi	r3, [r6, #0]
 80047fe:	3302      	addmi	r3, #2
 8004800:	6033      	strmi	r3, [r6, #0]
 8004802:	6825      	ldr	r5, [r4, #0]
 8004804:	f015 0506 	ands.w	r5, r5, #6
 8004808:	d106      	bne.n	8004818 <_printf_common+0x48>
 800480a:	f104 0a19 	add.w	sl, r4, #25
 800480e:	68e3      	ldr	r3, [r4, #12]
 8004810:	6832      	ldr	r2, [r6, #0]
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	42ab      	cmp	r3, r5
 8004816:	dc28      	bgt.n	800486a <_printf_common+0x9a>
 8004818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800481c:	1e13      	subs	r3, r2, #0
 800481e:	6822      	ldr	r2, [r4, #0]
 8004820:	bf18      	it	ne
 8004822:	2301      	movne	r3, #1
 8004824:	0692      	lsls	r2, r2, #26
 8004826:	d42d      	bmi.n	8004884 <_printf_common+0xb4>
 8004828:	4649      	mov	r1, r9
 800482a:	4638      	mov	r0, r7
 800482c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004830:	47c0      	blx	r8
 8004832:	3001      	adds	r0, #1
 8004834:	d020      	beq.n	8004878 <_printf_common+0xa8>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	68e5      	ldr	r5, [r4, #12]
 800483a:	f003 0306 	and.w	r3, r3, #6
 800483e:	2b04      	cmp	r3, #4
 8004840:	bf18      	it	ne
 8004842:	2500      	movne	r5, #0
 8004844:	6832      	ldr	r2, [r6, #0]
 8004846:	f04f 0600 	mov.w	r6, #0
 800484a:	68a3      	ldr	r3, [r4, #8]
 800484c:	bf08      	it	eq
 800484e:	1aad      	subeq	r5, r5, r2
 8004850:	6922      	ldr	r2, [r4, #16]
 8004852:	bf08      	it	eq
 8004854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004858:	4293      	cmp	r3, r2
 800485a:	bfc4      	itt	gt
 800485c:	1a9b      	subgt	r3, r3, r2
 800485e:	18ed      	addgt	r5, r5, r3
 8004860:	341a      	adds	r4, #26
 8004862:	42b5      	cmp	r5, r6
 8004864:	d11a      	bne.n	800489c <_printf_common+0xcc>
 8004866:	2000      	movs	r0, #0
 8004868:	e008      	b.n	800487c <_printf_common+0xac>
 800486a:	2301      	movs	r3, #1
 800486c:	4652      	mov	r2, sl
 800486e:	4649      	mov	r1, r9
 8004870:	4638      	mov	r0, r7
 8004872:	47c0      	blx	r8
 8004874:	3001      	adds	r0, #1
 8004876:	d103      	bne.n	8004880 <_printf_common+0xb0>
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004880:	3501      	adds	r5, #1
 8004882:	e7c4      	b.n	800480e <_printf_common+0x3e>
 8004884:	2030      	movs	r0, #48	; 0x30
 8004886:	18e1      	adds	r1, r4, r3
 8004888:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004892:	4422      	add	r2, r4
 8004894:	3302      	adds	r3, #2
 8004896:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800489a:	e7c5      	b.n	8004828 <_printf_common+0x58>
 800489c:	2301      	movs	r3, #1
 800489e:	4622      	mov	r2, r4
 80048a0:	4649      	mov	r1, r9
 80048a2:	4638      	mov	r0, r7
 80048a4:	47c0      	blx	r8
 80048a6:	3001      	adds	r0, #1
 80048a8:	d0e6      	beq.n	8004878 <_printf_common+0xa8>
 80048aa:	3601      	adds	r6, #1
 80048ac:	e7d9      	b.n	8004862 <_printf_common+0x92>
	...

080048b0 <_printf_i>:
 80048b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b4:	7e0f      	ldrb	r7, [r1, #24]
 80048b6:	4691      	mov	r9, r2
 80048b8:	2f78      	cmp	r7, #120	; 0x78
 80048ba:	4680      	mov	r8, r0
 80048bc:	460c      	mov	r4, r1
 80048be:	469a      	mov	sl, r3
 80048c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048c6:	d807      	bhi.n	80048d8 <_printf_i+0x28>
 80048c8:	2f62      	cmp	r7, #98	; 0x62
 80048ca:	d80a      	bhi.n	80048e2 <_printf_i+0x32>
 80048cc:	2f00      	cmp	r7, #0
 80048ce:	f000 80d9 	beq.w	8004a84 <_printf_i+0x1d4>
 80048d2:	2f58      	cmp	r7, #88	; 0x58
 80048d4:	f000 80a4 	beq.w	8004a20 <_printf_i+0x170>
 80048d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048e0:	e03a      	b.n	8004958 <_printf_i+0xa8>
 80048e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048e6:	2b15      	cmp	r3, #21
 80048e8:	d8f6      	bhi.n	80048d8 <_printf_i+0x28>
 80048ea:	a101      	add	r1, pc, #4	; (adr r1, 80048f0 <_printf_i+0x40>)
 80048ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048f0:	08004949 	.word	0x08004949
 80048f4:	0800495d 	.word	0x0800495d
 80048f8:	080048d9 	.word	0x080048d9
 80048fc:	080048d9 	.word	0x080048d9
 8004900:	080048d9 	.word	0x080048d9
 8004904:	080048d9 	.word	0x080048d9
 8004908:	0800495d 	.word	0x0800495d
 800490c:	080048d9 	.word	0x080048d9
 8004910:	080048d9 	.word	0x080048d9
 8004914:	080048d9 	.word	0x080048d9
 8004918:	080048d9 	.word	0x080048d9
 800491c:	08004a6b 	.word	0x08004a6b
 8004920:	0800498d 	.word	0x0800498d
 8004924:	08004a4d 	.word	0x08004a4d
 8004928:	080048d9 	.word	0x080048d9
 800492c:	080048d9 	.word	0x080048d9
 8004930:	08004a8d 	.word	0x08004a8d
 8004934:	080048d9 	.word	0x080048d9
 8004938:	0800498d 	.word	0x0800498d
 800493c:	080048d9 	.word	0x080048d9
 8004940:	080048d9 	.word	0x080048d9
 8004944:	08004a55 	.word	0x08004a55
 8004948:	682b      	ldr	r3, [r5, #0]
 800494a:	1d1a      	adds	r2, r3, #4
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	602a      	str	r2, [r5, #0]
 8004950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004958:	2301      	movs	r3, #1
 800495a:	e0a4      	b.n	8004aa6 <_printf_i+0x1f6>
 800495c:	6820      	ldr	r0, [r4, #0]
 800495e:	6829      	ldr	r1, [r5, #0]
 8004960:	0606      	lsls	r6, r0, #24
 8004962:	f101 0304 	add.w	r3, r1, #4
 8004966:	d50a      	bpl.n	800497e <_printf_i+0xce>
 8004968:	680e      	ldr	r6, [r1, #0]
 800496a:	602b      	str	r3, [r5, #0]
 800496c:	2e00      	cmp	r6, #0
 800496e:	da03      	bge.n	8004978 <_printf_i+0xc8>
 8004970:	232d      	movs	r3, #45	; 0x2d
 8004972:	4276      	negs	r6, r6
 8004974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004978:	230a      	movs	r3, #10
 800497a:	485e      	ldr	r0, [pc, #376]	; (8004af4 <_printf_i+0x244>)
 800497c:	e019      	b.n	80049b2 <_printf_i+0x102>
 800497e:	680e      	ldr	r6, [r1, #0]
 8004980:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004984:	602b      	str	r3, [r5, #0]
 8004986:	bf18      	it	ne
 8004988:	b236      	sxthne	r6, r6
 800498a:	e7ef      	b.n	800496c <_printf_i+0xbc>
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	6820      	ldr	r0, [r4, #0]
 8004990:	1d19      	adds	r1, r3, #4
 8004992:	6029      	str	r1, [r5, #0]
 8004994:	0601      	lsls	r1, r0, #24
 8004996:	d501      	bpl.n	800499c <_printf_i+0xec>
 8004998:	681e      	ldr	r6, [r3, #0]
 800499a:	e002      	b.n	80049a2 <_printf_i+0xf2>
 800499c:	0646      	lsls	r6, r0, #25
 800499e:	d5fb      	bpl.n	8004998 <_printf_i+0xe8>
 80049a0:	881e      	ldrh	r6, [r3, #0]
 80049a2:	2f6f      	cmp	r7, #111	; 0x6f
 80049a4:	bf0c      	ite	eq
 80049a6:	2308      	moveq	r3, #8
 80049a8:	230a      	movne	r3, #10
 80049aa:	4852      	ldr	r0, [pc, #328]	; (8004af4 <_printf_i+0x244>)
 80049ac:	2100      	movs	r1, #0
 80049ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049b2:	6865      	ldr	r5, [r4, #4]
 80049b4:	2d00      	cmp	r5, #0
 80049b6:	bfa8      	it	ge
 80049b8:	6821      	ldrge	r1, [r4, #0]
 80049ba:	60a5      	str	r5, [r4, #8]
 80049bc:	bfa4      	itt	ge
 80049be:	f021 0104 	bicge.w	r1, r1, #4
 80049c2:	6021      	strge	r1, [r4, #0]
 80049c4:	b90e      	cbnz	r6, 80049ca <_printf_i+0x11a>
 80049c6:	2d00      	cmp	r5, #0
 80049c8:	d04d      	beq.n	8004a66 <_printf_i+0x1b6>
 80049ca:	4615      	mov	r5, r2
 80049cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80049d0:	fb03 6711 	mls	r7, r3, r1, r6
 80049d4:	5dc7      	ldrb	r7, [r0, r7]
 80049d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049da:	4637      	mov	r7, r6
 80049dc:	42bb      	cmp	r3, r7
 80049de:	460e      	mov	r6, r1
 80049e0:	d9f4      	bls.n	80049cc <_printf_i+0x11c>
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d10b      	bne.n	80049fe <_printf_i+0x14e>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	07de      	lsls	r6, r3, #31
 80049ea:	d508      	bpl.n	80049fe <_printf_i+0x14e>
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	6861      	ldr	r1, [r4, #4]
 80049f0:	4299      	cmp	r1, r3
 80049f2:	bfde      	ittt	le
 80049f4:	2330      	movle	r3, #48	; 0x30
 80049f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049fe:	1b52      	subs	r2, r2, r5
 8004a00:	6122      	str	r2, [r4, #16]
 8004a02:	464b      	mov	r3, r9
 8004a04:	4621      	mov	r1, r4
 8004a06:	4640      	mov	r0, r8
 8004a08:	f8cd a000 	str.w	sl, [sp]
 8004a0c:	aa03      	add	r2, sp, #12
 8004a0e:	f7ff fedf 	bl	80047d0 <_printf_common>
 8004a12:	3001      	adds	r0, #1
 8004a14:	d14c      	bne.n	8004ab0 <_printf_i+0x200>
 8004a16:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1a:	b004      	add	sp, #16
 8004a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a20:	4834      	ldr	r0, [pc, #208]	; (8004af4 <_printf_i+0x244>)
 8004a22:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a26:	6829      	ldr	r1, [r5, #0]
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a2e:	6029      	str	r1, [r5, #0]
 8004a30:	061d      	lsls	r5, r3, #24
 8004a32:	d514      	bpl.n	8004a5e <_printf_i+0x1ae>
 8004a34:	07df      	lsls	r7, r3, #31
 8004a36:	bf44      	itt	mi
 8004a38:	f043 0320 	orrmi.w	r3, r3, #32
 8004a3c:	6023      	strmi	r3, [r4, #0]
 8004a3e:	b91e      	cbnz	r6, 8004a48 <_printf_i+0x198>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	f023 0320 	bic.w	r3, r3, #32
 8004a46:	6023      	str	r3, [r4, #0]
 8004a48:	2310      	movs	r3, #16
 8004a4a:	e7af      	b.n	80049ac <_printf_i+0xfc>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	f043 0320 	orr.w	r3, r3, #32
 8004a52:	6023      	str	r3, [r4, #0]
 8004a54:	2378      	movs	r3, #120	; 0x78
 8004a56:	4828      	ldr	r0, [pc, #160]	; (8004af8 <_printf_i+0x248>)
 8004a58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a5c:	e7e3      	b.n	8004a26 <_printf_i+0x176>
 8004a5e:	0659      	lsls	r1, r3, #25
 8004a60:	bf48      	it	mi
 8004a62:	b2b6      	uxthmi	r6, r6
 8004a64:	e7e6      	b.n	8004a34 <_printf_i+0x184>
 8004a66:	4615      	mov	r5, r2
 8004a68:	e7bb      	b.n	80049e2 <_printf_i+0x132>
 8004a6a:	682b      	ldr	r3, [r5, #0]
 8004a6c:	6826      	ldr	r6, [r4, #0]
 8004a6e:	1d18      	adds	r0, r3, #4
 8004a70:	6961      	ldr	r1, [r4, #20]
 8004a72:	6028      	str	r0, [r5, #0]
 8004a74:	0635      	lsls	r5, r6, #24
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	d501      	bpl.n	8004a7e <_printf_i+0x1ce>
 8004a7a:	6019      	str	r1, [r3, #0]
 8004a7c:	e002      	b.n	8004a84 <_printf_i+0x1d4>
 8004a7e:	0670      	lsls	r0, r6, #25
 8004a80:	d5fb      	bpl.n	8004a7a <_printf_i+0x1ca>
 8004a82:	8019      	strh	r1, [r3, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	4615      	mov	r5, r2
 8004a88:	6123      	str	r3, [r4, #16]
 8004a8a:	e7ba      	b.n	8004a02 <_printf_i+0x152>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	2100      	movs	r1, #0
 8004a90:	1d1a      	adds	r2, r3, #4
 8004a92:	602a      	str	r2, [r5, #0]
 8004a94:	681d      	ldr	r5, [r3, #0]
 8004a96:	6862      	ldr	r2, [r4, #4]
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f000 f82f 	bl	8004afc <memchr>
 8004a9e:	b108      	cbz	r0, 8004aa4 <_printf_i+0x1f4>
 8004aa0:	1b40      	subs	r0, r0, r5
 8004aa2:	6060      	str	r0, [r4, #4]
 8004aa4:	6863      	ldr	r3, [r4, #4]
 8004aa6:	6123      	str	r3, [r4, #16]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aae:	e7a8      	b.n	8004a02 <_printf_i+0x152>
 8004ab0:	462a      	mov	r2, r5
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	4640      	mov	r0, r8
 8004ab6:	6923      	ldr	r3, [r4, #16]
 8004ab8:	47d0      	blx	sl
 8004aba:	3001      	adds	r0, #1
 8004abc:	d0ab      	beq.n	8004a16 <_printf_i+0x166>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	079b      	lsls	r3, r3, #30
 8004ac2:	d413      	bmi.n	8004aec <_printf_i+0x23c>
 8004ac4:	68e0      	ldr	r0, [r4, #12]
 8004ac6:	9b03      	ldr	r3, [sp, #12]
 8004ac8:	4298      	cmp	r0, r3
 8004aca:	bfb8      	it	lt
 8004acc:	4618      	movlt	r0, r3
 8004ace:	e7a4      	b.n	8004a1a <_printf_i+0x16a>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	4632      	mov	r2, r6
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	4640      	mov	r0, r8
 8004ad8:	47d0      	blx	sl
 8004ada:	3001      	adds	r0, #1
 8004adc:	d09b      	beq.n	8004a16 <_printf_i+0x166>
 8004ade:	3501      	adds	r5, #1
 8004ae0:	68e3      	ldr	r3, [r4, #12]
 8004ae2:	9903      	ldr	r1, [sp, #12]
 8004ae4:	1a5b      	subs	r3, r3, r1
 8004ae6:	42ab      	cmp	r3, r5
 8004ae8:	dcf2      	bgt.n	8004ad0 <_printf_i+0x220>
 8004aea:	e7eb      	b.n	8004ac4 <_printf_i+0x214>
 8004aec:	2500      	movs	r5, #0
 8004aee:	f104 0619 	add.w	r6, r4, #25
 8004af2:	e7f5      	b.n	8004ae0 <_printf_i+0x230>
 8004af4:	08006599 	.word	0x08006599
 8004af8:	080065aa 	.word	0x080065aa

08004afc <memchr>:
 8004afc:	4603      	mov	r3, r0
 8004afe:	b510      	push	{r4, lr}
 8004b00:	b2c9      	uxtb	r1, r1
 8004b02:	4402      	add	r2, r0
 8004b04:	4293      	cmp	r3, r2
 8004b06:	4618      	mov	r0, r3
 8004b08:	d101      	bne.n	8004b0e <memchr+0x12>
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	e003      	b.n	8004b16 <memchr+0x1a>
 8004b0e:	7804      	ldrb	r4, [r0, #0]
 8004b10:	3301      	adds	r3, #1
 8004b12:	428c      	cmp	r4, r1
 8004b14:	d1f6      	bne.n	8004b04 <memchr+0x8>
 8004b16:	bd10      	pop	{r4, pc}

08004b18 <memcpy>:
 8004b18:	440a      	add	r2, r1
 8004b1a:	4291      	cmp	r1, r2
 8004b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b20:	d100      	bne.n	8004b24 <memcpy+0xc>
 8004b22:	4770      	bx	lr
 8004b24:	b510      	push	{r4, lr}
 8004b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b2a:	4291      	cmp	r1, r2
 8004b2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b30:	d1f9      	bne.n	8004b26 <memcpy+0xe>
 8004b32:	bd10      	pop	{r4, pc}

08004b34 <memmove>:
 8004b34:	4288      	cmp	r0, r1
 8004b36:	b510      	push	{r4, lr}
 8004b38:	eb01 0402 	add.w	r4, r1, r2
 8004b3c:	d902      	bls.n	8004b44 <memmove+0x10>
 8004b3e:	4284      	cmp	r4, r0
 8004b40:	4623      	mov	r3, r4
 8004b42:	d807      	bhi.n	8004b54 <memmove+0x20>
 8004b44:	1e43      	subs	r3, r0, #1
 8004b46:	42a1      	cmp	r1, r4
 8004b48:	d008      	beq.n	8004b5c <memmove+0x28>
 8004b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b52:	e7f8      	b.n	8004b46 <memmove+0x12>
 8004b54:	4601      	mov	r1, r0
 8004b56:	4402      	add	r2, r0
 8004b58:	428a      	cmp	r2, r1
 8004b5a:	d100      	bne.n	8004b5e <memmove+0x2a>
 8004b5c:	bd10      	pop	{r4, pc}
 8004b5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b66:	e7f7      	b.n	8004b58 <memmove+0x24>

08004b68 <_free_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	2900      	cmp	r1, #0
 8004b6e:	d040      	beq.n	8004bf2 <_free_r+0x8a>
 8004b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b74:	1f0c      	subs	r4, r1, #4
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bfb8      	it	lt
 8004b7a:	18e4      	addlt	r4, r4, r3
 8004b7c:	f000 f910 	bl	8004da0 <__malloc_lock>
 8004b80:	4a1c      	ldr	r2, [pc, #112]	; (8004bf4 <_free_r+0x8c>)
 8004b82:	6813      	ldr	r3, [r2, #0]
 8004b84:	b933      	cbnz	r3, 8004b94 <_free_r+0x2c>
 8004b86:	6063      	str	r3, [r4, #4]
 8004b88:	6014      	str	r4, [r2, #0]
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b90:	f000 b90c 	b.w	8004dac <__malloc_unlock>
 8004b94:	42a3      	cmp	r3, r4
 8004b96:	d908      	bls.n	8004baa <_free_r+0x42>
 8004b98:	6820      	ldr	r0, [r4, #0]
 8004b9a:	1821      	adds	r1, r4, r0
 8004b9c:	428b      	cmp	r3, r1
 8004b9e:	bf01      	itttt	eq
 8004ba0:	6819      	ldreq	r1, [r3, #0]
 8004ba2:	685b      	ldreq	r3, [r3, #4]
 8004ba4:	1809      	addeq	r1, r1, r0
 8004ba6:	6021      	streq	r1, [r4, #0]
 8004ba8:	e7ed      	b.n	8004b86 <_free_r+0x1e>
 8004baa:	461a      	mov	r2, r3
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	b10b      	cbz	r3, 8004bb4 <_free_r+0x4c>
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	d9fa      	bls.n	8004baa <_free_r+0x42>
 8004bb4:	6811      	ldr	r1, [r2, #0]
 8004bb6:	1850      	adds	r0, r2, r1
 8004bb8:	42a0      	cmp	r0, r4
 8004bba:	d10b      	bne.n	8004bd4 <_free_r+0x6c>
 8004bbc:	6820      	ldr	r0, [r4, #0]
 8004bbe:	4401      	add	r1, r0
 8004bc0:	1850      	adds	r0, r2, r1
 8004bc2:	4283      	cmp	r3, r0
 8004bc4:	6011      	str	r1, [r2, #0]
 8004bc6:	d1e0      	bne.n	8004b8a <_free_r+0x22>
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	4401      	add	r1, r0
 8004bce:	6011      	str	r1, [r2, #0]
 8004bd0:	6053      	str	r3, [r2, #4]
 8004bd2:	e7da      	b.n	8004b8a <_free_r+0x22>
 8004bd4:	d902      	bls.n	8004bdc <_free_r+0x74>
 8004bd6:	230c      	movs	r3, #12
 8004bd8:	602b      	str	r3, [r5, #0]
 8004bda:	e7d6      	b.n	8004b8a <_free_r+0x22>
 8004bdc:	6820      	ldr	r0, [r4, #0]
 8004bde:	1821      	adds	r1, r4, r0
 8004be0:	428b      	cmp	r3, r1
 8004be2:	bf01      	itttt	eq
 8004be4:	6819      	ldreq	r1, [r3, #0]
 8004be6:	685b      	ldreq	r3, [r3, #4]
 8004be8:	1809      	addeq	r1, r1, r0
 8004bea:	6021      	streq	r1, [r4, #0]
 8004bec:	6063      	str	r3, [r4, #4]
 8004bee:	6054      	str	r4, [r2, #4]
 8004bf0:	e7cb      	b.n	8004b8a <_free_r+0x22>
 8004bf2:	bd38      	pop	{r3, r4, r5, pc}
 8004bf4:	20000570 	.word	0x20000570

08004bf8 <sbrk_aligned>:
 8004bf8:	b570      	push	{r4, r5, r6, lr}
 8004bfa:	4e0e      	ldr	r6, [pc, #56]	; (8004c34 <sbrk_aligned+0x3c>)
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	6831      	ldr	r1, [r6, #0]
 8004c00:	4605      	mov	r5, r0
 8004c02:	b911      	cbnz	r1, 8004c0a <sbrk_aligned+0x12>
 8004c04:	f000 f8bc 	bl	8004d80 <_sbrk_r>
 8004c08:	6030      	str	r0, [r6, #0]
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f000 f8b7 	bl	8004d80 <_sbrk_r>
 8004c12:	1c43      	adds	r3, r0, #1
 8004c14:	d00a      	beq.n	8004c2c <sbrk_aligned+0x34>
 8004c16:	1cc4      	adds	r4, r0, #3
 8004c18:	f024 0403 	bic.w	r4, r4, #3
 8004c1c:	42a0      	cmp	r0, r4
 8004c1e:	d007      	beq.n	8004c30 <sbrk_aligned+0x38>
 8004c20:	1a21      	subs	r1, r4, r0
 8004c22:	4628      	mov	r0, r5
 8004c24:	f000 f8ac 	bl	8004d80 <_sbrk_r>
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d101      	bne.n	8004c30 <sbrk_aligned+0x38>
 8004c2c:	f04f 34ff 	mov.w	r4, #4294967295
 8004c30:	4620      	mov	r0, r4
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	20000574 	.word	0x20000574

08004c38 <_malloc_r>:
 8004c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3c:	1ccd      	adds	r5, r1, #3
 8004c3e:	f025 0503 	bic.w	r5, r5, #3
 8004c42:	3508      	adds	r5, #8
 8004c44:	2d0c      	cmp	r5, #12
 8004c46:	bf38      	it	cc
 8004c48:	250c      	movcc	r5, #12
 8004c4a:	2d00      	cmp	r5, #0
 8004c4c:	4607      	mov	r7, r0
 8004c4e:	db01      	blt.n	8004c54 <_malloc_r+0x1c>
 8004c50:	42a9      	cmp	r1, r5
 8004c52:	d905      	bls.n	8004c60 <_malloc_r+0x28>
 8004c54:	230c      	movs	r3, #12
 8004c56:	2600      	movs	r6, #0
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c60:	4e2e      	ldr	r6, [pc, #184]	; (8004d1c <_malloc_r+0xe4>)
 8004c62:	f000 f89d 	bl	8004da0 <__malloc_lock>
 8004c66:	6833      	ldr	r3, [r6, #0]
 8004c68:	461c      	mov	r4, r3
 8004c6a:	bb34      	cbnz	r4, 8004cba <_malloc_r+0x82>
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f7ff ffc2 	bl	8004bf8 <sbrk_aligned>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	4604      	mov	r4, r0
 8004c78:	d14d      	bne.n	8004d16 <_malloc_r+0xde>
 8004c7a:	6834      	ldr	r4, [r6, #0]
 8004c7c:	4626      	mov	r6, r4
 8004c7e:	2e00      	cmp	r6, #0
 8004c80:	d140      	bne.n	8004d04 <_malloc_r+0xcc>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	4631      	mov	r1, r6
 8004c86:	4638      	mov	r0, r7
 8004c88:	eb04 0803 	add.w	r8, r4, r3
 8004c8c:	f000 f878 	bl	8004d80 <_sbrk_r>
 8004c90:	4580      	cmp	r8, r0
 8004c92:	d13a      	bne.n	8004d0a <_malloc_r+0xd2>
 8004c94:	6821      	ldr	r1, [r4, #0]
 8004c96:	3503      	adds	r5, #3
 8004c98:	1a6d      	subs	r5, r5, r1
 8004c9a:	f025 0503 	bic.w	r5, r5, #3
 8004c9e:	3508      	adds	r5, #8
 8004ca0:	2d0c      	cmp	r5, #12
 8004ca2:	bf38      	it	cc
 8004ca4:	250c      	movcc	r5, #12
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	4629      	mov	r1, r5
 8004caa:	f7ff ffa5 	bl	8004bf8 <sbrk_aligned>
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d02b      	beq.n	8004d0a <_malloc_r+0xd2>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	442b      	add	r3, r5
 8004cb6:	6023      	str	r3, [r4, #0]
 8004cb8:	e00e      	b.n	8004cd8 <_malloc_r+0xa0>
 8004cba:	6822      	ldr	r2, [r4, #0]
 8004cbc:	1b52      	subs	r2, r2, r5
 8004cbe:	d41e      	bmi.n	8004cfe <_malloc_r+0xc6>
 8004cc0:	2a0b      	cmp	r2, #11
 8004cc2:	d916      	bls.n	8004cf2 <_malloc_r+0xba>
 8004cc4:	1961      	adds	r1, r4, r5
 8004cc6:	42a3      	cmp	r3, r4
 8004cc8:	6025      	str	r5, [r4, #0]
 8004cca:	bf18      	it	ne
 8004ccc:	6059      	strne	r1, [r3, #4]
 8004cce:	6863      	ldr	r3, [r4, #4]
 8004cd0:	bf08      	it	eq
 8004cd2:	6031      	streq	r1, [r6, #0]
 8004cd4:	5162      	str	r2, [r4, r5]
 8004cd6:	604b      	str	r3, [r1, #4]
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f104 060b 	add.w	r6, r4, #11
 8004cde:	f000 f865 	bl	8004dac <__malloc_unlock>
 8004ce2:	f026 0607 	bic.w	r6, r6, #7
 8004ce6:	1d23      	adds	r3, r4, #4
 8004ce8:	1af2      	subs	r2, r6, r3
 8004cea:	d0b6      	beq.n	8004c5a <_malloc_r+0x22>
 8004cec:	1b9b      	subs	r3, r3, r6
 8004cee:	50a3      	str	r3, [r4, r2]
 8004cf0:	e7b3      	b.n	8004c5a <_malloc_r+0x22>
 8004cf2:	6862      	ldr	r2, [r4, #4]
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	bf0c      	ite	eq
 8004cf8:	6032      	streq	r2, [r6, #0]
 8004cfa:	605a      	strne	r2, [r3, #4]
 8004cfc:	e7ec      	b.n	8004cd8 <_malloc_r+0xa0>
 8004cfe:	4623      	mov	r3, r4
 8004d00:	6864      	ldr	r4, [r4, #4]
 8004d02:	e7b2      	b.n	8004c6a <_malloc_r+0x32>
 8004d04:	4634      	mov	r4, r6
 8004d06:	6876      	ldr	r6, [r6, #4]
 8004d08:	e7b9      	b.n	8004c7e <_malloc_r+0x46>
 8004d0a:	230c      	movs	r3, #12
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	f000 f84c 	bl	8004dac <__malloc_unlock>
 8004d14:	e7a1      	b.n	8004c5a <_malloc_r+0x22>
 8004d16:	6025      	str	r5, [r4, #0]
 8004d18:	e7de      	b.n	8004cd8 <_malloc_r+0xa0>
 8004d1a:	bf00      	nop
 8004d1c:	20000570 	.word	0x20000570

08004d20 <_realloc_r>:
 8004d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d24:	4680      	mov	r8, r0
 8004d26:	4614      	mov	r4, r2
 8004d28:	460e      	mov	r6, r1
 8004d2a:	b921      	cbnz	r1, 8004d36 <_realloc_r+0x16>
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d32:	f7ff bf81 	b.w	8004c38 <_malloc_r>
 8004d36:	b92a      	cbnz	r2, 8004d44 <_realloc_r+0x24>
 8004d38:	f7ff ff16 	bl	8004b68 <_free_r>
 8004d3c:	4625      	mov	r5, r4
 8004d3e:	4628      	mov	r0, r5
 8004d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d44:	f000 f838 	bl	8004db8 <_malloc_usable_size_r>
 8004d48:	4284      	cmp	r4, r0
 8004d4a:	4607      	mov	r7, r0
 8004d4c:	d802      	bhi.n	8004d54 <_realloc_r+0x34>
 8004d4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d52:	d812      	bhi.n	8004d7a <_realloc_r+0x5a>
 8004d54:	4621      	mov	r1, r4
 8004d56:	4640      	mov	r0, r8
 8004d58:	f7ff ff6e 	bl	8004c38 <_malloc_r>
 8004d5c:	4605      	mov	r5, r0
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d0ed      	beq.n	8004d3e <_realloc_r+0x1e>
 8004d62:	42bc      	cmp	r4, r7
 8004d64:	4622      	mov	r2, r4
 8004d66:	4631      	mov	r1, r6
 8004d68:	bf28      	it	cs
 8004d6a:	463a      	movcs	r2, r7
 8004d6c:	f7ff fed4 	bl	8004b18 <memcpy>
 8004d70:	4631      	mov	r1, r6
 8004d72:	4640      	mov	r0, r8
 8004d74:	f7ff fef8 	bl	8004b68 <_free_r>
 8004d78:	e7e1      	b.n	8004d3e <_realloc_r+0x1e>
 8004d7a:	4635      	mov	r5, r6
 8004d7c:	e7df      	b.n	8004d3e <_realloc_r+0x1e>
	...

08004d80 <_sbrk_r>:
 8004d80:	b538      	push	{r3, r4, r5, lr}
 8004d82:	2300      	movs	r3, #0
 8004d84:	4d05      	ldr	r5, [pc, #20]	; (8004d9c <_sbrk_r+0x1c>)
 8004d86:	4604      	mov	r4, r0
 8004d88:	4608      	mov	r0, r1
 8004d8a:	602b      	str	r3, [r5, #0]
 8004d8c:	f7fd fb5c 	bl	8002448 <_sbrk>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d102      	bne.n	8004d9a <_sbrk_r+0x1a>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	b103      	cbz	r3, 8004d9a <_sbrk_r+0x1a>
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	20000578 	.word	0x20000578

08004da0 <__malloc_lock>:
 8004da0:	4801      	ldr	r0, [pc, #4]	; (8004da8 <__malloc_lock+0x8>)
 8004da2:	f000 b811 	b.w	8004dc8 <__retarget_lock_acquire_recursive>
 8004da6:	bf00      	nop
 8004da8:	2000057c 	.word	0x2000057c

08004dac <__malloc_unlock>:
 8004dac:	4801      	ldr	r0, [pc, #4]	; (8004db4 <__malloc_unlock+0x8>)
 8004dae:	f000 b80c 	b.w	8004dca <__retarget_lock_release_recursive>
 8004db2:	bf00      	nop
 8004db4:	2000057c 	.word	0x2000057c

08004db8 <_malloc_usable_size_r>:
 8004db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dbc:	1f18      	subs	r0, r3, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfbc      	itt	lt
 8004dc2:	580b      	ldrlt	r3, [r1, r0]
 8004dc4:	18c0      	addlt	r0, r0, r3
 8004dc6:	4770      	bx	lr

08004dc8 <__retarget_lock_acquire_recursive>:
 8004dc8:	4770      	bx	lr

08004dca <__retarget_lock_release_recursive>:
 8004dca:	4770      	bx	lr

08004dcc <_init>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	bf00      	nop
 8004dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd2:	bc08      	pop	{r3}
 8004dd4:	469e      	mov	lr, r3
 8004dd6:	4770      	bx	lr

08004dd8 <_fini>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	bf00      	nop
 8004ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dde:	bc08      	pop	{r3}
 8004de0:	469e      	mov	lr, r3
 8004de2:	4770      	bx	lr
